{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a modern Islamic Prayer Tracker web application that helps Muslims track their five daily prayers (Namaz/Salah) with analytics, achievements, and progress visualization. The app provides daily prayer tracking, historical record management (Qaza prayers), streak tracking, and gamification through achievements to encourage consistent prayer habits.\n\n# Recent Changes\n\n**October 3, 2025** - Successfully configured GitHub import for Replit environment:\n- Installed all npm dependencies from package.json\n- **Switched to Supabase PostgreSQL database** (transaction pooler on port 6543)\n- Verified database schema exists in Supabase using Drizzle\n- Confirmed demo user (id: 'demo-user') exists in Supabase with user stats\n- Configured workflow with webview output on port 5000 for frontend\n- Set deployment target to autoscale with build and run commands\n- Updated documentation to specify Supabase as required database (NOT Replit database)\n- Verified all pages work correctly: Dashboard, Qaza, Achievements, Analytics\n- Application is fully functional with Supabase and ready to use\n\n**October 2, 2025** - Enhanced Dashboard UI:\n- Added modern calendar date display at top with navigation arrows (Today, October 2 with Hijri date)\n- Implemented current prayer time card with live countdown to next prayer\n- Updated prayer list layout: checkmarks on left, prayer times on right, notification icons\n- Replaced week overview with Week/Month calendar view with navigation arrows and progress indicators\n- Added real-time countdown timer that updates every second\n- Enhanced calendar helpers for week and month data calculations\n- All changes maintain app's existing theme and glassmorphism design\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Framework & Routing**\n- React 18 with TypeScript for type safety and component-based development\n- Wouter for lightweight client-side routing with four main pages: Dashboard, Qaza (prayer history), Achievements, and Analytics\n- Vite as the build tool and development server for fast builds and hot module replacement\n\n**State Management**\n- React Context API (PrayerContext) for global prayer tracking state\n- TanStack React Query (formerly React Query) for server state management, caching, and API synchronization\n- localStorage for offline persistence of prayer data\n\n**UI & Styling**\n- Shadcn/ui component library built on Radix UI primitives for accessible, customizable components\n- Tailwind CSS with custom CSS variables for theming\n- next-themes for dark/light mode support with system preference detection\n- Glassmorphism design pattern with backdrop blur effects and semi-transparent backgrounds\n\n**Data Visualization**\n- Chart.js with react-chartjs-2 wrapper for prayer analytics\n- Line charts for trends, doughnut charts for completion rates, bar charts for period comparisons\n- Custom progress rings and visual indicators for streaks and weekly progress\n\n## Backend Architecture\n\n**Runtime & Framework**\n- Node.js with Express.js as the web framework\n- TypeScript execution via tsx in development mode\n- RESTful API design with routes for prayer records, achievements, and user statistics\n\n**Development Setup**\n- Hot reload in development using Vite middleware integration\n- esbuild for fast backend TypeScript compilation in production\n- Environment-based configuration with dotenv\n\n**API Structure**\n- `/api/prayers/*` - Prayer record CRUD operations with batch update support\n- `/api/achievements/*` - Achievement tracking and retrieval\n- `/api/stats/*` - User statistics and analytics endpoints\n- Date-based querying with range support for historical data\n\n## Data Storage Solutions\n\n**Database**\n- PostgreSQL as the primary database via Supabase (serverless Postgres with transaction pooler)\n- Drizzle ORM for type-safe database operations and schema management\n- **IMPORTANT:** This project requires Supabase database connection. Do NOT use Replit's built-in PostgreSQL.\n- Transaction pooler (port 6543) used for IPv4 compatibility\n- Demo user (id: 'demo-user') exists in Supabase for development/testing\n\n**Schema Design**\n- `users` table: Authentication with username/email, password hash, profile data\n- `prayer_records` table: Daily prayer tracking with JSONB column for flexible prayer status storage (completed, onTime, completedAt for each of 5 prayers)\n- `achievements` table: Gamification system with type, title, description, earned date, and metadata JSONB\n- `user_stats` table: Aggregated statistics for performance optimization (total prayers, streaks, perfect weeks, etc.)\n\n**Data Patterns**\n- JSONB columns for flexible schema evolution without migrations\n- Composite keys using userId + date for prayer records\n- Indexed queries for date ranges and user lookups\n\n## Authentication and Authorization\n\n**Current Implementation**\n- Demo mode with hardcoded \"demo-user\" for development\n- Authentication code present but commented out throughout the application\n- JWT token infrastructure prepared (bcrypt for password hashing, jsonwebtoken for tokens)\n- Session management setup with connect-pg-simple for PostgreSQL-backed sessions\n\n**Prepared Authentication Flow**\n- Login/Register schemas with Zod validation\n- Protected API routes with bearer token middleware\n- User context and hooks ready for integration\n- 7-day JWT expiration with automatic refresh\n\n## Core Features Architecture\n\n**Prayer Tracking**\n- Five daily prayers (Fajr, Dhuhr, Asr, Maghrib, Isha) with completion and on-time status\n- Real-time updates with optimistic UI updates via React Query mutations\n- localStorage persistence for offline capability and instant loading\n\n**Qaza (Historical) Management**\n- Three view modes: Daily calendar picker, Weekly bulk update, Monthly overview\n- Batch update API for efficient multi-date modifications\n- Descending date ordering (most recent first) for better UX\n\n**Analytics System**\n- Period-based analytics (week, month, year) with dynamic chart generation\n- Completion rate calculations, on-time percentage tracking\n- Qaza prayer calculation: (Total obligatory prayers for period up to today) - (prayers performed)\n- Trend analysis with historical data visualization\n\n**Achievement System**\n- Multiple achievement types: perfect_day, perfect_week, streak_milestone, consistency tracking\n- Dynamic icon and gradient assignment based on achievement type\n- Metadata storage for achievement context (streak count, period, rates)\n- Milestone progress tracking with percentage completion\n\n**Toast Notifications**\n- Radix UI Toast positioned at top-right\n- Glassmorphism effects with backdrop blur and semi-transparent backgrounds\n- Theme-aware styling for both light and dark modes\n- Success/error/info variants for different notification types\n\n# External Dependencies\n\n**Database & ORM**\n- Supabase (Serverless PostgreSQL) for cloud-hosted database\n- Drizzle ORM for type-safe database operations and migrations\n- postgres npm package for database connections via transaction pooler\n\n**UI Component Library**\n- Radix UI primitives (@radix-ui/*) for accessible, unstyled components\n- Shadcn/ui configuration for pre-built styled components\n- Tailwind CSS for utility-first styling\n- next-themes for theme management\n\n**Data Visualization**\n- Chart.js for chart rendering\n- react-chartjs-2 for React integration\n- Support for Line, Doughnut, and Bar chart types\n\n**Form & Validation**\n- React Hook Form for form state management\n- Zod for runtime schema validation\n- @hookform/resolvers for Zod integration\n\n**State Management & API**\n- TanStack React Query for server state and caching\n- Native fetch API for HTTP requests\n- Custom apiRequest wrapper with credential handling\n\n**Authentication (Prepared)**\n- bcrypt for password hashing (6.0.0 or higher)\n- jsonwebtoken for JWT token generation/verification\n- connect-pg-simple for session storage (configured but not active)\n\n**Development Tools**\n- tsx for TypeScript execution in development\n- Vite for frontend bundling and dev server\n- esbuild for production backend compilation\n- cross-env for cross-platform environment variables\n\n# Replit Configuration\n\n**Environment Setup**\n- Server binds to 0.0.0.0:5000 for Replit proxy compatibility\n- Vite configured with `allowedHosts: true` to accept Replit's iframe proxy\n- Frontend workflow configured with webview output type on port 5000\n\n**Database**\n- Using Replit PostgreSQL (heliumdb) with DATABASE_URL environment variable\n- Demo user created with id 'demo-user' for development testing\n- All required tables exist: users, prayer_records, achievements, user_stats\n\n**Deployment**\n- Deployment target: autoscale (stateless web app)\n- Build command: `npm run build` (Vite + esbuild)\n- Run command: `npm run start` (production server)\n- Development: `npm run dev` (tsx with hot reload)","size_bytes":8876},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-10px)' }\n        },\n        'pulse-soft': {\n          '0%, 100%': { opacity: '1' },\n          '50%': { opacity: '0.8' }\n        },\n        'slide-up': {\n          'from': { transform: 'translateY(20px)', opacity: '0' },\n          'to': { transform: 'translateY(0)', opacity: '1' }\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        'float': 'float 6s ease-in-out infinite',\n        'pulse-soft': 'pulse-soft 2s ease-in-out infinite',\n        'slide-up': 'slide-up 0.3s ease-out',\n      },\n      backdropBlur: {\n        xs: '2px',\n      }\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3367},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":635},"attached_assets/namaz-tracker-prompt_1758019075894.md":{"content":"# Islamic Prayer Tracker Web App - Development Prompt\n\n## Project Overview\nCreate a modern, responsive web application for tracking daily Islamic prayers (Namaz) with analytics, achievements, and beautiful UI/UX design.\n\n## Core Functionality\n\n### Prayer Tracking System\n- Track 5 daily prayers: Fajr, Dhuhr (Zohar), Asr, Maghrib, and Isha\n- Calculate total prayers for week, month, and year (5 prayers × 7 days = 35 prayers per week)\n- Distinguish between prayers completed on-time vs. missed prayers (Qaza)\n- Allow users to mark prayers as completed, which automatically updates counters\n- Maintain running count of remaining prayers for current week/month/year\n\n### Three Main Pages\n\n#### 1. Dashboard Page\n- **Daily Prayer Tracker**: Interactive interface to mark today's prayers as completed\n- **Week Progress Graph**: Visual representation showing completed vs. remaining prayers for current week\n- **Quick Stats**: Display current week's prayer completion percentage\n- **Qaza Counter**: Show total missed prayers that need to be made up\n- **Weekly Goal Indicator**: Progress bar or circular progress showing week completion status\n\n#### 2. Achievements Page\n- **Achievement Cards**: Beautiful cards displaying when user completes all prayers in a week\n- **Card Details Include**:\n  - Exact date of achievement\n  - Week number and month\n  - Year\n  - Breakdown: On-time prayers vs. Qaza prayers completed\n  - Celebratory design with Islamic patterns or calligraphy\n- **Achievement Timeline**: Chronological display of all achievements\n- **Streak Counter**: Show current and best streak of complete weeks\n\n#### 3. Analytics Page\n- **Multi-timeframe Graphs**:\n  - Weekly view: Completed vs. missed prayers by day\n  - Monthly view: Prayer completion trends over weeks\n  - Yearly view: Monthly completion percentages\n- **Prayer-specific Analytics**: Individual graphs for each of the 5 prayers\n- **Achievement Timeline Graph**: Visual timeline showing when achievements were earned\n- **Statistics Summary**:\n  - Total prayers completed\n  - On-time vs. Qaza ratio\n  - Most/least consistent prayer times\n  - Monthly averages\n\n## Design Requirements\n\n### Visual Design\n- **Modern UI/UX**: Clean, intuitive interface with smooth animations\n- **Dark/Light Mode**: Seamless toggle between themes with proper color schemes\n- **Liquid Glass Effects**: Implement glassmorphism/liquid glass effects on cards, modals, and key UI elements\n- **Islamic Aesthetic**: Subtle Islamic geometric patterns or calligraphy elements\n- **Responsive Design**: Mobile-first approach, works perfectly on all screen sizes\n\n### User Experience\n- **Interactive Elements**: Smooth hover effects, satisfying click animations\n- **Progress Visualizations**: Engaging progress bars, circular progress indicators\n- **Color Psychology**: Use calming, spiritual colors (greens, blues, golds)\n- **Accessibility**: Proper contrast ratios, keyboard navigation, screen reader support\n\n### Technical Specifications\n- **Frontend Framework**: Use modern JavaScript framework (React, Vue, or vanilla JS with modern features)\n- **Charts/Graphs**: Interactive charts using Chart.js, D3.js, or similar library\n- **Data Storage**: Local storage or IndexedDB for offline functionality\n- **Animations**: CSS animations and transitions for smooth interactions\n- **Icons**: Islamic/prayer-themed icons and symbols\n\n## Key Features\n\n### Smart Calculations\n- Automatically calculate prayer requirements based on Islamic calendar\n- Handle different time zones and prayer time variations\n- Account for travel days or special circumstances\n- Weekly/monthly/yearly prayer totals with accurate counting\n\n### Achievement System\n- Unlock achievements for completing prayer goals\n- Special recognition for maintaining streaks\n- Visual celebration when weekly goals are met\n- Motivational elements to encourage consistency\n\n### Data Persistence\n- Save all prayer data locally\n- Export/import functionality for backup\n- Historical data preservation\n- Offline functionality\n\n## Implementation Guidelines\n\n### Performance\n- Fast loading times with optimized assets\n- Smooth animations at 60fps\n- Efficient data storage and retrieval\n- Lazy loading for better performance\n\n### Code Quality\n- Clean, maintainable code structure\n- Proper error handling\n- Cross-browser compatibility\n- Security best practices for data handling\n\n### User Interface Elements\n- **Navigation**: Clean tab-based or sidebar navigation\n- **Buttons**: Modern, responsive buttons with hover effects\n- **Cards**: Glassmorphism cards with subtle shadows and blur effects\n- **Forms**: Intuitive prayer marking interface\n- **Graphs**: Interactive, colorful charts with smooth transitions\n\n## Success Criteria\n- Intuitive prayer tracking that takes less than 10 seconds daily\n- Beautiful, engaging visual design that motivates regular use\n- Accurate calculations and data persistence\n- Smooth performance across all devices\n- Meaningful analytics that help users understand their prayer habits\n- Achievement system that celebrates spiritual consistency\n\n## Additional Considerations\n- Include brief Islamic context/motivation for prayer consistency\n- Consider prayer time reminders (if requested)\n- Implement gentle motivational messages\n- Ensure cultural sensitivity in design and messaging\n- Make the app feel like a spiritual companion, not just a tracker\n\nPlease create a fully functional web application following these specifications, paying special attention to the beautiful UI design with liquid glass effects, comprehensive analytics, and meaningful achievement system.","size_bytes":5579},"server/index.ts":{"content":"import { config } from \"dotenv\";\nconfig(); // Load environment variables\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`IslamIC Prayer Tracker running at http://0.0.0.0:${port}`);\n    log(`Database: PostgreSQL (${process.env.DATABASE_URL ? 'Connected' : 'Not Connected'})`);\n  });\n})();\n","size_bytes":2226},"server/routes.ts":{"content":"import type { Express, RequestHandler } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPrayerRecordSchema, insertAchievementSchema, dateParamSchema, dateRangeQuerySchema, userStatsUpdateSchema, batchUpdatePrayersSchema } from \"@shared/schema\";\ninterface DevAuth {\n  (req: any, res: any, next: any): void;\n}\n\n// Development middleware that provides a demo user when not using authentication\nconst devAuth: DevAuth = (req: any, res, next) => {\n  req.user = demoUser;\n  next();\n};\n\n// Import z here\nimport { z } from \"zod\";\n\n// Helper function to calculate and update user statistics\nasync function updateUserStatistics(userId: string): Promise<void> {\n  try {\n    // Get all prayer records for the user\n    const allRecords = await storage.getPrayerRecords(userId);\n    \n    let totalPrayers = 0;\n    let onTimePrayers = 0;\n    let qazaPrayers = 0;\n    let currentStreak = 0;\n    let bestStreak = 0;\n    let perfectWeeks = 0;\n    \n    // Sort records by date for streak calculation\n    const sortedRecords = allRecords.sort((a, b) => b.date.localeCompare(a.date));\n    \n    // Calculate current streak (from most recent date backwards)\n    let streakBroken = false;\n    let previousDate: Date | null = null;\n    \n    for (const record of sortedRecords) {\n      if (record.prayers) {\n        const currentDate = new Date(record.date);\n        const dayPrayers = Object.values(record.prayers);\n        const allCompleted = dayPrayers.every(prayer => prayer.completed);\n        \n        // Check for date gap (more than 1 day difference)\n        if (previousDate) {\n          const daysDiff = Math.floor((previousDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24));\n          if (daysDiff > 1) {\n            streakBroken = true;\n          }\n        }\n        \n        if (!streakBroken && allCompleted) {\n          currentStreak++;\n          previousDate = currentDate;\n        } else if (!allCompleted) {\n          streakBroken = true;\n        }\n      }\n    }\n    \n    // Calculate historical streaks to find best streak\n    let tempStreak = 0;\n    const chronologicalRecords = allRecords.sort((a, b) => a.date.localeCompare(b.date));\n    \n    for (const record of chronologicalRecords) {\n      if (record.prayers) {\n        const dayPrayers = Object.values(record.prayers);\n        \n        // Count prayers for totals\n        dayPrayers.forEach(prayer => {\n          if (prayer.completed) {\n            totalPrayers++;\n            if (prayer.onTime) {\n              onTimePrayers++;\n            }\n          } else {\n            qazaPrayers++;\n          }\n        });\n        \n        // Check streak\n        const allCompleted = dayPrayers.every(prayer => prayer.completed);\n        if (allCompleted) {\n          tempStreak++;\n          bestStreak = Math.max(bestStreak, tempStreak);\n        } else {\n          tempStreak = 0;\n        }\n      }\n    }\n    \n    // Calculate perfect weeks\n    const weekGroups = groupRecordsByWeek(chronologicalRecords);\n    perfectWeeks = weekGroups.filter(week => week.completionRate === 100).length;\n    \n    // Ensure best streak includes current streak\n    bestStreak = Math.max(bestStreak, currentStreak);\n    \n    // Update or create user statistics\n    let userStats = await storage.getUserStats(userId);\n    \n    if (userStats) {\n      await storage.updateUserStats(userId, {\n        totalPrayers,\n        onTimePrayers,\n        qazaPrayers,\n        currentStreak,\n        bestStreak,\n        perfectWeeks,\n        lastStreakUpdate: new Date().toISOString().split('T')[0],\n        updatedAt: new Date(),\n      });\n    } else {\n      await storage.createUserStats({\n        userId,\n        totalPrayers,\n        onTimePrayers,\n        qazaPrayers,\n        currentStreak,\n        bestStreak,\n        perfectWeeks,\n        lastStreakUpdate: new Date().toISOString().split('T')[0],\n      });\n    }\n  } catch (error) {\n    console.error('Failed to update user statistics:', error);\n  }\n}\n\n// Helper function to group records by week\nfunction groupRecordsByWeek(records: any[]): Array<{ completionRate: number }> {\n  const weeks: { [key: string]: { completed: number; total: number } } = {};\n  \n  records.forEach(record => {\n    const date = new Date(record.date);\n    const weekStart = new Date(date);\n    weekStart.setDate(date.getDate() - (date.getDay() === 0 ? 6 : date.getDay() - 1));\n    const weekKey = weekStart.toISOString().split('T')[0];\n    \n    if (!weeks[weekKey]) {\n      weeks[weekKey] = { completed: 0, total: 0 };\n    }\n    \n    if (record.prayers) {\n      Object.values(record.prayers).forEach((prayer: any) => {\n        weeks[weekKey].total++;\n        if (prayer.completed) {\n          weeks[weekKey].completed++;\n        }\n      });\n    }\n  });\n  \n  return Object.values(weeks)\n    .filter(week => week.total >= 35) // Only count complete weeks (7 days * 5 prayers)\n    .map(week => ({\n      completionRate: week.total > 0 ? Math.round((week.completed / week.total) * 100) : 0\n    }));\n}\n\n// Create a fake user for demo purposes when not using authentication\nconst demoUser = { userId: \"demo-user\", username: \"Demo User\", email: \"demo@example.com\" };\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  console.log(\"Authentication disabled - using demo user\");\n\n  // Import custom auth functions - COMMENTED OUT\n  // const { register, login, getMe, authenticate } = await import(\"./auth\");\n  // Use devAuth middleware instead\n  const isAuthenticated = devAuth;\n\n  // Custom Authentication Routes - COMMENTED OUT\n  // app.post('/api/auth/register', register);\n  // app.post('/api/auth/login', login);\n  // app.get('/api/auth/me', isAuthenticated, getMe);\n\n  // Auth routes - COMMENTED OUT\n  // app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n  //   try {\n  //     const userId = req.user.userId;\n  //     const user = await storage.getUser(userId);\n  //     res.json(user);\n  //   } catch (error) {\n  //     console.error(\"Error fetching user:\", error);\n  //     res.status(500).json({ message: \"Failed to fetch user\" });\n  //   }\n  // });\n\n  // Get prayer record for a specific date\n  app.get(\"/api/prayers/:date\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Validate date parameter\n      const validatedParams = dateParamSchema.parse(req.params);\n      const { date } = validatedParams;\n      \n      // Add cache control headers to prevent 304 responses\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const record = await storage.getPrayerRecord(userId, date);\n      res.json(record || null);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid date parameter', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // Update prayer record\n  app.post(\"/api/prayers\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n      const validatedData = insertPrayerRecordSchema.parse({ ...req.body, userId });\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const record = await storage.updatePrayerRecord(\n        validatedData.userId!,\n        validatedData.date,\n        validatedData.prayers as any\n      );\n      \n      // Automatically update user statistics after saving prayer record\n      await updateUserStatistics(userId);\n      \n      res.json(record);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid prayer record data', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Validation error';\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Batch update prayer records\n  app.post(\"/api/prayers/batch\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Validate batch update request\n      const validatedData = batchUpdatePrayersSchema.parse(req.body);\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      // Perform batch update\n      const updatedRecords = await storage.batchUpdatePrayerRecords(userId, validatedData.updates);\n      \n      // Automatically update user statistics after batch update\n      await updateUserStatistics(userId);\n      \n      res.json(updatedRecords);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid batch update data', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Validation error';\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Get prayer records for a date range\n  app.get(\"/api/prayers\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Validate query parameters\n      const validatedQuery = dateRangeQuerySchema.parse(req.query);\n      const { startDate, endDate } = validatedQuery;\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const records = await storage.getPrayerRecords(\n        userId,\n        startDate,\n        endDate\n      );\n      \n      res.json(records);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid query parameters', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // Get user achievements\n  app.get(\"/api/achievements\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n\n      const achievements = await storage.getAchievements(userId);\n      res.json(achievements);\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // Create achievement\n  app.post(\"/api/achievements\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n      const validatedData = insertAchievementSchema.parse({ ...req.body, userId });\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const achievement = await storage.createAchievement(validatedData);\n      res.json(achievement);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid achievement data', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Validation error';\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Get user statistics\n  app.get(\"/api/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n      let stats = await storage.getUserStats(userId);\n      \n      if (!stats) {\n        // Create initial stats if they don't exist\n        stats = await storage.createUserStats({ userId });\n      }\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      res.json(stats);\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // Update user statistics\n  app.patch(\"/api/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Validate request body\n      const validatedUpdates = userStatsUpdateSchema.parse(req.body);\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const stats = await storage.updateUserStats(userId, validatedUpdates);\n      res.json(stats);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid user statistics data', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Get yearly Qaza statistics\n  app.get(\"/api/stats/yearly-qaza\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      // Calculate yearly Qaza statistics\n      const today = new Date();\n      const currentYear = today.getFullYear();\n      const startOfYear = new Date(currentYear, 0, 1);\n      \n      // Calculate total days from start of year to today (inclusive)\n      const daysSinceStartOfYear = Math.floor((today.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n      \n      // Total possible prayers for the year so far (5 prayers per day)\n      const totalPossible = daysSinceStartOfYear * 5;\n      \n      // Get year dates up to today\n      const yearDates: string[] = [];\n      for (let d = new Date(startOfYear); d <= today; d.setDate(d.getDate() + 1)) {\n        yearDates.push(d.toISOString().split('T')[0]);\n      }\n      \n      const startDate = yearDates[0];\n      const endDate = yearDates[yearDates.length - 1];\n      \n      const records = await storage.getPrayerRecords(userId, startDate, endDate);\n      \n      let completed = 0;\n      \n      yearDates.forEach(date => {\n        const record = records.find(r => r.date === date);\n        if (record && record.prayers) {\n          Object.values(record.prayers).forEach(prayer => {\n            if (prayer.completed) completed++;\n          });\n        }\n      });\n      \n      const qazaRemaining = Math.max(0, totalPossible - completed);\n      \n      const response = {\n        totalPossible,\n        completed,\n        qazaRemaining,\n        currentYear\n      };\n      \n      res.json(response);\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error('Error calculating yearly Qaza stats:', error);\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15737},"server/storage.ts":{"content":"import {\n  users,\n  prayerRecords,\n  achievements,\n  userStats,\n  type User,\n  type UpsertUser,\n  type PrayerRecord,\n  type InsertPrayerRecord,\n  type Achievement,\n  type InsertAchievement,\n  type UserStats,\n  type InsertUserStats,\n  type DailyPrayers,\n  type BatchUpdatePrayers,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Prayer records\n  getPrayerRecord(userId: string, date: string): Promise<PrayerRecord | undefined>;\n  getPrayerRecords(userId: string, startDate?: string, endDate?: string): Promise<PrayerRecord[]>;\n  createPrayerRecord(record: InsertPrayerRecord): Promise<PrayerRecord>;\n  updatePrayerRecord(userId: string, date: string, prayers: any): Promise<PrayerRecord>;\n  batchUpdatePrayerRecords(userId: string, updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]>;\n\n  // Achievements\n  getAchievements(userId: string): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n\n  // User statistics\n  getUserStats(userId: string): Promise<UserStats | undefined>;\n  createUserStats(stats: InsertUserStats): Promise<UserStats>;\n  updateUserStats(userId: string, updates: Partial<UserStats>): Promise<UserStats>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private prayerRecords: Map<string, PrayerRecord>; // key: userId-date\n  private achievements: Map<string, Achievement>;\n  private userStats: Map<string, UserStats>; // key: userId\n\n  constructor() {\n    this.users = new Map();\n    this.prayerRecords = new Map();\n    this.achievements = new Map();\n    this.userStats = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = this.users.get(userData.id!);\n    if (existingUser) {\n      const updatedUser: User = {\n        ...existingUser,\n        ...userData,\n        updatedAt: new Date(),\n      };\n      this.users.set(userData.id!, updatedUser);\n      return updatedUser;\n    }\n    \n    const user: User = {\n      id: userData.id!,\n      username: userData.username ?? null,\n      email: userData.email ?? null,\n      passwordHash: userData.passwordHash || '', // Required for custom auth\n      firstName: userData.firstName ?? null,\n      lastName: userData.lastName ?? null,\n      profileImageUrl: userData.profileImageUrl ?? null,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    \n    // Initialize user stats\n    const userStatsData: UserStats = {\n      id: randomUUID(),\n      userId: user.id,\n      totalPrayers: 0,\n      onTimePrayers: 0,\n      qazaPrayers: 0,\n      currentStreak: 0,\n      bestStreak: 0,\n      perfectWeeks: 0,\n      lastStreakUpdate: null,\n      updatedAt: new Date(),\n    };\n    this.userStats.set(user.id, userStatsData);\n    \n    return user;\n  }\n\n  async getPrayerRecord(userId: string, date: string): Promise<PrayerRecord | undefined> {\n    return this.prayerRecords.get(`${userId}-${date}`);\n  }\n\n  async getPrayerRecords(userId: string, startDate?: string, endDate?: string): Promise<PrayerRecord[]> {\n    const records = Array.from(this.prayerRecords.values())\n      .filter(record => record.userId === userId);\n    \n    if (startDate && endDate) {\n      return records.filter(record => \n        record.date >= startDate && record.date <= endDate\n      );\n    }\n    \n    return records;\n  }\n\n  async createPrayerRecord(insertRecord: InsertPrayerRecord): Promise<PrayerRecord> {\n    const id = randomUUID();\n    const userId = insertRecord.userId || \"demo-user\"; // Ensure userId is never null\n    const record: PrayerRecord = {\n      id,\n      userId,\n      date: insertRecord.date,\n      prayers: insertRecord.prayers as PrayerRecord[\"prayers\"],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.prayerRecords.set(`${record.userId}-${record.date}`, record);\n    return record;\n  }\n\n  async updatePrayerRecord(userId: string, date: string, prayers: PrayerRecord[\"prayers\"]): Promise<PrayerRecord> {\n    const key = `${userId}-${date}`;\n    const existing = this.prayerRecords.get(key);\n    \n    if (existing) {\n      const updated: PrayerRecord = {\n        ...existing,\n        prayers,\n        updatedAt: new Date(),\n      };\n      this.prayerRecords.set(key, updated);\n      return updated;\n    }\n    \n    // Create new record if it doesn't exist\n    return this.createPrayerRecord({ userId, date, prayers });\n  }\n\n  async batchUpdatePrayerRecords(userId: string, updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]> {\n    const updatedRecords: PrayerRecord[] = [];\n    \n    for (const update of updates) {\n      const record = await this.updatePrayerRecord(userId, update.date, update.prayers as PrayerRecord[\"prayers\"]);\n      updatedRecords.push(record);\n    }\n    \n    return updatedRecords;\n  }\n\n  async getAchievements(userId: string): Promise<Achievement[]> {\n    return Array.from(this.achievements.values())\n      .filter(achievement => achievement.userId === userId)\n      .sort((a, b) => new Date(b.earnedDate).getTime() - new Date(a.earnedDate).getTime());\n  }\n\n  async createAchievement(insertAchievement: InsertAchievement): Promise<Achievement> {\n    const userId = insertAchievement.userId || \"demo-user\"; // Ensure userId is never null\n    \n    // Check for existing achievement with same userId, type, and earnedDate (idempotency)\n    const existingAchievement = Array.from(this.achievements.values()).find(\n      achievement => \n        achievement.userId === userId &&\n        achievement.type === insertAchievement.type &&\n        achievement.earnedDate === insertAchievement.earnedDate\n    );\n    \n    if (existingAchievement) {\n      return existingAchievement; // Return existing achievement instead of creating duplicate\n    }\n    \n    const id = randomUUID();\n    const achievement: Achievement = {\n      id,\n      userId,\n      type: insertAchievement.type,\n      title: insertAchievement.title,\n      description: insertAchievement.description,\n      earnedDate: insertAchievement.earnedDate,\n      metadata: insertAchievement.metadata as Achievement[\"metadata\"] || null,\n      createdAt: new Date(),\n    };\n    \n    this.achievements.set(id, achievement);\n    return achievement;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(user: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> {\n    const userData = {\n      ...user,\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.users.set(userData.id, userData);\n\n    // Initialize user stats\n    const userStatsData: UserStats = {\n      id: randomUUID(),\n      userId: userData.id,\n      totalPrayers: 0,\n      onTimePrayers: 0,\n      qazaPrayers: 0,\n      currentStreak: 0,\n      bestStreak: 0,\n      perfectWeeks: 0,\n      lastStreakUpdate: null,\n      updatedAt: new Date(),\n    };\n    this.userStats.set(userData.id, userStatsData);\n\n    return userData;\n  }\n\n  async getUserStats(userId: string): Promise<UserStats | undefined> {\n    return this.userStats.get(userId);\n  }\n\n  async createUserStats(insertStats: InsertUserStats): Promise<UserStats> {\n    const id = randomUUID();\n    const stats: UserStats = {\n      ...insertStats,\n      id,\n      userId: insertStats.userId || null,\n      totalPrayers: insertStats.totalPrayers || 0,\n      onTimePrayers: insertStats.onTimePrayers || 0,\n      qazaPrayers: insertStats.qazaPrayers || 0,\n      currentStreak: insertStats.currentStreak || 0,\n      bestStreak: insertStats.bestStreak || 0,\n      perfectWeeks: insertStats.perfectWeeks || 0,\n      lastStreakUpdate: insertStats.lastStreakUpdate || null,\n      updatedAt: new Date(),\n    };\n    \n    this.userStats.set(stats.userId!, stats);\n    return stats;\n  }\n\n  async updateUserStats(userId: string, updates: Partial<UserStats>): Promise<UserStats> {\n    const existing = this.userStats.get(userId);\n    if (!existing) {\n      throw new Error(\"User stats not found\");\n    }\n    \n    const updated: UserStats = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    \n    this.userStats.set(userId, updated);\n    return updated;\n  }\n}\n\n// Database storage implementation\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT: these are mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Initialize user stats if it's a new user\n    const existingStats = await this.getUserStats(user.id);\n    if (!existingStats) {\n      await this.createUserStats({ userId: user.id });\n    }\n    \n    return user;\n  }\n\n  // Prayer records\n  async getPrayerRecord(userId: string, date: string): Promise<PrayerRecord | undefined> {\n    const [record] = await db\n      .select()\n      .from(prayerRecords)\n      .where(and(\n        eq(prayerRecords.userId, userId),\n        eq(prayerRecords.date, date)\n      ));\n    return record;\n  }\n\n  async getPrayerRecords(userId: string, startDate?: string, endDate?: string): Promise<PrayerRecord[]> {\n    const conditions = [eq(prayerRecords.userId, userId)];\n    \n    if (startDate && endDate) {\n      conditions.push(\n        gte(prayerRecords.date, startDate),\n        lte(prayerRecords.date, endDate)\n      );\n    }\n    \n    return await db\n      .select()\n      .from(prayerRecords)\n      .where(and(...conditions));\n  }\n\n  async createPrayerRecord(record: InsertPrayerRecord): Promise<PrayerRecord> {\n    const [created] = await db\n      .insert(prayerRecords)\n      .values([record as any])\n      .returning();\n    return created;\n  }\n\n  async updatePrayerRecord(userId: string, date: string, prayers: PrayerRecord[\"prayers\"]): Promise<PrayerRecord> {\n    const existing = await this.getPrayerRecord(userId, date);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(prayerRecords)\n        .set({\n          prayers,\n          updatedAt: new Date(),\n        })\n        .where(eq(prayerRecords.id, existing.id))\n        .returning();\n      return updated;\n    }\n    \n    return this.createPrayerRecord({ \n      userId, \n      date, \n      prayers: prayers as PrayerRecord[\"prayers\"]\n    });\n  }\n\n  async batchUpdatePrayerRecords(userId: string, updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]> {\n    const updatedRecords: PrayerRecord[] = [];\n    \n    // Process updates sequentially to maintain data consistency\n    for (const update of updates) {\n      const record = await this.updatePrayerRecord(userId, update.date, update.prayers as PrayerRecord[\"prayers\"]);\n      updatedRecords.push(record);\n    }\n    \n    return updatedRecords;\n  }\n\n  // Achievements\n  async getAchievements(userId: string): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.userId, userId));\n  }\n\n  async createAchievement(achievement: InsertAchievement): Promise<Achievement> {\n    // Check for existing achievement with same userId, type, and earnedDate (idempotency)\n    const [existingAchievement] = await db\n      .select()\n      .from(achievements)\n      .where(and(\n        eq(achievements.userId, achievement.userId!),\n        eq(achievements.type, achievement.type),\n        eq(achievements.earnedDate, achievement.earnedDate)\n      ));\n    \n    if (existingAchievement) {\n      return existingAchievement; // Return existing achievement instead of creating duplicate\n    }\n    \n    const [created] = await db\n      .insert(achievements)\n      .values([achievement as any])\n      .returning();\n    return created;\n  }\n\n  // User statistics\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(user: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> {\n    const [created] = await db\n      .insert(users)\n      .values(user as any)\n      .returning();\n\n    // Initialize user stats\n    await this.createUserStats({ userId: created.id });\n\n    return created;\n  }\n\n  async getUserStats(userId: string): Promise<UserStats | undefined> {\n    const [stats] = await db\n      .select()\n      .from(userStats)\n      .where(eq(userStats.userId, userId));\n    return stats;\n  }\n\n  async createUserStats(stats: InsertUserStats): Promise<UserStats> {\n    const [created] = await db\n      .insert(userStats)\n      .values([stats])\n      .returning();\n    return created;\n  }\n\n  async updateUserStats(userId: string, updates: Partial<UserStats>): Promise<UserStats> {\n    const [updated] = await db\n      .update(userStats)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(userStats.userId, userId))\n      .returning();\n    \n    if (!updated) {\n      throw new Error(\"User stats not found\");\n    }\n    \n    return updated;\n  }\n}\n\n// Use database storage for persistent data, fallback to memory storage\nexport const storage = db ? new DatabaseStorage() : new MemStorage();\n","size_bytes":14457},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = {\n  info: (msg: string) => console.log(msg),\n  warn: (msg: string) => console.warn(msg),\n  error: (msg: string, options?: any) => console.error(msg, options),\n  clearScreen: () => {},\n  hasErrorLogged: () => false,\n  hasWarned: false,\n  warnOnce: (msg: string) => console.warn(msg),\n};\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg: string, options?: any) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2533},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User storage table with custom authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique(),\n  email: varchar(\"email\").unique(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const prayerRecords = pgTable(\"prayer_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  prayers: jsonb(\"prayers\").$type<{\n    fajr: { completed: boolean; onTime: boolean; completedAt?: string };\n    dhuhr: { completed: boolean; onTime: boolean; completedAt?: string };\n    asr: { completed: boolean; onTime: boolean; completedAt?: string };\n    maghrib: { completed: boolean; onTime: boolean; completedAt?: string };\n    isha: { completed: boolean; onTime: boolean; completedAt?: string };\n  }>().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: text(\"type\").notNull(), // 'perfect_week', 'streak_milestone', etc.\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  earnedDate: text(\"earned_date\").notNull(), // YYYY-MM-DD format\n  metadata: jsonb(\"metadata\").$type<{\n    weekNumber?: number;\n    year?: number;\n    streakDays?: number;\n    totalPrayers?: number;\n    onTimePrayers?: number;\n    qazaPrayers?: number;\n    consistencyRate?: number;\n    period?: string;\n    consecutiveDays?: number;\n    prayerType?: string;\n    perfectWeekends?: number;\n    consecutiveWeekends?: number;\n    comebackDays?: number;\n    perfectMonths?: number;\n    specialMonth?: string;\n    dateRange?: { start: string; end: string };\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userStats = pgTable(\"user_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).unique(),\n  totalPrayers: integer(\"total_prayers\").default(0),\n  onTimePrayers: integer(\"on_time_prayers\").default(0),\n  qazaPrayers: integer(\"qaza_prayers\").default(0),\n  currentStreak: integer(\"current_streak\").default(0),\n  bestStreak: integer(\"best_streak\").default(0),\n  perfectWeeks: integer(\"perfect_weeks\").default(0),\n  lastStreakUpdate: text(\"last_streak_update\"), // YYYY-MM-DD format\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  username: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  passwordHash: true, // Include for when password is provided\n}).partial({\n  passwordHash: true, // Make it optional\n});\n\n// Register schema for user registration (requires password)\nexport const registerUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  isActive: true,\n}).extend({\n  passwordHash: z.string().min(60), // bcrypt hash length\n});\n\n// Login schema for user authentication\nexport const loginUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\n// User without password for responses\nexport const safeUserSchema = createInsertSchema(users).omit({\n  passwordHash: true,\n});\n\nexport const insertPrayerRecordSchema = createInsertSchema(prayerRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserStatsSchema = createInsertSchema(userStats).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertPrayerRecord = z.infer<typeof insertPrayerRecordSchema>;\nexport type PrayerRecord = typeof prayerRecords.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type InsertUserStats = z.infer<typeof insertUserStatsSchema>;\nexport type UserStats = typeof userStats.$inferSelect;\n\n// Additional validation schemas for API routes\nexport const dateParamSchema = z.object({\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\")\n});\n\nexport const dateRangeQuerySchema = z.object({\n  startDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Start date must be in YYYY-MM-DD format\").optional(),\n  endDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"End date must be in YYYY-MM-DD format\").optional()\n}).refine(\n  (data) => {\n    if (data.startDate && data.endDate) {\n      return data.startDate <= data.endDate;\n    }\n    return true;\n  },\n  { message: \"Start date must be before or equal to end date\" }\n);\n\nexport const userStatsUpdateSchema = z.object({\n  totalPrayers: z.number().int().min(0).optional(),\n  onTimePrayers: z.number().int().min(0).optional(),\n  qazaPrayers: z.number().int().min(0).optional(),\n  currentStreak: z.number().int().min(0).optional(),\n  bestStreak: z.number().int().min(0).optional(),\n  perfectWeeks: z.number().int().min(0).optional(),\n  lastStreakUpdate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\").nullable().optional()\n});\n\nexport type PrayerType = 'fajr' | 'dhuhr' | 'asr' | 'maghrib' | 'isha';\nexport type PrayerStatus = {\n  completed: boolean;\n  onTime: boolean;\n  completedAt?: string;\n};\n\nexport type DailyPrayers = {\n  fajr: { completed: boolean; onTime: boolean; completedAt?: string };\n  dhuhr: { completed: boolean; onTime: boolean; completedAt?: string };\n  asr: { completed: boolean; onTime: boolean; completedAt?: string };\n  maghrib: { completed: boolean; onTime: boolean; completedAt?: string };\n  isha: { completed: boolean; onTime: boolean; completedAt?: string };\n};\n\n// Schema for individual prayer status\nconst prayerStatusSchema = z.object({\n  completed: z.boolean(),\n  onTime: z.boolean(),\n  completedAt: z.string().optional(),\n});\n\n// Schema for daily prayers object\nconst dailyPrayersSchema = z.object({\n  fajr: prayerStatusSchema,\n  dhuhr: prayerStatusSchema,\n  asr: prayerStatusSchema,\n  maghrib: prayerStatusSchema,\n  isha: prayerStatusSchema,\n});\n\n// Schema for batch update request\nexport const batchUpdatePrayersSchema = z.object({\n  updates: z.array(z.object({\n    date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\"),\n    prayers: dailyPrayersSchema,\n  })).min(1, \"At least one update is required\").max(7, \"Maximum 7 updates per batch\"),\n});\n\nexport type BatchUpdatePrayers = z.infer<typeof batchUpdatePrayersSchema>;\n","size_bytes":7384},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"next-themes\";\nimport { PrayerProvider } from \"./contexts/prayer-context\";\nimport { Navigation } from \"./components/navigation\";\nimport { ThemeToggle } from \"./components/theme-toggle\";\n// import { AuthContext, type AuthContextType, useAuthQuery } from \"./hooks/useAuth\";\n// import { Button } from \"@/components/ui/button\";\n// import { LogOut, User } from \"lucide-react\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\nimport Dashboard from \"./pages/dashboard\";\nimport Qaza from \"./pages/qaza\";\nimport Achievements from \"./pages/achievements\";\nimport Analytics from \"./pages/analytics\";\n// import Login from \"./pages/login.tsx\";\n// import Landing from \"./pages/landing\";\nimport NotFound from \"@/pages/not-found\";\n\n// AUTHENTICATION REMOVED - All auth-related code commented out\n// function AuthProvider({ children }: { children: React.ReactNode }) {\n//   const auth = useAuthQuery();\n//   \n//   return (\n//     <AuthContext.Provider value={auth}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// function AuthenticatedHeader({ user, logout }: { user: any; logout: () => void }) {\n//   return (\n//     <header className=\"glass-nav px-4 py-3 m-4 rounded-2xl\" data-testid=\"header-authenticated\">\n//       <div className=\"flex items-center justify-between max-w-6xl mx-auto\">\n//         <div className=\"flex items-center gap-3\">\n//           <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n//             <span className=\"text-primary-foreground text-lg\">🕌</span>\n//           </div>\n//           <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-title\">\n//             Namaz Tracker\n//           </h1>\n//         </div>\n//         \n//         <div className=\"flex items-center gap-4\">\n//           <div className=\"flex items-center gap-2 text-sm text-muted-foreground\" data-testid=\"text-user-info\">\n//             <User className=\"w-4 h-4\" />\n//             <span>{user?.firstName || user?.email?.split('@')[0] || 'User'}</span>\n//           </div>\n//           <ThemeToggle />\n//           <Button \n//             variant=\"outline\" \n//             size=\"sm\" \n//             onClick={logout}\n//             className=\"flex items-center gap-2\"\n//             data-testid=\"button-logout\"\n//           >\n//             <LogOut className=\"w-4 h-4\" />\n//             Logout\n//           </Button>\n//         </div>\n//       </div>\n//     </header>\n//   );\n// }\n\nfunction SimpleHeader() {\n  return (\n    <header className=\"glass-nav px-4 py-3 m-4 rounded-2xl\" data-testid=\"header-authenticated\">\n      <div className=\"flex items-center justify-between max-w-6xl mx-auto\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-primary-foreground text-lg\">🕌</span>\n          </div>\n          <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-title\">\n            Namaz Tracker\n          </h1>\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          <ThemeToggle />\n        </div>\n      </div>\n    </header>\n  );\n}\n\nfunction AppRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/qaza\" component={Qaza} />\n      <Route path=\"/achievements\" component={Achievements} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\n// function LoadingScreen() {\n//   return (\n//     <div className=\"min-h-screen flex items-center justify-center\" data-testid=\"loading-auth\">\n//       <div className=\"text-center space-y-4\">\n//         <div className=\"w-16 h-16 mx-auto bg-primary rounded-full flex items-center justify-center animate-pulse\">\n//           <span className=\"text-primary-foreground text-2xl\">🕌</span>\n//         </div>\n//         <Skeleton className=\"h-4 w-48 mx-auto\" />\n//         <Skeleton className=\"h-4 w-32 mx-auto\" />\n//       </div>\n//     </div>\n//   );\n// }\n\n// LANDING PAGE COMMENTED OUT - Direct access to dashboard\n// function AppContent() {\n//   const { user, isLoading, isAuthenticated, logout } = useAuthQuery();\n//\n//   if (isLoading) {\n//     return <LoadingScreen />;\n//   }\n//\n//   if (!isAuthenticated) {\n//     return <Landing />;\n//   }\n//\n//   return (\n//     <PrayerProvider>\n//       <div className=\"min-h-screen\">\n//         <AuthenticatedHeader user={user} logout={logout} />\n//         <main className=\"pb-24 px-4 max-w-6xl mx-auto\">\n//           <AuthenticatedRouter />\n//         </main>\n//         <Navigation />\n//       </div>\n//     </PrayerProvider>\n//   );\n// }\n\nfunction AppContent() {\n  return (\n    <PrayerProvider>\n      <div className=\"min-h-screen\">\n        <SimpleHeader />\n        <main className=\"pb-24 px-4 max-w-6xl mx-auto\">\n          <AppRouter />\n        </main>\n        <Navigation />\n      </div>\n    </PrayerProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem>\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5569},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 96%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%, 0.7);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(158, 70%, 20%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(28, 80%, 45%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 90%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(199, 89%, 48%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(158, 70%, 20%);\n  --chart-1: hsl(158, 70%, 20%);\n  --chart-2: hsl(28, 80%, 45%);\n  --chart-3: hsl(199, 89%, 48%);\n  --chart-4: hsl(0, 84.2%, 60.2%);\n  --chart-5: hsl(262.1, 83.3%, 57.8%);\n  --sidebar: hsl(0, 0%, 100%, 0.7);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(158, 70%, 20%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 90%);\n  --sidebar-accent-foreground: hsl(158, 70%, 20%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(158, 70%, 20%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%, 0.7);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(158, 60%, 30%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(28, 70%, 40%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(199, 80%, 40%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(158, 60%, 30%);\n  --chart-1: hsl(158, 60%, 30%);\n  --chart-2: hsl(28, 70%, 40%);\n  --chart-3: hsl(199, 80%, 40%);\n  --chart-4: hsl(0, 62.8%, 30.6%);\n  --chart-5: hsl(262.1, 83.3%, 57.8%);\n  --sidebar: hsl(222.2, 84%, 4.9%, 0.7);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(158, 60%, 30%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(158, 60%, 30%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(158, 60%, 30%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground min-h-screen;\n    background-image: \n      radial-gradient(circle at 25% 25%, rgba(22, 163, 74, 0.1) 0%, transparent 50%),\n      radial-gradient(circle at 75% 75%, rgba(217, 119, 6, 0.1) 0%, transparent 50%);\n  }\n}\n\n@layer components {\n  .glass-card {\n    @apply backdrop-blur-md border border-white/20;\n    background: var(--card);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  }\n\n  .glass-nav {\n    @apply backdrop-blur-2xl border-2;\n    background: rgba(255, 255, 255, 0);\n    border: 1px solid rgba(255, 255, 255, 0.6);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.15),\n      inset 0 1px 0 rgba(255, 255, 255, 0.8),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.2);\n    backdrop-filter: blur(10px) saturate(180%);\n    -webkit-backdrop-filter: blur(20px) saturate(180%) brightness(1.3);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .glass-nav::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, \n      rgba(255, 255, 255, 0.4) 0%,\n      rgba(255, 255, 255, 0.1) 50%,\n      rgba(255, 255, 255, 0.2) 100%);\n    pointer-events: none;\n    z-index: -1;\n  }\n\n  .dark .glass-nav {\n    background: rgba(15, 23, 42, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.3),\n      inset 0 1px 0 rgba(255, 255, 255, 0.4),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.1);\n  }\n\n  .dark .glass-nav::before {\n    background: linear-gradient(135deg, \n      rgba(255, 255, 255, 0.15) 0%,\n      rgba(255, 255, 255, 0.05) 50%,\n      rgba(255, 255, 255, 0.1) 100%);\n  }\n\n  .glass-toast {\n    @apply backdrop-blur-2xl relative overflow-hidden;\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.6);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.15),\n      inset 0 1px 0 rgba(255, 255, 255, 0.8),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.2);\n    backdrop-filter: blur(10px) saturate(180%);\n    -webkit-backdrop-filter: blur(20px) saturate(180%) brightness(1.3);\n  }\n\n  .glass-toast::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, \n      rgba(255, 255, 255, 0.4) 0%,\n      rgba(255, 255, 255, 0.1) 50%,\n      rgba(255, 255, 255, 0.2) 100%);\n    pointer-events: none;\n    z-index: -1;\n  }\n\n  .dark .glass-toast {\n    background: rgba(15, 23, 42, 0.2);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.3),\n      inset 0 1px 0 rgba(255, 255, 255, 0.4),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.1);\n  }\n\n  .dark .glass-toast::before {\n    background: linear-gradient(135deg, \n      rgba(255, 255, 255, 0.15) 0%,\n      rgba(255, 255, 255, 0.05) 50%,\n      rgba(255, 255, 255, 0.1) 100%);\n  }\n\n  .glass-toast-destructive {\n    @apply backdrop-blur-2xl relative overflow-hidden;\n    background: rgba(239, 68, 68, 0.2);\n    border: 1px solid rgba(239, 68, 68, 0.5);\n    box-shadow: \n      0 8px 32px rgba(239, 68, 68, 0.2),\n      inset 0 1px 0 rgba(255, 255, 255, 0.3),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px) saturate(180%);\n    -webkit-backdrop-filter: blur(20px) saturate(180%) brightness(1.1);\n  }\n\n  .glass-toast-destructive::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, \n      rgba(239, 68, 68, 0.3) 0%,\n      rgba(239, 68, 68, 0.1) 50%,\n      rgba(239, 68, 68, 0.2) 100%);\n    pointer-events: none;\n    z-index: -1;\n  }\n\n  .dark .glass-toast-destructive {\n    background: rgba(127, 29, 29, 0.3);\n    border: 1px solid rgba(239, 68, 68, 0.4);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.4),\n      inset 0 1px 0 rgba(255, 255, 255, 0.2),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.05);\n  }\n\n  .dark .glass-toast-destructive::before {\n    background: linear-gradient(135deg, \n      rgba(239, 68, 68, 0.2) 0%,\n      rgba(239, 68, 68, 0.05) 50%,\n      rgba(239, 68, 68, 0.1) 100%);\n  }\n\n  .prayer-checkbox {\n    @apply appearance-none w-6 h-6 border-2 border-primary rounded-full relative cursor-pointer transition-all duration-300 hover:scale-105;\n  }\n\n  .prayer-checkbox:checked {\n    @apply bg-primary scale-110;\n  }\n\n  .prayer-checkbox:checked::after {\n    content: \"✓\";\n    @apply absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-primary-foreground text-sm font-bold;\n  }\n\n  .progress-ring {\n    @apply -rotate-90;\n  }\n\n  .progress-ring-circle {\n    @apply transition-all ease-in-out;\n    transition-duration: 600ms;\n  }\n}\n\n@layer utilities {\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-pulse-soft {\n    animation: pulse-soft 2s ease-in-out infinite;\n  }\n\n  .animate-slide-up {\n    animation: slide-up 0.3s ease-out;\n  }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes pulse-soft {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.8; }\n}\n\n@keyframes slide-up {\n  from { transform: translateY(20px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n","size_bytes":8126},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/achievement-card.tsx":{"content":"import { Trophy, Star, Medal, Calendar, Flame, Target, CheckCircle, Award, Crown, Zap, Moon, Sun, Shield, RotateCcw, CalendarDays } from 'lucide-react';\nimport { Achievement } from '@shared/schema';\nimport { cn } from '@/lib/utils';\n\n// Helper function to convert background color to text color\nfunction getTextColorFromBg(bgColor: string): string {\n  const colorMap: { [key: string]: string } = {\n    'bg-primary': 'text-primary',\n    'bg-secondary': 'text-secondary',\n    'bg-accent': 'text-accent',\n    'bg-orange-500': 'text-orange-600',\n    'bg-yellow-500': 'text-yellow-600',\n    'bg-green-500': 'text-green-600',\n    'bg-blue-500': 'text-blue-600',\n    'bg-purple-500': 'text-purple-600',\n    'bg-pink-500': 'text-pink-600',\n    'bg-red-500': 'text-red-600',\n    'bg-indigo-500': 'text-indigo-600',\n    'bg-teal-500': 'text-teal-600',\n  };\n  return colorMap[bgColor] || 'text-primary';\n}\n\ninterface AchievementCardProps {\n  achievement: Achievement;\n  index: number;\n}\n\nconst achievementIcons = {\n  perfect_day: CheckCircle,\n  perfect_week: Trophy,\n  perfect_month: Medal,\n  streak_milestone: Flame,\n  prayer_milestone: Target,\n  consistency: Calendar,\n  early_bird: Star,\n  night_owl: Moon,\n  golden_hour: Sun,\n  weekend_warrior: Shield,\n  dedication: Crown,\n  comeback: RotateCcw,\n  monthly_champion: CalendarDays,\n  special: Award,\n  seasonal: Zap,\n};\n\nconst achievementGradients = {\n  perfect_day: 'from-green-400 to-green-600',\n  perfect_week: 'from-blue-400 to-blue-600', \n  perfect_month: 'from-purple-400 to-purple-600',\n  streak_milestone: 'from-orange-400 to-red-500',\n  prayer_milestone: 'from-yellow-400 to-yellow-600',\n  consistency: 'from-teal-400 to-teal-600',\n  early_bird: 'from-pink-400 to-pink-600',\n  night_owl: 'from-slate-400 to-slate-600',\n  golden_hour: 'from-amber-400 to-orange-500',\n  weekend_warrior: 'from-cyan-400 to-cyan-600',\n  dedication: 'from-indigo-400 to-indigo-600',\n  comeback: 'from-lime-400 to-green-500',\n  monthly_champion: 'from-violet-400 to-purple-500',\n  special: 'from-amber-400 to-amber-600',\n  seasonal: 'from-emerald-400 to-emerald-600',\n  default: 'from-primary to-accent'\n};\n\nexport function AchievementCard({ achievement, index }: AchievementCardProps) {\n  const Icon = achievementIcons[achievement.type as keyof typeof achievementIcons] || Trophy;\n  const gradient = achievementGradients[achievement.type as keyof typeof achievementGradients] || achievementGradients.default;\n\n  return (\n    <div \n      className=\"glass-card rounded-2xl p-6 hover:scale-105 transition-transform duration-300 animate-slide-up\"\n      style={{ animationDelay: `${index * 100}ms` }}\n      data-testid={`achievement-card-${index}`}\n    >\n      <div className=\"text-center mb-4\">\n        <div className={cn(\n          \"w-16 h-16 bg-gradient-to-br rounded-full flex items-center justify-center mx-auto mb-3\",\n          gradient\n        )}>\n          <Icon className=\"w-8 h-8 text-white\" />\n        </div>\n        <h4 className=\"font-semibold text-foreground\" data-testid={`achievement-title-${index}`}>\n          {achievement.title}\n        </h4>\n        <p className=\"text-sm text-muted-foreground\" data-testid={`achievement-description-${index}`}>\n          {achievement.description}\n        </p>\n      </div>\n      <div className=\"border-t pt-4 text-sm text-muted-foreground space-y-1\">\n        <p data-testid={`achievement-date-${index}`}>\n          <strong>Date:</strong> {new Date(achievement.earnedDate).toLocaleDateString()}\n        </p>\n        {achievement.metadata?.weekNumber && achievement.metadata?.year && (\n          <p data-testid={`achievement-week-${index}`}>\n            <strong>Week:</strong> {achievement.metadata.weekNumber} of {achievement.metadata.year}\n          </p>\n        )}\n        {achievement.metadata?.streakDays && (\n          <p data-testid={`achievement-streak-${index}`}>\n            <strong>Streak:</strong> {achievement.metadata.streakDays} days\n          </p>\n        )}\n        {achievement.metadata?.totalPrayers && (\n          <p data-testid={`achievement-prayers-${index}`}>\n            <strong>Prayers:</strong> {achievement.metadata.totalPrayers} completed\n          </p>\n        )}\n        {achievement.metadata?.consistencyRate && (\n          <p data-testid={`achievement-consistency-${index}`}>\n            <strong>Rate:</strong> {achievement.metadata.consistencyRate}%\n          </p>\n        )}\n        {achievement.metadata?.onTimePrayers !== undefined && (\n          <p data-testid={`achievement-ontime-${index}`}>\n            <strong>On-time:</strong> {achievement.metadata.onTimePrayers} prayers\n          </p>\n        )}\n        {achievement.metadata?.period && (\n          <p data-testid={`achievement-period-${index}`}>\n            <strong>Period:</strong> {achievement.metadata.period}\n          </p>\n        )}\n        {achievement.metadata?.consecutiveDays && (\n          <p data-testid={`achievement-consecutive-${index}`}>\n            <strong>Consecutive:</strong> {achievement.metadata.consecutiveDays} days\n          </p>\n        )}\n        {achievement.metadata?.prayerType && (\n          <p data-testid={`achievement-prayer-type-${index}`}>\n            <strong>Prayer:</strong> {achievement.metadata.prayerType.charAt(0).toUpperCase() + achievement.metadata.prayerType.slice(1)}\n          </p>\n        )}\n        {achievement.metadata?.perfectWeekends && (\n          <p data-testid={`achievement-weekends-${index}`}>\n            <strong>Perfect Weekends:</strong> {achievement.metadata.perfectWeekends}\n          </p>\n        )}\n        {achievement.metadata?.consecutiveWeekends && (\n          <p data-testid={`achievement-consecutive-weekends-${index}`}>\n            <strong>Consecutive Weekends:</strong> {achievement.metadata.consecutiveWeekends}\n          </p>\n        )}\n        {achievement.metadata?.comebackDays && (\n          <p data-testid={`achievement-comeback-${index}`}>\n            <strong>Comeback:</strong> {achievement.metadata.comebackDays} days\n          </p>\n        )}\n        {achievement.metadata?.perfectMonths && (\n          <p data-testid={`achievement-perfect-months-${index}`}>\n            <strong>Perfect Months:</strong> {achievement.metadata.perfectMonths}\n          </p>\n        )}\n        {achievement.metadata?.specialMonth && (\n          <p data-testid={`achievement-special-month-${index}`}>\n            <strong>Special Month:</strong> {achievement.metadata.specialMonth}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\ninterface MilestoneProgressProps {\n  title: string;\n  description: string;\n  current: number;\n  target: number;\n  icon: React.ComponentType<{ className?: string }>;\n  color: string;\n}\n\nexport function MilestoneProgress({ title, description, current, target, icon: Icon, color }: MilestoneProgressProps) {\n  const percentage = Math.min((current / target) * 100, 100);\n\n  return (\n    <div className=\"flex items-center justify-between\" data-testid={`milestone-${title.toLowerCase().replace(' ', '-')}`}>\n      <div className=\"flex items-center gap-3\">\n        <div className={cn(\"w-10 h-10 rounded-full flex items-center justify-center\", color)}>\n          <Icon className=\"w-5 h-5 text-white\" />\n        </div>\n        <div>\n          <p className=\"font-medium\" data-testid={`milestone-title-${title.toLowerCase().replace(' ', '-')}`}>\n            {title}\n          </p>\n          <p className=\"text-sm text-muted-foreground\" data-testid={`milestone-description-${title.toLowerCase().replace(' ', '-')}`}>\n            {description}\n          </p>\n        </div>\n      </div>\n      <div className=\"text-right\">\n        <p className={cn(\"text-sm font-medium\", getTextColorFromBg(color))} data-testid={`milestone-progress-${title.toLowerCase().replace(' ', '-')}`}>\n          {current}/{target}\n        </p>\n        <div className=\"w-20 h-2 bg-muted rounded-full overflow-hidden\">\n          <div \n            className={cn(\"h-full rounded-full transition-all duration-300\", color)}\n            style={{ width: `${percentage}%` }}\n            data-testid={`milestone-bar-${title.toLowerCase().replace(' ', '-')}`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8142},"client/src/components/analytics-charts.tsx":{"content":"import { useState } from 'react';\nimport { Line, Doughnut, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  BarElement,\n  Filler,\n} from 'chart.js';\nimport { useQuery } from '@tanstack/react-query';\nimport { getTrendDataForPeriod, getAnalyticsDataForPeriod, getPeriodSummary } from '../lib/prayer-utils';\nimport { createAuthAwareQuery } from '../lib/authUtils';\nimport { apiService } from '../lib/api-service';\nimport { cn } from '@/lib/utils';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  BarElement,\n  Filler\n);\n\nexport function AnalyticsCharts() {\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'year'>('week');\n\n  const timePeriods = [\n    { value: 'week', label: 'Week' },\n    { value: 'month', label: 'Month' },\n    { value: 'year', label: 'Year' },\n  ];\n\n  // Fetch trend data for the selected period\n  const { data: trendData, isLoading: trendLoading } = useQuery({\n    queryKey: ['/analytics/trend', selectedPeriod],\n    queryFn: createAuthAwareQuery(() => getTrendDataForPeriod(selectedPeriod)),\n  });\n\n  // Fetch analytics data for the selected period\n  const { data: analyticsData, isLoading: analyticsLoading } = useQuery({\n    queryKey: ['/analytics/data', selectedPeriod],\n    queryFn: createAuthAwareQuery(() => getAnalyticsDataForPeriod(selectedPeriod)),\n  });\n\n  // Fetch summary statistics for the selected period\n  const { data: summaryData, isLoading: summaryLoading } = useQuery({\n    queryKey: ['/analytics/summary', selectedPeriod],\n    queryFn: createAuthAwareQuery(() => getPeriodSummary(selectedPeriod)),\n  });\n\n  // Fetch yearly Qaza statistics (independent of selected period)\n  const { data: yearlyQazaData, isLoading: yearlyQazaLoading } = useQuery({\n    queryKey: ['/api/stats/yearly-qaza'],\n    queryFn: createAuthAwareQuery(() => apiService.getYearlyQazaStats()),\n  });\n\n  // Fetch user statistics for Qaza vs On-time prayer comparison\n  const { data: userStatsData, isLoading: userStatsLoading } = useQuery({\n    queryKey: ['/api/stats'],\n    queryFn: createAuthAwareQuery(() => apiService.getUserStats()),\n  });\n\n  const isLoading = trendLoading || analyticsLoading || summaryLoading || yearlyQazaLoading || userStatsLoading;\n\n  // Main trend chart data\n  const mainChartData = {\n    labels: trendData?.labels || [],\n    datasets: [\n      {\n        label: 'Completed Prayers',\n        data: trendData?.dataPoints || [],\n        borderColor: 'hsl(158, 70%, 20%)',\n        backgroundColor: 'hsla(158, 70%, 20%, 0.1)',\n        fill: true,\n        tension: 0.4,\n      },\n    ],\n  };\n\n  const mainChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 5,\n        grid: {\n          color: 'hsl(214.3, 31.8%, 91.4%)',\n        },\n      },\n      x: {\n        grid: {\n          color: 'hsl(214.3, 31.8%, 91.4%)',\n        },\n      },\n    },\n  };\n\n  // Prayer distribution chart data\n  const distributionData = {\n    labels: ['Fajr', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'],\n    datasets: [\n      {\n        data: analyticsData ? Object.values(analyticsData).map(prayer => \n          prayer.total > 0 ? Math.round((prayer.completed / prayer.total) * 100) : 0\n        ) : [0, 0, 0, 0, 0],\n        backgroundColor: [\n          'hsl(158, 70%, 20%)',\n          'hsl(28, 80%, 45%)',\n          'hsl(199, 89%, 48%)',\n          'hsl(0, 84.2%, 60.2%)',\n          'hsl(158, 60%, 30%)',\n        ],\n      },\n    ],\n  };\n\n  const distributionOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom' as const,\n      },\n    },\n  };\n\n  // Period comparison chart data (reuses trend data for consistency)\n  const comparisonData = {\n    labels: trendData?.labels || [],\n    datasets: [\n      {\n        label: 'Prayers Completed',\n        data: trendData?.dataPoints || [],\n        backgroundColor: 'hsl(158, 70%, 20%)',\n        borderRadius: 8,\n      },\n    ],\n  };\n\n  const comparisonOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 5,\n      },\n    },\n  };\n\n  // Qaza vs On-time prayer performance chart data\n  const qazaPerformanceData = {\n    labels: ['On-time Prayers', 'Qaza Prayers'],\n    datasets: [\n      {\n        data: [\n          userStatsData?.onTimePrayers || 0,\n          userStatsData?.qazaPrayers || 0,\n        ],\n        backgroundColor: [\n          'hsl(158, 70%, 50%)', // Green for on-time prayers\n          'hsl(0, 84.2%, 60.2%)', // Red for Qaza prayers\n        ],\n        borderWidth: 2,\n        borderColor: [\n          'hsl(158, 70%, 40%)',\n          'hsl(0, 84.2%, 50%)',\n        ],\n      },\n    ],\n  };\n\n  const qazaPerformanceOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom' as const,\n        labels: {\n          padding: 20,\n          font: {\n            size: 12,\n          },\n        },\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context: any) {\n            const total = (userStatsData?.onTimePrayers || 0) + (userStatsData?.qazaPrayers || 0);\n            const percentage = total > 0 ? Math.round((context.parsed / total) * 100) : 0;\n            return `${context.label}: ${context.parsed} (${percentage}%)`;\n          },\n        },\n      },\n    },\n  };\n\n  // Statistics from summary data\n  const totalPrayers = summaryData?.totalPrayers || 0;\n  const totalPossible = summaryData?.totalPossible || 0;\n  const successRate = summaryData?.successRate || 0;\n  const totalQaza = summaryData?.qazaPrayers || 0;\n\n  // Dynamic titles based on period\n  const comparisonTitle = selectedPeriod === 'week' \n    ? 'Weekly Comparison' \n    : selectedPeriod === 'month' \n    ? 'Monthly Comparison' \n    : 'Yearly Comparison';\n\n  const trendTitle = `Prayer Completion Trend (${selectedPeriod.charAt(0).toUpperCase() + selectedPeriod.slice(1)})`;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Time Period Selector */}\n        <div className=\"glass-card rounded-2xl p-4\">\n          <div className=\"flex justify-center gap-2\">\n            {timePeriods.map((period) => (\n              <button\n                key={period.value}\n                onClick={() => setSelectedPeriod(period.value as any)}\n                className={cn(\n                  \"px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300\",\n                  selectedPeriod === period.value\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                )}\n                data-testid={`period-${period.value}`}\n              >\n                {period.label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Loading Skeletons */}\n        <div className=\"glass-card rounded-2xl p-6\">\n          <div className=\"h-6 bg-muted rounded mb-4 w-48 animate-pulse\"></div>\n          <div className=\"h-64 bg-muted rounded animate-pulse\"></div>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"h-6 bg-muted rounded mb-4 w-32 animate-pulse\"></div>\n            <div className=\"h-48 bg-muted rounded animate-pulse\"></div>\n          </div>\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"h-6 bg-muted rounded mb-4 w-32 animate-pulse\"></div>\n            <div className=\"h-48 bg-muted rounded animate-pulse\"></div>\n          </div>\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"h-6 bg-muted rounded mb-4 w-32 animate-pulse\"></div>\n            <div className=\"h-48 bg-muted rounded animate-pulse\"></div>\n            <div className=\"mt-4 space-y-2\">\n              <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n              <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n              <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"glass-card rounded-2xl p-6 text-center\">\n              <div className=\"h-8 bg-muted rounded mb-4 mx-auto w-8 animate-pulse\"></div>\n              <div className=\"h-6 bg-muted rounded mb-2 w-24 mx-auto animate-pulse\"></div>\n              <div className=\"h-8 bg-muted rounded mb-2 w-16 mx-auto animate-pulse\"></div>\n              <div className=\"h-4 bg-muted rounded w-32 mx-auto animate-pulse\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Time Period Selector */}\n      <div className=\"glass-card rounded-2xl p-4\">\n        <div className=\"flex justify-center gap-2\">\n          {timePeriods.map((period) => (\n            <button\n              key={period.value}\n              onClick={() => setSelectedPeriod(period.value as any)}\n              className={cn(\n                \"px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300\",\n                selectedPeriod === period.value\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n              )}\n              data-testid={`period-${period.value}`}\n            >\n              {period.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Main Chart */}\n      <div className=\"glass-card rounded-2xl p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-prayer-completion-trend\">\n          {trendTitle}\n        </h3>\n        <div className=\"h-64\">\n          <Line data={mainChartData} options={mainChartOptions} />\n        </div>\n      </div>\n\n      {/* Prayer-specific Charts */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <div className=\"glass-card rounded-2xl p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-prayer-distribution\">\n            Prayer Distribution\n          </h3>\n          <div className=\"h-48\">\n            <Doughnut data={distributionData} options={distributionOptions} />\n          </div>\n        </div>\n        \n        <div className=\"glass-card rounded-2xl p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-weekly-comparison\">\n            {comparisonTitle}\n          </h3>\n          <div className=\"h-48\">\n            <Bar data={comparisonData} options={comparisonOptions} />\n          </div>\n        </div>\n\n        <div className=\"glass-card rounded-2xl p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-qaza-performance\">\n            Prayer Performance\n          </h3>\n          <div className=\"h-48\">\n            <Doughnut data={qazaPerformanceData} options={qazaPerformanceOptions} />\n          </div>\n          <div className=\"mt-4 text-center space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">On-time:</span>\n              <span className=\"font-semibold text-green-600\" data-testid=\"text-ontime-count\">\n                {userStatsData?.onTimePrayers || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Qaza:</span>\n              <span className=\"font-semibold text-red-600\" data-testid=\"text-qaza-count\">\n                {userStatsData?.qazaPrayers || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm font-medium border-t pt-2\">\n              <span className=\"text-muted-foreground\">Total:</span>\n              <span data-testid=\"text-performance-total\">\n                {(userStatsData?.onTimePrayers || 0) + (userStatsData?.qazaPrayers || 0)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Statistics Summary */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"glass-card rounded-2xl p-6 text-center\">\n          <div className=\"text-3xl mb-3\">🤲</div>\n          <h4 className=\"text-lg font-semibold mb-2\" data-testid=\"text-total-prayers-title\">\n            Total Prayers\n          </h4>\n          <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-prayers\">\n            {totalPrayers}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">Since tracking started</p>\n        </div>\n        \n        <div className=\"glass-card rounded-2xl p-6 text-center\">\n          <div className=\"text-3xl mb-3\">📊</div>\n          <h4 className=\"text-lg font-semibold mb-2\" data-testid=\"text-success-rate-title\">\n            Success Rate\n          </h4>\n          <p className=\"text-2xl font-bold text-secondary\" data-testid=\"text-success-rate\">\n            {successRate}%\n          </p>\n          <p className=\"text-sm text-muted-foreground\">Overall completion rate</p>\n        </div>\n        \n        <div className=\"glass-card rounded-2xl p-6 text-center\">\n          <div className=\"text-3xl mb-3\">⏰</div>\n          <h4 className=\"text-lg font-semibold mb-2\" data-testid=\"text-qaza-prayers-title\">\n            Qaza Prayers\n          </h4>\n          <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-total-qaza\">\n            {totalQaza}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">Need to be completed</p>\n        </div>\n        \n        <div className=\"glass-card rounded-2xl p-6 text-center\">\n          <div className=\"text-3xl mb-3\">📅</div>\n          <h4 className=\"text-lg font-semibold mb-2\" data-testid=\"text-yearly-qaza-title\">\n            Remaining Qaza {yearlyQazaData?.currentYear || new Date().getFullYear()}\n          </h4>\n          <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-yearly-qaza-remaining\">\n            {yearlyQazaData?.qazaRemaining || 0}\n          </p>\n          <div className=\"space-y-1 mt-2\">\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-yearly-total-possible\">\n              {yearlyQazaData?.totalPossible || 0} total possible\n            </p>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-yearly-completed\">\n              {yearlyQazaData?.completed || 0} completed\n            </p>\n            <p className=\"text-xs text-muted-foreground\" data-testid=\"text-yearly-completion-percentage\">\n              {yearlyQazaData && yearlyQazaData.totalPossible > 0 \n                ? Math.round((yearlyQazaData.completed / yearlyQazaData.totalPossible) * 100)\n                : 0}% completion rate\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15240},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { Home, Trophy, BarChart3, Calendar } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst navItems = [\n  { path: '/', icon: Home, label: 'Dashboard' },\n  { path: '/qaza', icon: Calendar, label: 'Qaza' },\n  { path: '/achievements', icon: Trophy, label: 'Achievements' },\n  { path: '/analytics', icon: BarChart3, label: 'Analytics' },\n];\n\nexport function Navigation() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"glass-nav fixed bottom-4 left-4 right-4 z-50 rounded-2xl p-2\" data-testid=\"nav-bottom\">\n      <div className=\"flex justify-around max-w-md mx-auto\">\n        {navItems.map((item) => (\n          <Link key={item.path} href={item.path}>\n            <button\n              className={cn(\n                \"flex flex-col items-center gap-1 px-4 py-3 rounded-xl transition-all duration-300 relative\",\n                location === item.path\n                  ? \"bg-primary/20 text-black dark:text-primary-foreground backdrop-blur-md border border-primary/30 shadow-lg shadow-primary/20\"\n                  : \"text-muted-foreground hover:bg-white/10 hover:backdrop-blur-sm hover:border hover:border-white/20 dark:hover:bg-white/5\"\n              )}\n              data-testid={`nav-${item.label.toLowerCase()}`}\n            >\n              <item.icon className=\"w-5 h-5\" />\n              <span className=\"text-xs font-medium\">{item.label}</span>\n            </button>\n          </Link>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1512},"client/src/components/prayer-tracker.tsx":{"content":"import { Bell } from 'lucide-react';\nimport { usePrayer } from '../contexts/prayer-context';\nimport { prayerNames, prayerTimes, prayerIcons } from '../lib/prayer-utils';\nimport { PrayerType } from '@shared/schema';\nimport { cn } from '@/lib/utils';\n\nexport function PrayerTracker() {\n  const { todayPrayers, togglePrayer, isLoading } = usePrayer();\n\n  const handleNotificationClick = (prayer: PrayerType, e: React.MouseEvent) => {\n    e.stopPropagation();\n    console.log('Notification clicked for', prayer);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"glass-card rounded-2xl p-6 mb-6\">\n        <div className=\"animate-pulse space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"flex items-center justify-between p-4 rounded-xl bg-muted/30\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-6 h-6 bg-muted rounded-full\"></div>\n                <div className=\"w-16 h-4 bg-muted rounded\"></div>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-20 h-6 bg-muted rounded\"></div>\n                <div className=\"w-6 h-6 bg-muted rounded-full\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"glass-card rounded-2xl p-6 mb-6\">\n      <h3 className=\"text-lg font-semibold mb-4 text-center\" data-testid=\"text-todays-prayers\">\n        Today's Prayers\n      </h3>\n      <div className=\"space-y-3\">\n        {Object.entries(todayPrayers).map(([prayer, status]) => {\n          const prayerKey = prayer as PrayerType;\n          \n          return (\n            <div\n              key={prayer}\n              className={cn(\n                \"flex items-center justify-between p-4 rounded-xl transition-all duration-300 hover:bg-muted/50\",\n                status.completed ? \"bg-primary/5\" : \"bg-muted/30\"\n              )}\n              data-testid={`prayer-item-${prayer}`}\n            >\n              <div className=\"flex items-center gap-4 flex-1\">\n                <input\n                  type=\"checkbox\"\n                  checked={status.completed}\n                  onChange={() => togglePrayer(prayerKey)}\n                  className=\"prayer-checkbox cursor-pointer\"\n                  data-testid={`checkbox-prayer-${prayer}`}\n                />\n                \n                <div \n                  className=\"flex items-center gap-3 flex-1 cursor-pointer\"\n                  onClick={() => togglePrayer(prayerKey)}\n                >\n                  <span className=\"text-2xl\" data-testid={`emoji-prayer-${prayer}`}>\n                    {prayerIcons[prayerKey]}\n                  </span>\n                  <h4 className=\"font-semibold text-foreground\" data-testid={`text-prayer-name-${prayer}`}>\n                    {prayerNames[prayerKey]}\n                  </h4>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-2xl font-bold text-foreground\" data-testid={`text-prayer-time-${prayer}`}>\n                  {prayerTimes[prayerKey]}\n                </div>\n                \n                <button\n                  onClick={(e) => handleNotificationClick(prayerKey, e)}\n                  className=\"p-2 hover:bg-muted/30 rounded-full transition-colors\"\n                  data-testid={`button-notification-${prayer}`}\n                  aria-label={`Set notification for ${prayerNames[prayerKey]}`}\n                >\n                  <Bell className=\"w-5 h-5 text-muted-foreground\" />\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3736},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from 'next-themes';\nimport { useEffect, useState } from 'react';\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  // Avoid hydration mismatch by only rendering after component mounts\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return (\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"w-10 h-10 rounded-full\"\n        data-testid=\"button-theme-toggle\"\n        disabled\n      >\n        <div className=\"h-5 w-5\" />\n        <span className=\"sr-only\">Toggle theme</span>\n      </Button>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\n      className=\"w-10 h-10 rounded-full hover:scale-110 hover:opacity-80 transition-all duration-300\"\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'dark' ? (\n        <Sun className=\"h-5 w-5\" />\n      ) : (\n        <Moon className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":1216},"client/src/components/weekly-progress.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { usePrayer } from '../contexts/prayer-context';\nimport { \n  getWeeklyData, \n  getTodayCompletedCount, \n  getCalendarWeekData, \n  getCalendarMonthData,\n  getWeekStart,\n  formatDateRange\n} from '../lib/prayer-utils';\nimport { cn } from '@/lib/utils';\n\nexport function WeeklyProgress() {\n  const { todayPrayers, weekProgress, currentStreak, qazaCount } = usePrayer();\n  const weeklyData = getWeeklyData();\n  \n  // Calculate progress ring\n  const circumference = 2 * Math.PI * 54;\n  const offset = circumference - (weekProgress / 100) * circumference;\n\n  const todayCompleted = getTodayCompletedCount(todayPrayers);\n  const completedPrayers = Math.round((weekProgress / 100) * 35);\n\n  return (\n    <section className=\"grid md:grid-cols-2 gap-6 mb-8\">\n      {/* Weekly Progress Circle */}\n      <div className=\"glass-card rounded-2xl p-6\">\n        <h3 className=\"text-lg font-semibold mb-4 text-center\" data-testid=\"text-weekly-progress-title\">\n          This Week's Progress\n        </h3>\n        <div className=\"flex items-center justify-center\">\n          <div className=\"relative w-32 h-32\">\n            <svg className=\"progress-ring w-32 h-32\" viewBox=\"0 0 120 120\">\n              <circle \n                cx=\"60\" \n                cy=\"60\" \n                r=\"54\" \n                stroke=\"var(--muted)\" \n                strokeWidth=\"8\" \n                fill=\"transparent\"\n              />\n              <circle \n                className=\"progress-ring-circle\" \n                cx=\"60\" \n                cy=\"60\" \n                r=\"54\" \n                stroke=\"var(--primary)\" \n                strokeWidth=\"8\" \n                fill=\"transparent\" \n                strokeLinecap=\"round\"\n                strokeDasharray={circumference}\n                strokeDashoffset={offset}\n                data-testid=\"progress-ring-circle\"\n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-week-percentage\">\n                  {weekProgress}%\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Complete</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-4 text-center text-sm text-muted-foreground\">\n          <span data-testid=\"text-completed-prayers\">{completedPrayers}</span> of{' '}\n          <span data-testid=\"text-total-weekly-prayers\">35</span> prayers\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"glass-card rounded-2xl p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-quick-stats-title\">Quick Stats</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Today's Prayers</span>\n            <span className=\"font-semibold text-primary\" data-testid=\"text-today-completed\">\n              {todayCompleted}/5\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Current Streak</span>\n            <span className=\"font-semibold text-secondary\" data-testid=\"text-current-streak\">\n              {currentStreak} days\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Qaza Counter</span>\n            <span className=\"font-semibold text-destructive\" data-testid=\"text-qaza-count\">\n              {qazaCount} prayers\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Weekly Progress</span>\n            <span className=\"font-semibold text-accent\" data-testid=\"text-weekly-progress\">\n              {weekProgress}%\n            </span>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport function WeeklyOverview() {\n  const { todayPrayers } = usePrayer();\n  const [viewType, setViewType] = useState<'week' | 'month'>('week');\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [calendarData, setCalendarData] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadCalendarData();\n  }, [viewType, currentDate, todayPrayers]);\n\n  const loadCalendarData = async () => {\n    setIsLoading(true);\n    try {\n      if (viewType === 'week') {\n        const weekStart = getWeekStart(currentDate);\n        const data = await getCalendarWeekData(weekStart);\n        setCalendarData(data);\n      } else {\n        const data = await getCalendarMonthData(currentDate);\n        setCalendarData(data);\n      }\n    } catch (error) {\n      console.error('Failed to load calendar data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const navigateDate = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentDate);\n    if (viewType === 'week') {\n      newDate.setDate(currentDate.getDate() + (direction === 'next' ? 7 : -7));\n    } else {\n      newDate.setMonth(currentDate.getMonth() + (direction === 'next' ? 1 : -1));\n    }\n    setCurrentDate(newDate);\n  };\n\n  const getProgressColor = (percentage: number) => {\n    if (percentage === 100) return 'text-primary';\n    if (percentage >= 80) return 'text-secondary';\n    if (percentage >= 50) return 'text-accent';\n    if (percentage > 0) return 'text-destructive';\n    return 'text-muted';\n  };\n\n  const dateRange = formatDateRange(viewType, viewType === 'week' ? getWeekStart(currentDate) : currentDate);\n\n  return (\n    <section className=\"glass-card rounded-2xl p-6\">\n      {/* Header with toggle and navigation */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => setViewType('week')}\n            className={cn(\n              \"px-4 py-2 rounded-lg font-medium transition-colors\",\n              viewType === 'week' \n                ? \"bg-primary text-primary-foreground\" \n                : \"bg-muted/30 text-muted-foreground hover:bg-muted/50\"\n            )}\n            data-testid=\"button-view-week\"\n          >\n            Week\n          </button>\n          <button\n            onClick={() => setViewType('month')}\n            className={cn(\n              \"px-4 py-2 rounded-lg font-medium transition-colors\",\n              viewType === 'month' \n                ? \"bg-primary text-primary-foreground\" \n                : \"bg-muted/30 text-muted-foreground hover:bg-muted/50\"\n            )}\n            data-testid=\"button-view-month\"\n          >\n            Month\n          </button>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => navigateDate('prev')}\n            className=\"p-2 hover:bg-muted/20 rounded-full transition-colors\"\n            data-testid=\"button-calendar-prev\"\n            aria-label=\"Previous period\"\n          >\n            <ChevronLeft className=\"w-5 h-5\" />\n          </button>\n          <button\n            onClick={() => navigateDate('next')}\n            className=\"p-2 hover:bg-muted/20 rounded-full transition-colors\"\n            data-testid=\"button-calendar-next\"\n            aria-label=\"Next period\"\n          >\n            <ChevronRight className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Calendar View */}\n      {isLoading ? (\n        <div className=\"animate-pulse\">\n          <div className=\"grid grid-cols-7 gap-2\">\n            {[...Array(viewType === 'week' ? 7 : 35)].map((_, i) => (\n              <div key={i} className=\"h-20 bg-muted/30 rounded-lg\" />\n            ))}\n          </div>\n        </div>\n      ) : viewType === 'week' ? (\n        <div className=\"grid grid-cols-7 gap-3\" data-testid=\"calendar-week-view\">\n          {calendarData.map((day: any, index: number) => (\n            <div \n              key={day.date} \n              className=\"text-center\"\n              data-testid={`calendar-day-${index}`}\n            >\n              <div className=\"text-xs font-medium text-muted-foreground mb-2\" data-testid={`text-day-name-${index}`}>\n                {day.dayName}\n              </div>\n              <div className={cn(\n                \"w-full p-3 rounded-lg flex flex-col items-center justify-center gap-2\",\n                day.isToday ? \"bg-primary/10 border-2 border-primary\" : \"bg-muted/30\"\n              )}>\n                <div className=\"text-lg font-bold text-foreground\" data-testid={`text-day-number-${index}`}>\n                  {day.dayNumber}\n                </div>\n                \n                {/* Circular progress indicator */}\n                <div className=\"relative w-12 h-12\">\n                  <svg className=\"w-12 h-12 -rotate-90\" viewBox=\"0 0 40 40\">\n                    <circle \n                      cx=\"20\" \n                      cy=\"20\" \n                      r=\"16\" \n                      stroke=\"currentColor\" \n                      strokeWidth=\"4\" \n                      fill=\"transparent\"\n                      className=\"text-muted/30\"\n                    />\n                    <circle \n                      cx=\"20\" \n                      cy=\"20\" \n                      r=\"16\" \n                      stroke=\"currentColor\" \n                      strokeWidth=\"4\" \n                      fill=\"transparent\" \n                      strokeLinecap=\"round\"\n                      strokeDasharray={`${2 * Math.PI * 16}`}\n                      strokeDashoffset={`${2 * Math.PI * 16 * (1 - day.completionPercentage / 100)}`}\n                      className={cn(\n                        \"transition-all\",\n                        getProgressColor(day.completionPercentage)\n                      )}\n                      data-testid={`progress-circle-${index}`}\n                    />\n                  </svg>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"text-xs font-semibold text-foreground\" data-testid={`text-percentage-${index}`}>\n                      {day.completionPercentage}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div data-testid=\"calendar-month-view\">\n          {/* Month view header */}\n          <div className=\"grid grid-cols-7 gap-2 mb-2\">\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div key={day} className=\"text-center text-xs font-medium text-muted-foreground py-2\">\n                {day}\n              </div>\n            ))}\n          </div>\n\n          {/* Month calendar grid */}\n          <div className=\"grid grid-cols-7 gap-2\">\n            {calendarData.map((day: any, index: number) => (\n              <div \n                key={day.date}\n                className={cn(\n                  \"aspect-square p-2 rounded-lg flex flex-col items-center justify-center gap-1\",\n                  day.isToday && \"bg-primary/10 border-2 border-primary\",\n                  !day.isToday && day.isCurrentMonth && \"bg-muted/30\",\n                  !day.isCurrentMonth && \"bg-transparent opacity-40\"\n                )}\n                data-testid={`calendar-month-day-${index}`}\n              >\n                <div className={cn(\n                  \"text-sm font-medium\",\n                  day.isToday ? \"text-primary font-bold\" : \"text-foreground\"\n                )} data-testid={`text-month-day-${index}`}>\n                  {day.dayNumber}\n                </div>\n                \n                {/* Circular progress indicator */}\n                <div className=\"relative w-8 h-8\">\n                  <svg className=\"w-8 h-8 -rotate-90\" viewBox=\"0 0 32 32\">\n                    <circle \n                      cx=\"16\" \n                      cy=\"16\" \n                      r=\"12\" \n                      stroke=\"currentColor\" \n                      strokeWidth=\"3\" \n                      fill=\"transparent\"\n                      className=\"text-muted/30\"\n                    />\n                    <circle \n                      cx=\"16\" \n                      cy=\"16\" \n                      r=\"12\" \n                      stroke=\"currentColor\" \n                      strokeWidth=\"3\" \n                      fill=\"transparent\" \n                      strokeLinecap=\"round\"\n                      strokeDasharray={`${2 * Math.PI * 12}`}\n                      strokeDashoffset={`${2 * Math.PI * 12 * (1 - day.completionPercentage / 100)}`}\n                      className={cn(\n                        \"transition-all\",\n                        getProgressColor(day.completionPercentage)\n                      )}\n                    />\n                  </svg>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"text-[0.6rem] font-semibold text-foreground\">\n                      {day.completionPercentage > 0 ? day.completionPercentage : ''}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Date Range Footer */}\n      <div className=\"mt-6 text-center text-sm text-muted-foreground\" data-testid=\"text-date-range\">\n        {dateRange}\n      </div>\n    </section>\n  );\n}\n","size_bytes":13568},"client/src/contexts/prayer-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { PrayerType, PrayerStatus } from '@shared/schema';\nimport { calculateWeekProgress, calculateWeekProgressFromAPI, getTodayString, checkAchievements, getTodayCompletedCount, getWeekDates, calculateCurrentStreakFromAPI, calculateQazaCountFromAPI, calculateRealTimeStatistics, updateUserStatisticsInBackend } from '@/lib/prayer-utils';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiService, convertPrayerRecordToDailyPrayers } from '@/lib/api-service';\n\nexport interface DailyPrayers {\n  fajr: PrayerStatus;\n  dhuhr: PrayerStatus;\n  asr: PrayerStatus;\n  maghrib: PrayerStatus;\n  isha: PrayerStatus;\n}\n\nexport interface PrayerContextType {\n  todayPrayers: DailyPrayers;\n  weekProgress: number;\n  currentStreak: number;\n  qazaCount: number;\n  togglePrayer: (prayer: PrayerType) => void;\n  isLoading: boolean;\n  refreshStatistics: () => Promise<void>;\n}\n\nconst PrayerContext = createContext<PrayerContextType | undefined>(undefined);\n\nconst defaultPrayers: DailyPrayers = {\n  fajr: { completed: false, onTime: false },\n  dhuhr: { completed: false, onTime: false },\n  asr: { completed: false, onTime: false },\n  maghrib: { completed: false, onTime: false },\n  isha: { completed: false, onTime: false },\n};\n\nexport function PrayerProvider({ children }: { children: React.ReactNode }) {\n  const [todayPrayers, setTodayPrayers] = useState<DailyPrayers>(defaultPrayers);\n  const [weekProgress, setWeekProgress] = useState(0);\n  const [currentStreak, setCurrentStreak] = useState(0);\n  const [qazaCount, setQazaCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Load today's prayers from localStorage on mount\n  useEffect(() => {\n    loadTodayPrayers();\n    loadUserStats();\n  }, []);\n\n  const loadTodayPrayers = async () => {\n    try {\n      const today = getTodayString();\n      \n      // Try to load from API first\n      const apiRecord = await apiService.getPrayerRecord(today);\n      if (apiRecord) {\n        const apiPrayers = convertPrayerRecordToDailyPrayers(apiRecord);\n        if (apiPrayers) {\n          setTodayPrayers(apiPrayers);\n          // Also save to localStorage for fallback\n          localStorage.setItem(`prayers-${today}`, JSON.stringify(apiPrayers));\n          const progress = calculateWeekProgress();\n          setWeekProgress(progress);\n          setIsLoading(false);\n          return;\n        }\n      }\n      \n      // Fallback to localStorage if API fails or returns null\n      const stored = localStorage.getItem(`prayers-${today}`);\n      if (stored) {\n        const prayers = JSON.parse(stored);\n        setTodayPrayers(prayers);\n        // Try to sync to backend if we have localStorage data but no API data\n        try {\n          await apiService.savePrayerRecord(today, prayers);\n        } catch (error) {\n          console.warn('Failed to sync localStorage data to API:', error);\n        }\n      }\n      \n      // Calculate week progress\n      const progress = calculateWeekProgress();\n      setWeekProgress(progress);\n      setIsLoading(false);\n    } catch (error) {\n      console.error('Failed to load prayers:', error);\n      setIsLoading(false);\n    }\n  };\n\n  const loadUserStats = async () => {\n    try {\n      // Try to load from API first\n      const apiStats = await apiService.getUserStats();\n      if (apiStats) {\n        setCurrentStreak(apiStats.currentStreak || 0);\n        setQazaCount(apiStats.qazaPrayers || 0);\n        // Save to localStorage for fallback\n        localStorage.setItem('currentStreak', (apiStats.currentStreak || 0).toString());\n        localStorage.setItem('qazaCount', (apiStats.qazaPrayers || 0).toString());\n        return;\n      }\n      \n      // If no API stats, calculate from scratch\n      try {\n        const calculatedStreak = await calculateCurrentStreakFromAPI();\n        const calculatedQaza = await calculateQazaCountFromAPI();\n        \n        setCurrentStreak(calculatedStreak);\n        setQazaCount(calculatedQaza);\n        \n        // Save calculated values to localStorage\n        localStorage.setItem('currentStreak', calculatedStreak.toString());\n        localStorage.setItem('qazaCount', calculatedQaza.toString());\n        \n        // Update backend with calculated values\n        await updateUserStatisticsInBackend({ fajr: { completed: false, onTime: false }, dhuhr: { completed: false, onTime: false }, asr: { completed: false, onTime: false }, maghrib: { completed: false, onTime: false }, isha: { completed: false, onTime: false } });\n      } catch (error) {\n        console.warn('Failed to calculate statistics from API, falling back to localStorage:', error);\n        \n        // Final fallback to localStorage\n        const streak = localStorage.getItem('currentStreak');\n        const qaza = localStorage.getItem('qazaCount');\n        \n        setCurrentStreak(streak ? parseInt(streak) : 0);\n        setQazaCount(qaza ? parseInt(qaza) : 0);\n      }\n    } catch (error) {\n      console.error('Failed to load user stats:', error);\n      // Fallback to localStorage on error\n      const streak = localStorage.getItem('currentStreak');\n      const qaza = localStorage.getItem('qazaCount');\n      \n      setCurrentStreak(streak ? parseInt(streak) : 0);\n      setQazaCount(qaza ? parseInt(qaza) : 0);\n    }\n  };\n\n  const saveTodayPrayers = async (prayers: DailyPrayers) => {\n    try {\n      const today = getTodayString();\n      \n      // Calculate real-time statistics for immediate UI updates\n      const currentStats = { currentStreak, qazaCount };\n      const realTimeStats = calculateRealTimeStatistics(prayers, currentStats);\n      \n      // Update UI immediately with calculated values\n      setCurrentStreak(realTimeStats.currentStreak);\n      setQazaCount(realTimeStats.qazaCount);\n      \n      // Save to localStorage immediately for fast UI updates\n      localStorage.setItem(`prayers-${today}`, JSON.stringify(prayers));\n      \n      // Try to save to API\n      try {\n        await apiService.savePrayerRecord(today, prayers);\n      } catch (error) {\n        console.warn('Failed to save prayers to API, saved to localStorage only:', error);\n      }\n      \n      // Update week progress using backend data for better consistency\n      let progress: number;\n      try {\n        progress = await calculateWeekProgressFromAPI();\n        setWeekProgress(progress);\n      } catch (error) {\n        console.warn('Failed to get week progress from API, falling back to localStorage:', error);\n        progress = calculateWeekProgress();\n        setWeekProgress(progress);\n      }\n      \n      // Fetch updated statistics from backend for accuracy (server handles stats update in POST /api/prayers)\n      try {\n        const updatedStats = await apiService.getUserStats();\n        if (updatedStats) {\n          setCurrentStreak(updatedStats.currentStreak || 0);\n          setQazaCount(updatedStats.qazaPrayers || 0);\n          \n          // Update localStorage cache\n          localStorage.setItem('currentStreak', (updatedStats.currentStreak || 0).toString());\n          localStorage.setItem('qazaCount', (updatedStats.qazaPrayers || 0).toString());\n        }\n      } catch (error) {\n        console.warn('Failed to fetch updated statistics:', error);\n      }\n      \n      // Invalidate React Query cache for real-time sync with analytics and other components\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats/yearly-qaza'] });\n      \n      // Invalidate analytics queries for all periods to ensure real-time sync\n      ['week', 'month', 'year'].forEach(period => {\n        queryClient.invalidateQueries({ queryKey: ['/analytics/trend', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/data', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/summary', period] });\n      });\n      \n      // Check for achievements (prevent duplicates using localStorage)\n      const completedCount = getTodayCompletedCount(prayers);\n      \n      try {\n        // Load user stats for achievement calculations\n        const userStats = await apiService.getUserStats();\n        const achievements = await checkAchievements(prayers, progress, realTimeStats.currentStreak, userStats);\n        \n        achievements.forEach(async (achievement: { type: string; title: string; description: string; metadata?: any }) => {\n        // Use different dedup keys: per day for Perfect Day, per week for Perfect Week\n        let achievementKey: string;\n        let shouldShow = false;\n        \n        if (achievement.type === \"perfect_day\" && completedCount === 5) {\n          achievementKey = `${achievement.title}-${today}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else if (achievement.type === \"perfect_week\") {\n          // Use week start date for Perfect Week deduplication\n          const weekDates = getWeekDates();\n          const weekStart = weekDates[0]; // Monday of current week\n          achievementKey = `${achievement.title}-${weekStart}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else if (achievement.type === \"streak_milestone\") {\n          // For streak milestones, use streak days for deduplication\n          achievementKey = `${achievement.type}-${achievement.metadata?.streakDays}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else if (achievement.type === \"prayer_milestone\") {\n          // For prayer milestones, use total prayer count for deduplication\n          achievementKey = `${achievement.type}-${achievement.metadata?.totalPrayers}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else if (achievement.type === \"consistency\") {\n          // For consistency achievements, use period and date\n          achievementKey = `${achievement.type}-${achievement.metadata?.period}-${achievement.metadata?.earnedDate}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else {\n          // Generic deduplication for other types\n          achievementKey = `${achievement.type}-${today}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        }\n        \n        if (shouldShow && achievementKey!) {\n          localStorage.setItem(achievementKey, 'true');\n          \n          // Try to save achievement to API\n          try {\n            await apiService.createAchievement({\n              type: achievement.type,\n              title: achievement.title,\n              description: achievement.description,\n              earnedDate: today,\n              metadata: achievement.metadata || {\n                onTimePrayers: completedCount,\n                year: new Date().getFullYear(),\n              },\n            });\n          } catch (error) {\n            console.warn('Failed to save achievement to API:', error);\n          }\n          \n          toast({\n            title: \"Achievement Unlocked! 🏆\",\n            description: achievement.description,\n            duration: 5000,\n          });\n        }\n      });\n      } catch (error) {\n        console.error('Failed to check achievements:', error);\n      }\n    } catch (error) {\n      console.error('Failed to save prayers:', error);\n    }\n  };\n\n  const togglePrayer = (prayer: PrayerType) => {\n    const currentTime = new Date().toISOString();\n    const wasCompleted = todayPrayers[prayer].completed;\n    const newPrayers = {\n      ...todayPrayers,\n      [prayer]: {\n        completed: !wasCompleted,\n        onTime: !wasCompleted, // Assume on-time if completed now\n        completedAt: !wasCompleted ? currentTime : undefined,\n      }\n    };\n    \n    setTodayPrayers(newPrayers);\n    \n    // Calculate immediate statistics impact\n    const currentStats = { currentStreak, qazaCount };\n    const realTimeStats = calculateRealTimeStatistics(newPrayers, currentStats);\n    \n    // Update statistics immediately for responsive UI\n    setCurrentStreak(realTimeStats.currentStreak);\n    setQazaCount(realTimeStats.qazaCount);\n    \n    // Save prayers and update comprehensive statistics\n    saveTodayPrayers(newPrayers);\n    \n    // Show appropriate toast\n    if (newPrayers[prayer].completed) {\n      toast({\n        title: \"Prayer Completed! ✅\",\n        description: `${prayer.charAt(0).toUpperCase() + prayer.slice(1)} prayer marked as completed`,\n        duration: 2000,\n      });\n    } else {\n      toast({\n        title: \"Prayer Unmarked ❌\",\n        description: `${prayer.charAt(0).toUpperCase() + prayer.slice(1)} prayer unmarked`,\n        duration: 2000,\n      });\n    }\n  };\n\n  // Function to refresh statistics from backend\n  const refreshStatistics = async () => {\n    try {\n      // Invalidate React Query cache to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats/yearly-qaza'] });\n      \n      // Invalidate analytics queries for all periods\n      ['week', 'month', 'year'].forEach(period => {\n        queryClient.invalidateQueries({ queryKey: ['/analytics/trend', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/data', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/summary', period] });\n      });\n      \n      // Refresh user statistics from API\n      const apiStats = await apiService.getUserStats();\n      if (apiStats) {\n        setCurrentStreak(apiStats.currentStreak || 0);\n        setQazaCount(apiStats.qazaPrayers || 0);\n        \n        // Update localStorage cache\n        localStorage.setItem('currentStreak', (apiStats.currentStreak || 0).toString());\n        localStorage.setItem('qazaCount', (apiStats.qazaPrayers || 0).toString());\n      }\n      \n      // Refresh week progress\n      const progress = await calculateWeekProgressFromAPI();\n      setWeekProgress(progress);\n    } catch (error) {\n      console.error('Failed to refresh statistics:', error);\n    }\n  };\n\n  return (\n    <PrayerContext.Provider\n      value={{\n        todayPrayers,\n        weekProgress,\n        currentStreak,\n        qazaCount,\n        togglePrayer,\n        isLoading,\n        refreshStatistics,\n      }}\n    >\n      {children}\n    </PrayerContext.Provider>\n  );\n}\n\nexport function usePrayer() {\n  const context = useContext(PrayerContext);\n  if (context === undefined) {\n    throw new Error('usePrayer must be used within a PrayerProvider');\n  }\n  return context;\n}\n","size_bytes":14736},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api-service.ts":{"content":"import { apiRequest } from './queryClient';\nimport { PrayerRecord, Achievement, UserStats } from '@shared/schema';\nimport { DailyPrayers } from '../contexts/prayer-context';\nimport { handleAuthError } from './authUtils';\n\nexport interface PrayerApiService {\n  // Prayer records\n  getPrayerRecord(date: string): Promise<PrayerRecord | null>;\n  savePrayerRecord(date: string, prayers: DailyPrayers): Promise<PrayerRecord>;\n  getPrayerRecords(startDate?: string, endDate?: string): Promise<PrayerRecord[]>;\n  batchUpdatePrayerRecords(updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]>;\n\n  // User statistics  \n  getUserStats(): Promise<UserStats>;\n  updateUserStats(updates: Partial<UserStats>): Promise<UserStats>;\n  getYearlyQazaStats(): Promise<{ totalPossible: number; completed: number; qazaRemaining: number; currentYear: number }>;\n\n  // Achievements\n  getAchievements(): Promise<Achievement[]>;\n  createAchievement(achievement: Omit<Achievement, 'id' | 'userId' | 'createdAt'>): Promise<Achievement>;\n}\n\n// Helper function to safely parse JSON from response\nfunction safeJsonParse(response: Response): Promise<any> {\n  // Check if response has content before parsing JSON\n  const contentLength = response.headers.get('content-length');\n  if (contentLength === '0' || response.status === 304 || response.status === 204) {\n    return Promise.resolve(null);\n  }\n  return response.json();\n}\n\nclass ApiService implements PrayerApiService {\n  async getPrayerRecord(date: string): Promise<PrayerRecord | null> {\n    try {\n      const response = await fetch(`/api/prayers/${date}`, {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (response.status === 404) {\n        return null;\n      }\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch prayer record: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      return await safeJsonParse(response);\n    } catch (error: any) {\n      console.error('Error fetching prayer record:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      return null;\n    }\n  }\n\n  async savePrayerRecord(date: string, prayers: DailyPrayers): Promise<PrayerRecord> {\n    const response = await apiRequest('POST', '/api/prayers', {\n      date,\n      prayers,\n    });\n    \n    return await safeJsonParse(response);\n  }\n\n  async getPrayerRecords(startDate?: string, endDate?: string): Promise<PrayerRecord[]> {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      \n      const url = `/api/prayers${params.toString() ? '?' + params.toString() : ''}`;\n      const response = await fetch(url, {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch prayer records: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      const result = await safeJsonParse(response);\n      return result || [];\n    } catch (error: any) {\n      console.error('Error fetching prayer records:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      return [];\n    }\n  }\n\n  async batchUpdatePrayerRecords(updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]> {\n    try {\n      const response = await apiRequest('POST', '/api/prayers/batch', { updates });\n      return await safeJsonParse(response);\n    } catch (error: any) {\n      console.error('Error in batch update prayer records:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      throw error; // Re-throw for caller to handle\n    }\n  }\n\n  async getUserStats(): Promise<UserStats> {\n    try {\n      const response = await fetch('/api/stats', {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch user stats: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      const result = await safeJsonParse(response);\n      return result || {\n        id: 'default',\n        userId: 'demo-user',\n        totalPrayers: 0,\n        onTimePrayers: 0,\n        qazaPrayers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        perfectWeeks: 0,\n        lastStreakUpdate: null,\n        updatedAt: new Date(),\n      };\n    } catch (error: any) {\n      console.error('Error fetching user stats:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      // Return default stats if API fails\n      return {\n        id: 'default',\n        userId: 'demo-user',\n        totalPrayers: 0,\n        onTimePrayers: 0,\n        qazaPrayers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        perfectWeeks: 0,\n        lastStreakUpdate: null,\n        updatedAt: new Date(),\n      };\n    }\n  }\n\n  async updateUserStats(updates: Partial<UserStats>): Promise<UserStats> {\n    const response = await apiRequest('PATCH', '/api/stats', updates);\n    return await safeJsonParse(response);\n  }\n\n  async getYearlyQazaStats(): Promise<{ totalPossible: number; completed: number; qazaRemaining: number; currentYear: number }> {\n    try {\n      const response = await fetch('/api/stats/yearly-qaza', {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch yearly Qaza stats: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      const result = await safeJsonParse(response);\n      return result || {\n        totalPossible: 0,\n        completed: 0,\n        qazaRemaining: 0,\n        currentYear: new Date().getFullYear()\n      };\n    } catch (error: any) {\n      console.error('Error fetching yearly Qaza stats:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      // Return default stats if API fails\n      return {\n        totalPossible: 0,\n        completed: 0,\n        qazaRemaining: 0,\n        currentYear: new Date().getFullYear()\n      };\n    }\n  }\n\n  async getAchievements(): Promise<Achievement[]> {\n    try {\n      const response = await fetch('/api/achievements', {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch achievements: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      const result = await safeJsonParse(response);\n      return result || [];\n    } catch (error: any) {\n      console.error('Error fetching achievements:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      return [];\n    }\n  }\n\n  async createAchievement(achievement: Omit<Achievement, 'id' | 'userId' | 'createdAt'>): Promise<Achievement> {\n    const response = await apiRequest('POST', '/api/achievements', achievement);\n    return await safeJsonParse(response);\n  }\n}\n\nexport const apiService = new ApiService();\n\n// Helper function to convert backend PrayerRecord to DailyPrayers format\nexport function convertPrayerRecordToDailyPrayers(record: PrayerRecord | null): DailyPrayers | null {\n  if (!record || !record.prayers) {\n    return null;\n  }\n\n  return {\n    fajr: record.prayers.fajr,\n    dhuhr: record.prayers.dhuhr,\n    asr: record.prayers.asr,\n    maghrib: record.prayers.maghrib,\n    isha: record.prayers.isha,\n  };\n}\n\n// Helper function to convert DailyPrayers to PrayerRecord prayers format\nexport function convertDailyPrayersToPrayerRecord(prayers: DailyPrayers): PrayerRecord['prayers'] {\n  return {\n    fajr: prayers.fajr,\n    dhuhr: prayers.dhuhr,\n    asr: prayers.asr,\n    maghrib: prayers.maghrib,\n    isha: prayers.isha,\n  };\n}","size_bytes":8540},"client/src/lib/prayer-utils.ts":{"content":"import { DailyPrayers } from '../contexts/prayer-context';\nimport { apiService, convertPrayerRecordToDailyPrayers } from './api-service';\n\nexport const prayerNames = {\n  fajr: 'Fajr',\n  dhuhr: 'Dhuhr',\n  asr: 'Asr',\n  maghrib: 'Maghrib',\n  isha: 'Isha',\n};\n\nexport const prayerTimes = {\n  fajr: '5:30 AM',\n  dhuhr: '12:45 PM',\n  asr: '4:15 PM',\n  maghrib: '7:20 PM',\n  isha: '8:45 PM',\n};\n\nexport const prayerIcons = {\n  fajr: '🌅',\n  dhuhr: '☀️',\n  asr: '🌤️',\n  maghrib: '🌅',\n  isha: '⭐',\n};\n\nexport function getTodayString(): string {\n  return new Date().toISOString().split('T')[0];\n}\n\n// Weekly utilities for the weekly checkbox feature\n\n/**\n * Get the start of week (Monday) for a given date\n */\nexport function getWeekStart(date: Date): Date {\n  const d = new Date(date);\n  const day = d.getDay();\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday\n  return new Date(d.setDate(diff));\n}\n\n/**\n * Get the end of week (Sunday) for a given date\n */\nexport function getWeekEnd(date: Date): Date {\n  const weekStart = getWeekStart(date);\n  const weekEnd = new Date(weekStart);\n  weekEnd.setDate(weekStart.getDate() + 6);\n  return weekEnd;\n}\n\n/**\n * Get all dates in a week (Monday to Sunday) as string array\n */\nexport function getWeekDatesArray(date: Date): string[] {\n  const weekStart = getWeekStart(date);\n  const dates: string[] = [];\n  \n  for (let i = 0; i < 7; i++) {\n    const currentDate = new Date(weekStart);\n    currentDate.setDate(weekStart.getDate() + i);\n    dates.push(currentDate.toISOString().split('T')[0]);\n  }\n  \n  return dates;\n}\n\n/**\n * Generate past weeks for selection (only past weeks, not future)\n * Returns an array of week objects with start/end dates and date arrays\n */\nexport function getPastWeeks(numberOfWeeks: number = 12): Array<{\n  startDate: string;\n  endDate: string;\n  dates: string[];\n  weekLabel: string;\n}> {\n  const today = new Date();\n  const weeks: Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    weekLabel: string;\n  }> = [];\n  \n  // Start from current week and go back\n  for (let i = 0; i < numberOfWeeks; i++) {\n    const weekDate = new Date(today);\n    weekDate.setDate(today.getDate() - (i * 7));\n    \n    const weekStart = getWeekStart(weekDate);\n    const weekEnd = getWeekEnd(weekDate);\n    \n    // Only include weeks that are in the past or current\n    if (weekEnd <= today) {\n      const dates = getWeekDatesArray(weekDate);\n      const weekLabel = formatWeekLabel(weekStart, weekEnd);\n      \n      weeks.push({\n        startDate: weekStart.toISOString().split('T')[0],\n        endDate: weekEnd.toISOString().split('T')[0],\n        dates,\n        weekLabel,\n      });\n    }\n  }\n  \n  return weeks; // Return in descending order (most recent first)\n}\n\n/**\n * Generate weeks from January 1st up to current week (excluding future weeks)\n * Returns an array of week objects with start/end dates and date arrays\n */\nexport function getWeeksFromJanuary(): Array<{\n  startDate: string;\n  endDate: string;\n  dates: string[];\n  weekLabel: string;\n}> {\n  const today = new Date();\n  const currentYear = today.getFullYear();\n  const januaryFirst = new Date(currentYear, 0, 1); // January 1st of current year\n  \n  const weeks: Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    weekLabel: string;\n  }> = [];\n  \n  // Start from the first week of January and go forward\n  let currentWeekStart = getWeekStart(januaryFirst);\n  \n  while (currentWeekStart <= today) {\n    const currentWeekEnd = getWeekEnd(currentWeekStart);\n    \n    // Only include weeks that are in the past or current (not future)\n    if (currentWeekEnd <= today) {\n      const dates = getWeekDatesArray(currentWeekStart);\n      const weekLabel = formatWeekLabel(currentWeekStart, currentWeekEnd);\n      \n      weeks.push({\n        startDate: currentWeekStart.toISOString().split('T')[0],\n        endDate: currentWeekEnd.toISOString().split('T')[0],\n        dates,\n        weekLabel,\n      });\n    }\n    \n    // Move to next week\n    currentWeekStart = new Date(currentWeekStart);\n    currentWeekStart.setDate(currentWeekStart.getDate() + 7);\n  }\n  \n  return weeks.reverse(); // Return in descending order (most recent first)\n}\n\n/**\n * Generate months from January up to current month (excluding current month)\n * Returns an array of month objects with start/end dates and date arrays\n */\nexport function getPastMonthsFromJanuary(): Array<{\n  startDate: string;\n  endDate: string;\n  dates: string[];\n  monthLabel: string;\n  monthName: string;\n  year: number;\n}> {\n  const today = new Date();\n  const currentYear = today.getFullYear();\n  const currentMonth = today.getMonth(); // 0-based (0 = January, 11 = December)\n  \n  const months: Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    monthLabel: string;\n    monthName: string;\n    year: number;\n  }> = [];\n  \n  // Generate months from most recent back to January (descending order)\n  for (let monthIndex = currentMonth - 1; monthIndex >= 0; monthIndex--) {\n    const firstDay = new Date(currentYear, monthIndex, 1);\n    const lastDay = new Date(currentYear, monthIndex + 1, 0); // Last day of the month\n    \n    const monthDates: string[] = [];\n    for (let d = new Date(firstDay); d <= lastDay; d.setDate(d.getDate() + 1)) {\n      monthDates.push(d.toISOString().split('T')[0]);\n    }\n    \n    const monthName = firstDay.toLocaleDateString('en-US', { month: 'long' });\n    const monthLabel = `${monthName} ${currentYear}`;\n    \n    months.push({\n      startDate: monthDates[0],\n      endDate: monthDates[monthDates.length - 1],\n      dates: monthDates,\n      monthLabel,\n      monthName,\n      year: currentYear,\n    });\n  }\n  \n  return months;\n}\n\n/**\n * Format week label for display (e.g., \"Dec 9-15, 2024\")\n */\nexport function formatWeekLabel(startDate: Date, endDate: Date): string {\n  const startMonth = startDate.toLocaleDateString('en-US', { month: 'short' });\n  const endMonth = endDate.toLocaleDateString('en-US', { month: 'short' });\n  const startDay = startDate.getDate();\n  const endDay = endDate.getDate();\n  const year = endDate.getFullYear();\n  \n  if (startMonth === endMonth) {\n    return `${startMonth} ${startDay}-${endDay}, ${year}`;\n  } else {\n    return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${year}`;\n  }\n}\n\n/**\n * Calculate week completion percentage based on prayer records\n */\nexport async function calculateWeekCompletion(dates: string[]): Promise<{\n  completionPercentage: number;\n  completedPrayers: number;\n  totalPrayers: number;\n  status: 'empty' | 'partial' | 'complete';\n}> {\n  try {\n    const records = await apiService.getPrayerRecords(dates[0], dates[dates.length - 1]);\n    \n    let completedPrayers = 0;\n    let totalPrayers = dates.length * 5; // 5 prayers per day\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (prayer.completed) {\n            completedPrayers++;\n          }\n        });\n      }\n    });\n    \n    const completionPercentage = totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n    \n    let status: 'empty' | 'partial' | 'complete' = 'empty';\n    if (completionPercentage === 100) {\n      status = 'complete';\n    } else if (completionPercentage > 0) {\n      status = 'partial';\n    }\n    \n    return {\n      completionPercentage,\n      completedPrayers,\n      totalPrayers,\n      status,\n    };\n  } catch (error) {\n    console.error('Error calculating week completion:', error);\n    return {\n      completionPercentage: 0,\n      completedPrayers: 0,\n      totalPrayers: dates.length * 5,\n      status: 'empty',\n    };\n  }\n}\n\n/**\n * Calculate month completion percentage based on prayer records\n */\nexport async function calculateMonthCompletion(dates: string[]): Promise<{\n  completionPercentage: number;\n  completedPrayers: number;\n  totalPrayers: number;\n  status: 'empty' | 'partial' | 'complete';\n}> {\n  try {\n    const records = await apiService.getPrayerRecords(dates[0], dates[dates.length - 1]);\n    \n    let completedPrayers = 0;\n    let totalPrayers = dates.length * 5; // 5 prayers per day\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (prayer.completed) {\n            completedPrayers++;\n          }\n        });\n      }\n    });\n    \n    const completionPercentage = totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n    \n    let status: 'empty' | 'partial' | 'complete' = 'empty';\n    if (completionPercentage === 100) {\n      status = 'complete';\n    } else if (completionPercentage > 0) {\n      status = 'partial';\n    }\n    \n    return {\n      completionPercentage,\n      completedPrayers,\n      totalPrayers,\n      status,\n    };\n  } catch (error) {\n    console.error('Error calculating month completion:', error);\n    return {\n      completionPercentage: 0,\n      completedPrayers: 0,\n      totalPrayers: dates.length * 5,\n      status: 'empty',\n    };\n  }\n}\n\n/**\n * Check if a week is in the future (should not be selectable)\n */\nexport function isWeekInFuture(weekEndDate: string): boolean {\n  const today = new Date();\n  const weekEnd = new Date(weekEndDate);\n  return weekEnd > today;\n}\n\nexport function getWeekDates(): string[] {\n  const today = new Date();\n  const monday = new Date(today);\n  monday.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1));\n  \n  const weekDates: string[] = [];\n  for (let i = 0; i < 7; i++) {\n    const date = new Date(monday);\n    date.setDate(monday.getDate() + i);\n    weekDates.push(date.toISOString().split('T')[0]);\n  }\n  \n  return weekDates;\n}\n\nexport function getMonthDates(): string[] {\n  const today = new Date();\n  const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);\n  const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n  \n  const monthDates: string[] = [];\n  for (let d = firstDay; d <= lastDay; d.setDate(d.getDate() + 1)) {\n    monthDates.push(d.toISOString().split('T')[0]);\n  }\n  \n  return monthDates;\n}\n\nexport function getYearDates(): string[] {\n  const today = new Date();\n  const firstDay = new Date(today.getFullYear(), 0, 1);\n  const lastDay = new Date(today.getFullYear(), 11, 31);\n  \n  const yearDates: string[] = [];\n  for (let d = new Date(firstDay); d <= lastDay; d.setDate(d.getDate() + 1)) {\n    yearDates.push(d.toISOString().split('T')[0]);\n  }\n  \n  return yearDates;\n}\n\n// Get date range for a specific time period (only up to today)\nexport function getDateRangeForPeriod(period: 'week' | 'month' | 'year', referenceDate?: Date): { startDate: string; endDate: string; dates: string[] } {\n  const today = referenceDate || new Date();\n  const todayString = today.toISOString().split('T')[0];\n  \n  switch (period) {\n    case 'week': {\n      const monday = new Date(today);\n      monday.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1));\n      \n      const weekDates: string[] = [];\n      for (let i = 0; i < 7; i++) {\n        const date = new Date(monday);\n        date.setDate(monday.getDate() + i);\n        const dateString = date.toISOString().split('T')[0];\n        \n        // Only include dates up to today\n        if (dateString <= todayString) {\n          weekDates.push(dateString);\n        }\n      }\n      \n      return {\n        startDate: weekDates[0],\n        endDate: weekDates[weekDates.length - 1],\n        dates: weekDates\n      };\n    }\n    \n    case 'month': {\n      const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);\n      \n      const monthDates: string[] = [];\n      for (let d = new Date(firstDay); d <= today; d.setDate(d.getDate() + 1)) {\n        monthDates.push(d.toISOString().split('T')[0]);\n      }\n      \n      return {\n        startDate: monthDates[0],\n        endDate: monthDates[monthDates.length - 1],\n        dates: monthDates\n      };\n    }\n    \n    case 'year': {\n      const firstDay = new Date(today.getFullYear(), 0, 1);\n      \n      const yearDates: string[] = [];\n      for (let d = new Date(firstDay); d <= today; d.setDate(d.getDate() + 1)) {\n        yearDates.push(d.toISOString().split('T')[0]);\n      }\n      \n      return {\n        startDate: yearDates[0],\n        endDate: yearDates[yearDates.length - 1],\n        dates: yearDates\n      };\n    }\n    \n    default:\n      throw new Error(`Unsupported period: ${period}`);\n  }\n}\n\n// Get analytics data for a specific time period\nexport async function getAnalyticsDataForPeriod(period: 'week' | 'month' | 'year') {\n  try {\n    const { startDate, endDate, dates } = getDateRangeForPeriod(period);\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    const prayerStats = {\n      fajr: { completed: 0, total: 0 },\n      dhuhr: { completed: 0, total: 0 },\n      asr: { completed: 0, total: 0 },\n      maghrib: { completed: 0, total: 0 },\n      isha: { completed: 0, total: 0 },\n    };\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          Object.entries(prayers).forEach(([prayerName, prayer]) => {\n            const prayerKey = prayerName as keyof typeof prayerStats;\n            prayerStats[prayerKey].total++;\n            if (prayer.completed) {\n              prayerStats[prayerKey].completed++;\n            }\n          });\n        }\n      } else {\n        // Count missing days as incomplete\n        Object.keys(prayerStats).forEach(prayer => {\n          prayerStats[prayer as keyof typeof prayerStats].total++;\n        });\n      }\n    });\n    \n    return prayerStats;\n  } catch (error) {\n    console.error('Failed to get analytics data from API:', error);\n    // Fallback to local storage for the requested period\n    const { dates } = getDateRangeForPeriod(period);\n    const prayerStats = {\n      fajr: { completed: 0, total: 0 },\n      dhuhr: { completed: 0, total: 0 },\n      asr: { completed: 0, total: 0 },\n      maghrib: { completed: 0, total: 0 },\n      isha: { completed: 0, total: 0 },\n    };\n    \n    dates.forEach(date => {\n      const stored = localStorage.getItem(`prayers-${date}`);\n      if (stored) {\n        const prayers: DailyPrayers = JSON.parse(stored);\n        Object.entries(prayers).forEach(([prayerName, prayer]) => {\n          const prayerKey = prayerName as keyof typeof prayerStats;\n          prayerStats[prayerKey].total++;\n          if (prayer.completed) {\n            prayerStats[prayerKey].completed++;\n          }\n        });\n      } else {\n        Object.keys(prayerStats).forEach(prayer => {\n          prayerStats[prayer as keyof typeof prayerStats].total++;\n        });\n      }\n    });\n    \n    return prayerStats;\n  }\n}\n\n// Get trend chart data for a specific time period\nexport async function getTrendDataForPeriod(period: 'week' | 'month' | 'year') {\n  try {\n    const { startDate, endDate, dates } = getDateRangeForPeriod(period);\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    // Generate labels based on period\n    let labels: string[];\n    let dataPoints: number[];\n    \n    if (period === 'week') {\n      labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n      dataPoints = dates.map(date => {\n        const record = records.find(r => r.date === date);\n        if (record && record.prayers) {\n          const prayers = convertPrayerRecordToDailyPrayers(record);\n          return prayers ? getTodayCompletedCount(prayers) : 0;\n        }\n        return 0;\n      });\n    } else if (period === 'month') {\n      // Group by week for month view\n      const weekGroups: { [key: string]: number[] } = {};\n      dates.forEach((date, index) => {\n        const dateObj = new Date(date);\n        const weekOfMonth = Math.ceil((dateObj.getDate() + new Date(dateObj.getFullYear(), dateObj.getMonth(), 1).getDay()) / 7);\n        const weekKey = `Week ${weekOfMonth}`;\n        \n        if (!weekGroups[weekKey]) weekGroups[weekKey] = [];\n        \n        const record = records.find(r => r.date === date);\n        let completed = 0;\n        if (record && record.prayers) {\n          const prayers = convertPrayerRecordToDailyPrayers(record);\n          completed = prayers ? getTodayCompletedCount(prayers) : 0;\n        }\n        weekGroups[weekKey].push(completed);\n      });\n      \n      labels = Object.keys(weekGroups);\n      dataPoints = labels.map(week => {\n        const weekData = weekGroups[week];\n        return Math.round(weekData.reduce((sum, val) => sum + val, 0) / weekData.length);\n      });\n    } else {\n      // Group by month for year view\n      const monthGroups: { [key: string]: number[] } = {};\n      dates.forEach(date => {\n        const dateObj = new Date(date);\n        const monthKey = dateObj.toLocaleString('default', { month: 'short' });\n        \n        if (!monthGroups[monthKey]) monthGroups[monthKey] = [];\n        \n        const record = records.find(r => r.date === date);\n        let completed = 0;\n        if (record && record.prayers) {\n          const prayers = convertPrayerRecordToDailyPrayers(record);\n          completed = prayers ? getTodayCompletedCount(prayers) : 0;\n        }\n        monthGroups[monthKey].push(completed);\n      });\n      \n      labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      dataPoints = labels.map(month => {\n        const monthData = monthGroups[month] || [];\n        return monthData.length > 0 ? Math.round(monthData.reduce((sum, val) => sum + val, 0) / monthData.length) : 0;\n      });\n    }\n    \n    return {\n      labels,\n      dataPoints,\n      period\n    };\n  } catch (error) {\n    console.error('Failed to get trend data from API:', error);\n    // Fallback to localStorage\n    const { dates } = getDateRangeForPeriod(period);\n    const labels = period === 'week' \n      ? ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n      : period === 'month'\n      ? ['Week 1', 'Week 2', 'Week 3', 'Week 4']\n      : ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    const dataPoints = labels.map((_, index) => {\n      if (period === 'week' && index < dates.length) {\n        const stored = localStorage.getItem(`prayers-${dates[index]}`);\n        if (stored) {\n          const prayers: DailyPrayers = JSON.parse(stored);\n          return getTodayCompletedCount(prayers);\n        }\n      }\n      return 0;\n    });\n    \n    return { labels, dataPoints, period };\n  }\n}\n\n// Get summary statistics for a time period\nexport async function getPeriodSummary(period: 'week' | 'month' | 'year') {\n  try {\n    const { startDate, endDate, dates } = getDateRangeForPeriod(period);\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let totalPrayers = 0;\n    let completedPrayers = 0;\n    let onTimePrayers = 0;\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          totalPrayers++;\n          if (prayer.completed) {\n            completedPrayers++;\n            if (prayer.onTime) {\n              onTimePrayers++;\n            }\n          }\n        });\n      } else {\n        totalPrayers += 5; // 5 prayers per day\n      }\n    });\n    \n    const qazaPrayers = totalPrayers - completedPrayers;\n    const successRate = totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n    \n    return {\n      totalPrayers: completedPrayers,\n      totalPossible: totalPrayers,\n      successRate,\n      qazaPrayers,\n      onTimePrayers,\n      period\n    };\n  } catch (error) {\n    console.error('Failed to get period summary from API:', error);\n    return {\n      totalPrayers: 0,\n      totalPossible: 0,\n      successRate: 0,\n      qazaPrayers: 0,\n      onTimePrayers: 0,\n      period\n    };\n  }\n}\n\nexport async function calculateWeekProgressFromAPI(): Promise<number> {\n  try {\n    const weekDates = getWeekDates();\n    const startDate = weekDates[0];\n    const endDate = weekDates[weekDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let totalPrayers = 0;\n    let completedPrayers = 0;\n    \n    weekDates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          totalPrayers++;\n          if (prayer.completed) completedPrayers++;\n        });\n      } else {\n        totalPrayers += 5; // 5 prayers per day if no record\n      }\n    });\n    \n    return totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n  } catch (error) {\n    console.warn('Failed to calculate week progress from API, falling back to localStorage:', error);\n    return calculateWeekProgress();\n  }\n}\n\nexport function calculateWeekProgress(): number {\n  const weekDates = getWeekDates();\n  let totalPrayers = 0;\n  let completedPrayers = 0;\n  \n  weekDates.forEach(date => {\n    const stored = localStorage.getItem(`prayers-${date}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      Object.values(prayers).forEach(prayer => {\n        totalPrayers++;\n        if (prayer.completed) completedPrayers++;\n      });\n    } else {\n      totalPrayers += 5; // 5 prayers per day\n    }\n  });\n  \n  return totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n}\n\nexport function calculateMonthProgress(): number {\n  const monthDates = getMonthDates();\n  let totalPrayers = 0;\n  let completedPrayers = 0;\n  \n  monthDates.forEach(date => {\n    const stored = localStorage.getItem(`prayers-${date}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      Object.values(prayers).forEach(prayer => {\n        totalPrayers++;\n        if (prayer.completed) completedPrayers++;\n      });\n    } else {\n      totalPrayers += 5; // 5 prayers per day\n    }\n  });\n  \n  return totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n}\n\nexport function getTodayCompletedCount(prayers: DailyPrayers): number {\n  return Object.values(prayers).filter(prayer => prayer.completed).length;\n}\n\n// Enhanced achievement checking with multiple types\nexport async function checkAchievements(prayers: DailyPrayers, weekProgress: number, currentStreak: number, userStats?: any) {\n  const achievements: Array<{ \n    type: string;\n    title: string; \n    description: string;\n    metadata?: any;\n  }> = [];\n  \n  const todayCompleted = getTodayCompletedCount(prayers);\n  const today = getTodayString();\n  \n  // Perfect Day Achievement\n  if (todayCompleted === 5) {\n    achievements.push({\n      type: 'perfect_day',\n      title: \"Perfect Day\",\n      description: \"All 5 prayers completed today!\",\n      metadata: { date: today, onTimePrayers: Object.values(prayers).filter(p => p.onTime).length }\n    });\n  }\n  \n  // Perfect Week Achievement\n  if (weekProgress === 100) {\n    const weekDates = getWeekDates();\n    achievements.push({\n      type: 'perfect_week',\n      title: \"Perfect Week\",\n      description: \"All 35 prayers completed this week!\",\n      metadata: {\n        weekNumber: getWeekNumber(new Date()),\n        year: new Date().getFullYear(),\n        dateRange: { start: weekDates[0], end: weekDates[6] }\n      }\n    });\n  }\n  \n  // Streak Achievements\n  const streakAchievements = checkStreakAchievements(currentStreak);\n  achievements.push(...streakAchievements);\n  \n  // Prayer Count Milestones\n  if (userStats) {\n    const milestoneAchievements = checkPrayerMilestones(userStats.totalPrayers || 0);\n    achievements.push(...milestoneAchievements);\n    \n    // Consistency Achievements\n    const consistencyAchievements = await checkConsistencyAchievements(userStats);\n    achievements.push(...consistencyAchievements);\n  }\n  \n  // Perfect Month Achievement (check if we're at month end)\n  const monthProgress = await calculateMonthProgressFromAPI();\n  if (monthProgress === 100 && isEndOfMonth()) {\n    achievements.push({\n      type: 'perfect_month',\n      title: \"Perfect Month\",\n      description: \"All prayers completed this month!\",\n      metadata: {\n        month: new Date().getMonth() + 1,\n        year: new Date().getFullYear()\n      }\n    });\n  }\n  \n  // Early Bird Achievements (Fajr consistency)\n  const earlyBirdAchievements = await checkEarlyBirdAchievements();\n  achievements.push(...earlyBirdAchievements);\n  \n  // Night Owl Achievements (Isha consistency)\n  const nightOwlAchievements = await checkNightOwlAchievements();\n  achievements.push(...nightOwlAchievements);\n  \n  // Golden Hour Achievements (Maghrib consistency)\n  const goldenHourAchievements = await checkGoldenHourAchievements();\n  achievements.push(...goldenHourAchievements);\n  \n  // Weekend Warrior Achievements\n  const weekendWarriorAchievements = await checkWeekendWarriorAchievements();\n  achievements.push(...weekendWarriorAchievements);\n  \n  // Dedication Achievements (Weekend streaks)\n  const dedicationAchievements = await checkDedicationAchievements();\n  achievements.push(...dedicationAchievements);\n  \n  // Comeback Achievements\n  const comebackAchievements = await checkComebackAchievements();\n  achievements.push(...comebackAchievements);\n  \n  // Monthly Champion Achievements\n  const monthlyChampionAchievements = await checkMonthlyChampionAchievements();\n  achievements.push(...monthlyChampionAchievements);\n  \n  // Seasonal Achievements\n  const seasonalAchievements = await checkSeasonalAchievements();\n  achievements.push(...seasonalAchievements);\n  \n  return achievements;\n}\n\n// Helper function to get week number\nexport function getWeekNumber(date: Date): number {\n  const startDate = new Date(date.getFullYear(), 0, 1);\n  const days = Math.floor((date.getTime() - startDate.getTime()) / (24 * 60 * 60 * 1000));\n  return Math.ceil(days / 7);\n}\n\n// Check if it's the end of the month\nexport function isEndOfMonth(): boolean {\n  const today = new Date();\n  const tomorrow = new Date(today);\n  tomorrow.setDate(today.getDate() + 1);\n  return tomorrow.getMonth() !== today.getMonth();\n}\n\n// Check streak-based achievements\nexport function checkStreakAchievements(currentStreak: number): Array<{ type: string; title: string; description: string; metadata: any }> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  const streakMilestones = [7, 30, 50, 100, 200, 365];\n  \n  for (const milestone of streakMilestones) {\n    if (currentStreak === milestone) {\n      let title, description;\n      \n      switch (milestone) {\n        case 7:\n          title = \"Week Warrior\";\n          description = \"7-day prayer streak achieved!\";\n          break;\n        case 30:\n          title = \"Monthly Master\";\n          description = \"30-day prayer streak achieved!\";\n          break;\n        case 50:\n          title = \"Consistency Champion\";\n          description = \"50-day prayer streak achieved!\";\n          break;\n        case 100:\n          title = \"Century Devotee\";\n          description = \"100-day prayer streak achieved!\";\n          break;\n        case 200:\n          title = \"Dedication Legend\";\n          description = \"200-day prayer streak achieved!\";\n          break;\n        case 365:\n          title = \"Yearly Devotee\";\n          description = \"365-day prayer streak achieved!\";\n          break;\n        default:\n          title = `${milestone}-Day Streak`;\n          description = `${milestone}-day prayer streak achieved!`;\n      }\n      \n      achievements.push({\n        type: 'streak_milestone',\n        title,\n        description,\n        metadata: { streakDays: milestone, earnedDate: getTodayString() }\n      });\n      break; // Only award the current milestone\n    }\n  }\n  \n  return achievements;\n}\n\n// Check prayer count milestones\nexport function checkPrayerMilestones(totalPrayers: number): Array<{ type: string; title: string; description: string; metadata: any }> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  const prayerMilestones = [50, 100, 250, 500, 1000, 2500, 5000];\n  \n  for (const milestone of prayerMilestones) {\n    if (totalPrayers === milestone) {\n      let title, description;\n      \n      switch (milestone) {\n        case 50:\n          title = \"Prayer Beginner\";\n          description = \"50 prayers completed!\";\n          break;\n        case 100:\n          title = \"Prayer Enthusiast\";\n          description = \"100 prayers completed!\";\n          break;\n        case 250:\n          title = \"Prayer Devotee\";\n          description = \"250 prayers completed!\";\n          break;\n        case 500:\n          title = \"Prayer Champion\";\n          description = \"500 prayers completed!\";\n          break;\n        case 1000:\n          title = \"Prayer Master\";\n          description = \"1000 prayers completed!\";\n          break;\n        case 2500:\n          title = \"Prayer Legend\";\n          description = \"2500 prayers completed!\";\n          break;\n        case 5000:\n          title = \"Prayer Saint\";\n          description = \"5000 prayers completed!\";\n          break;\n        default:\n          title = `${milestone} Prayers`;\n          description = `${milestone} prayers completed!`;\n      }\n      \n      achievements.push({\n        type: 'prayer_milestone',\n        title,\n        description,\n        metadata: { totalPrayers: milestone, earnedDate: getTodayString() }\n      });\n      break;\n    }\n  }\n  \n  return achievements;\n}\n\n// Check consistency-based achievements\nexport async function checkConsistencyAchievements(userStats: any): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    // Calculate recent consistency (last 30 days)\n    const monthSummary = await getPeriodSummary('month');\n    const consistencyRate = monthSummary.successRate;\n    \n    // Early Bird Achievement - High Fajr completion rate\n    const weekSummary = await getPeriodSummary('week');\n    if (weekSummary.successRate >= 90) {\n      // Check if this is specifically for consistent week performance\n      achievements.push({\n        type: 'consistency',\n        title: \"Consistent Devotee\",\n        description: \"90%+ prayer completion this week!\",\n        metadata: {\n          consistencyRate: weekSummary.successRate,\n          period: 'week',\n          earnedDate: getTodayString()\n        }\n      });\n    }\n    \n    // Monthly Consistency\n    if (consistencyRate >= 80 && isEndOfMonth()) {\n      achievements.push({\n        type: 'consistency',\n        title: \"Monthly Consistency\",\n        description: \"80%+ prayer completion this month!\",\n        metadata: {\n          consistencyRate,\n          period: 'month',\n          month: new Date().getMonth() + 1,\n          year: new Date().getFullYear(),\n          earnedDate: getTodayString()\n        }\n      });\n    }\n  } catch (error) {\n    console.warn('Failed to check consistency achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Calculate month progress from API\nexport async function calculateMonthProgressFromAPI(): Promise<number> {\n  try {\n    const monthSummary = await getPeriodSummary('month');\n    return monthSummary.successRate;\n  } catch (error) {\n    console.warn('Failed to calculate month progress from API:', error);\n    return calculateMonthProgress();\n  }\n}\n\nexport async function getWeeklyDataFromAPI() {\n  try {\n    const weekDates = getWeekDates();\n    const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    const startDate = weekDates[0];\n    const endDate = weekDates[weekDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    return weekDates.map((date, index) => {\n      const record = records.find(r => r.date === date);\n      let completed = 0;\n      \n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          completed = getTodayCompletedCount(prayers);\n        }\n      }\n      \n      return {\n        day: weekDays[index],\n        date,\n        completed,\n        total: 5,\n        percentage: Math.round((completed / 5) * 100),\n      };\n    });\n  } catch (error) {\n    console.warn('Failed to get weekly data from API, falling back to localStorage:', error);\n    return getWeeklyData();\n  }\n}\n\nexport function getWeeklyData() {\n  const weekDates = getWeekDates();\n  const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  \n  return weekDates.map((date, index) => {\n    const stored = localStorage.getItem(`prayers-${date}`);\n    let completed = 0;\n    \n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      completed = getTodayCompletedCount(prayers);\n    }\n    \n    return {\n      day: weekDays[index],\n      date,\n      completed,\n      total: 5,\n      percentage: Math.round((completed / 5) * 100),\n    };\n  });\n}\n\nexport async function getPrayerAnalyticsFromAPI() {\n  try {\n    const monthDates = getMonthDates();\n    const startDate = monthDates[0];\n    const endDate = monthDates[monthDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    const prayerStats = {\n      fajr: { completed: 0, total: 0 },\n      dhuhr: { completed: 0, total: 0 },\n      asr: { completed: 0, total: 0 },\n      maghrib: { completed: 0, total: 0 },\n      isha: { completed: 0, total: 0 },\n    };\n    \n    monthDates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          Object.entries(prayers).forEach(([prayerName, prayer]) => {\n            const prayerKey = prayerName as keyof typeof prayerStats;\n            prayerStats[prayerKey].total++;\n            if (prayer.completed) {\n              prayerStats[prayerKey].completed++;\n            }\n          });\n        }\n      } else {\n        // Count missing days as incomplete\n        Object.keys(prayerStats).forEach(prayer => {\n          prayerStats[prayer as keyof typeof prayerStats].total++;\n        });\n      }\n    });\n    \n    return prayerStats;\n  } catch (error) {\n    console.warn('Failed to get prayer analytics from API, falling back to localStorage:', error);\n    return getPrayerAnalytics();\n  }\n}\n\nexport function getPrayerAnalytics() {\n  const monthDates = getMonthDates();\n  const prayerStats = {\n    fajr: { completed: 0, total: 0 },\n    dhuhr: { completed: 0, total: 0 },\n    asr: { completed: 0, total: 0 },\n    maghrib: { completed: 0, total: 0 },\n    isha: { completed: 0, total: 0 },\n  };\n  \n  monthDates.forEach(date => {\n    const stored = localStorage.getItem(`prayers-${date}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      Object.entries(prayers).forEach(([prayerName, prayer]) => {\n        const prayerKey = prayerName as keyof typeof prayerStats;\n        prayerStats[prayerKey].total++;\n        if (prayer.completed) {\n          prayerStats[prayerKey].completed++;\n        }\n      });\n    } else {\n      // Count missing days as incomplete\n      Object.keys(prayerStats).forEach(prayer => {\n        prayerStats[prayer as keyof typeof prayerStats].total++;\n      });\n    }\n  });\n  \n  return prayerStats;\n}\n\nexport function getCurrentStreak(): number {\n  let streak = 0;\n  const today = new Date();\n  \n  for (let i = 0; i < 365; i++) { // Check up to a year back\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    \n    const stored = localStorage.getItem(`prayers-${dateString}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      const completed = getTodayCompletedCount(prayers);\n      \n      if (completed === 5) {\n        streak++;\n      } else {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  \n  return streak;\n}\n\nexport function getQazaCount(): number {\n  // Calculate missed prayers from the past 30 days\n  let qazaCount = 0;\n  const today = new Date();\n  \n  for (let i = 0; i < 30; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    \n    const stored = localStorage.getItem(`prayers-${dateString}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      Object.values(prayers).forEach(prayer => {\n        if (!prayer.completed) {\n          qazaCount++;\n        }\n      });\n    } else {\n      qazaCount += 5; // All 5 prayers missed if no data\n    }\n  }\n  \n  return qazaCount;\n}\n\n// Enhanced API-based streak calculation\nexport async function calculateCurrentStreakFromAPI(): Promise<number> {\n  try {\n    const today = new Date();\n    let streak = 0;\n    let checkDate = new Date(today);\n    \n    // Go backwards day by day to find consecutive prayer completion\n    while (true) {\n      const dateString = checkDate.toISOString().split('T')[0];\n      const record = await apiService.getPrayerRecord(dateString);\n      \n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          // Check if all 5 prayers were completed for this day\n          const allCompleted = Object.values(prayers).every(prayer => prayer.completed);\n          if (allCompleted) {\n            streak++;\n            checkDate.setDate(checkDate.getDate() - 1);\n          } else {\n            break; // Streak broken\n          }\n        } else {\n          break;\n        }\n      } else {\n        // No record means no prayers completed\n        break;\n      }\n      \n      // Limit to reasonable check period (1 year)\n      if (streak > 365) break;\n    }\n    \n    return streak;\n  } catch (error) {\n    console.error('Failed to calculate streak from API:', error);\n    return getCurrentStreak(); // Fallback to localStorage\n  }\n}\n\n// Enhanced API-based qaza count calculation\nexport async function calculateQazaCountFromAPI(): Promise<number> {\n  try {\n    const { startDate, endDate, dates } = getDateRangeForPeriod('month');\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let qazaCount = 0;\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (!prayer.completed) {\n            qazaCount++;\n          }\n        });\n      } else {\n        // No record means all 5 prayers missed\n        qazaCount += 5;\n      }\n    });\n    \n    return qazaCount;\n  } catch (error) {\n    console.error('Failed to calculate qaza count from API:', error);\n    return getQazaCount(); // Fallback to localStorage\n  }\n}\n\n// Calculate comprehensive user statistics\nexport async function calculateUserStatistics(userId?: string): Promise<{\n  totalPrayers: number;\n  onTimePrayers: number;\n  qazaPrayers: number;\n  currentStreak: number;\n  bestStreak: number;\n  perfectWeeks: number;\n}> {\n  try {\n    // Get data for the past year to calculate comprehensive stats\n    const { startDate, endDate } = getDateRangeForPeriod('year');\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let totalPrayers = 0;\n    let onTimePrayers = 0;\n    let qazaPrayers = 0;\n    let currentStreak = 0;\n    let bestStreak = 0;\n    let perfectWeeks = 0;\n    \n    // Calculate current streak\n    currentStreak = await calculateCurrentStreakFromAPI();\n    \n    // Calculate historical streaks to find best streak\n    let tempStreak = 0;\n    const sortedRecords = records.sort((a, b) => a.date.localeCompare(b.date));\n    \n    sortedRecords.forEach(record => {\n      if (record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          // Count prayers for this day\n          Object.values(prayers).forEach(prayer => {\n            totalPrayers++;\n            if (prayer.completed) {\n              if (prayer.onTime) {\n                onTimePrayers++;\n              }\n            } else {\n              qazaPrayers++;\n            }\n          });\n          \n          // Check if all prayers completed for streak calculation\n          const allCompleted = Object.values(prayers).every(prayer => prayer.completed);\n          if (allCompleted) {\n            tempStreak++;\n            bestStreak = Math.max(bestStreak, tempStreak);\n          } else {\n            tempStreak = 0;\n          }\n        }\n      } else {\n        // No prayers recorded - break streak and add to qaza\n        qazaPrayers += 5;\n        tempStreak = 0;\n      }\n    });\n    \n    // Calculate perfect weeks\n    const weekGroups = getWeekGroupsFromRecords(records);\n    perfectWeeks = weekGroups.filter(week => week.completionRate === 100).length;\n    \n    return {\n      totalPrayers: totalPrayers - qazaPrayers, // Only count completed prayers\n      onTimePrayers,\n      qazaPrayers,\n      currentStreak,\n      bestStreak: Math.max(bestStreak, currentStreak),\n      perfectWeeks,\n    };\n  } catch (error) {\n    console.error('Failed to calculate user statistics:', error);\n    return {\n      totalPrayers: 0,\n      onTimePrayers: 0,\n      qazaPrayers: 0,\n      currentStreak: 0,\n      bestStreak: 0,\n      perfectWeeks: 0,\n    };\n  }\n}\n\n// Helper function to group records by week\nfunction getWeekGroupsFromRecords(records: any[]): Array<{ completionRate: number }> {\n  const weeks: { [key: string]: { completed: number; total: number } } = {};\n  \n  records.forEach(record => {\n    const date = new Date(record.date);\n    const weekStart = new Date(date);\n    weekStart.setDate(date.getDate() - (date.getDay() === 0 ? 6 : date.getDay() - 1));\n    const weekKey = weekStart.toISOString().split('T')[0];\n    \n    if (!weeks[weekKey]) {\n      weeks[weekKey] = { completed: 0, total: 0 };\n    }\n    \n    if (record.prayers) {\n      const prayers = convertPrayerRecordToDailyPrayers(record);\n      if (prayers) {\n        Object.values(prayers).forEach(prayer => {\n          weeks[weekKey].total++;\n          if (prayer.completed) {\n            weeks[weekKey].completed++;\n          }\n        });\n      }\n    } else {\n      weeks[weekKey].total += 5;\n    }\n  });\n  \n  return Object.values(weeks).map(week => ({\n    completionRate: week.total > 0 ? Math.round((week.completed / week.total) * 100) : 0\n  }));\n}\n\n// Update user statistics in backend\nexport async function updateUserStatisticsInBackend(newPrayers: DailyPrayers): Promise<void> {\n  try {\n    // Calculate comprehensive statistics\n    const stats = await calculateUserStatistics();\n    \n    // Update the backend with new statistics\n    await apiService.updateUserStats({\n      totalPrayers: stats.totalPrayers,\n      onTimePrayers: stats.onTimePrayers,\n      qazaPrayers: stats.qazaPrayers,\n      currentStreak: stats.currentStreak,\n      bestStreak: stats.bestStreak,\n      perfectWeeks: stats.perfectWeeks,\n      lastStreakUpdate: getTodayString(),\n      updatedAt: new Date(),\n    });\n  } catch (error) {\n    console.error('Failed to update user statistics in backend:', error);\n  }\n}\n\n// Real-time statistics calculation for immediate UI updates\nexport function calculateRealTimeStatistics(newPrayers: DailyPrayers, currentStats: any): {\n  currentStreak: number;\n  qazaCount: number;\n  shouldUpdateBackend: boolean;\n} {\n  const todayCompleted = getTodayCompletedCount(newPrayers);\n  const todayPerfect = todayCompleted === 5;\n  \n  // Calculate immediate streak impact\n  let newCurrentStreak = currentStats.currentStreak || 0;\n  let qazaChange = 0;\n  \n  // Count missed prayers for today\n  const missedToday = 5 - todayCompleted;\n  \n  // If today is perfect, potentially extend streak\n  if (todayPerfect) {\n    // We'll verify this with API call later\n    newCurrentStreak = currentStats.currentStreak + 1;\n  } else if (missedToday > 0) {\n    // Reset streak if prayers were missed\n    newCurrentStreak = 0;\n    qazaChange = missedToday;\n  }\n  \n  return {\n    currentStreak: newCurrentStreak,\n    qazaCount: (currentStats.qazaCount || 0) + qazaChange,\n    shouldUpdateBackend: true, // Always update backend for accuracy\n  };\n}\n\n// Calculate how many Qaza prayers remain for the current year\nexport async function getYearlyQazaRemaining(): Promise<number> {\n  try {\n    const today = new Date();\n    const startOfYear = new Date(today.getFullYear(), 0, 1);\n    const currentDate = new Date();\n    \n    // Calculate total days from start of year to today (inclusive)\n    const daysSinceStartOfYear = Math.floor((currentDate.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    \n    // Total possible prayers for the year so far (5 prayers per day)\n    const totalPossible = daysSinceStartOfYear * 5;\n    \n    // Get year dates up to today\n    const yearDates = getYearDates().filter(date => date <= getTodayString());\n    const startDate = yearDates[0];\n    const endDate = yearDates[yearDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let completedPrayers = 0;\n    \n    yearDates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (prayer.completed) completedPrayers++;\n        });\n      }\n    });\n    \n    // Qaza prayers = Total possible - Completed prayers\n    return Math.max(0, totalPossible - completedPrayers);\n  } catch (error) {\n    console.error('Failed to get yearly Qaza remaining from API, falling back to localStorage:', error);\n    \n    // Fallback to localStorage\n    const today = new Date();\n    const startOfYear = new Date(today.getFullYear(), 0, 1);\n    const daysSinceStartOfYear = Math.floor((today.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    const totalPossible = daysSinceStartOfYear * 5;\n    \n    const yearDates = getYearDates().filter(date => date <= getTodayString());\n    let completedPrayers = 0;\n    \n    yearDates.forEach(date => {\n      const stored = localStorage.getItem(`prayers-${date}`);\n      if (stored) {\n        const prayers: DailyPrayers = JSON.parse(stored);\n        Object.values(prayers).forEach(prayer => {\n          if (prayer.completed) completedPrayers++;\n        });\n      }\n    });\n    \n    return Math.max(0, totalPossible - completedPrayers);\n  }\n}\n\n// Get comprehensive yearly statistics including total possible prayers, completed, and remaining\nexport async function getYearlyQazaStats(): Promise<{\n  totalPossible: number;\n  completed: number;\n  qazaRemaining: number;\n  currentYear: number;\n}> {\n  try {\n    const today = new Date();\n    const currentYear = today.getFullYear();\n    const startOfYear = new Date(currentYear, 0, 1);\n    \n    // Calculate total days from start of year to today (inclusive)\n    const daysSinceStartOfYear = Math.floor((today.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    \n    // Total possible prayers for the year so far (5 prayers per day)\n    const totalPossible = daysSinceStartOfYear * 5;\n    \n    // Get year dates up to today\n    const yearDates = getYearDates().filter(date => date <= getTodayString());\n    const startDate = yearDates[0];\n    const endDate = yearDates[yearDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let completed = 0;\n    \n    yearDates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (prayer.completed) completed++;\n        });\n      }\n    });\n    \n    const qazaRemaining = Math.max(0, totalPossible - completed);\n    \n    return {\n      totalPossible,\n      completed,\n      qazaRemaining,\n      currentYear\n    };\n  } catch (error) {\n    console.error('Failed to get yearly Qaza stats from API, falling back to localStorage:', error);\n    \n    // Fallback to localStorage\n    const today = new Date();\n    const currentYear = today.getFullYear();\n    const startOfYear = new Date(currentYear, 0, 1);\n    const daysSinceStartOfYear = Math.floor((today.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    const totalPossible = daysSinceStartOfYear * 5;\n    \n    const yearDates = getYearDates().filter(date => date <= getTodayString());\n    let completed = 0;\n    \n    yearDates.forEach(date => {\n      const stored = localStorage.getItem(`prayers-${date}`);\n      if (stored) {\n        const prayers: DailyPrayers = JSON.parse(stored);\n        Object.values(prayers).forEach(prayer => {\n          if (prayer.completed) completed++;\n        });\n      }\n    });\n    \n    const qazaRemaining = Math.max(0, totalPossible - completed);\n    \n    return {\n      totalPossible,\n      completed,\n      qazaRemaining,\n      currentYear\n    };\n  }\n}\n\n// Check Early Bird achievements (Fajr consistency)\nexport async function checkEarlyBirdAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30, 60, 100];\n    \n    for (const milestone of milestones) {\n      const consecutiveDays = await checkConsecutivePrayerCompletion('fajr', milestone);\n      \n      if (consecutiveDays >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Early Starter\";\n            description = \"3 consecutive days of Fajr prayers!\";\n            break;\n          case 7:\n            title = \"Dawn Devotee\";\n            description = \"1 week of consistent Fajr prayers!\";\n            break;\n          case 15:\n            title = \"Morning Master\";\n            description = \"15 days of Fajr dedication!\";\n            break;\n          case 30:\n            title = \"Fajr Champion\";\n            description = \"30 days of early morning devotion!\";\n            break;\n          case 60:\n            title = \"Early Bird Legend\";\n            description = \"60 days of Fajr consistency!\";\n            break;\n          case 100:\n            title = \"Dawn Guardian\";\n            description = \"100 days of Fajr mastery!\";\n            break;\n          default:\n            title = `Early Bird ${milestone}`;\n            description = `${milestone} consecutive Fajr prayers!`;\n        }\n        \n        achievements.push({\n          type: 'early_bird',\n          title,\n          description,\n          metadata: {\n            consecutiveDays: milestone,\n            prayerType: 'fajr',\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Early Bird achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Night Owl achievements (Isha consistency)\nexport async function checkNightOwlAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30, 60, 100];\n    \n    for (const milestone of milestones) {\n      const consecutiveDays = await checkConsecutivePrayerCompletion('isha', milestone);\n      \n      if (consecutiveDays >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Night Starter\";\n            description = \"3 consecutive nights of Isha prayers!\";\n            break;\n          case 7:\n            title = \"Evening Devotee\";\n            description = \"1 week of consistent Isha prayers!\";\n            break;\n          case 15:\n            title = \"Night Master\";\n            description = \"15 nights of Isha dedication!\";\n            break;\n          case 30:\n            title = \"Isha Champion\";\n            description = \"30 nights of evening devotion!\";\n            break;\n          case 60:\n            title = \"Night Owl Legend\";\n            description = \"60 nights of Isha consistency!\";\n            break;\n          case 100:\n            title = \"Night Guardian\";\n            description = \"100 nights of Isha mastery!\";\n            break;\n          default:\n            title = `Night Owl ${milestone}`;\n            description = `${milestone} consecutive Isha prayers!`;\n        }\n        \n        achievements.push({\n          type: 'night_owl',\n          title,\n          description,\n          metadata: {\n            consecutiveDays: milestone,\n            prayerType: 'isha',\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Night Owl achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Golden Hour achievements (Maghrib consistency)\nexport async function checkGoldenHourAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30, 60, 100];\n    \n    for (const milestone of milestones) {\n      const consecutiveDays = await checkConsecutivePrayerCompletion('maghrib', milestone);\n      \n      if (consecutiveDays >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Sunset Starter\";\n            description = \"3 consecutive days of Maghrib prayers!\";\n            break;\n          case 7:\n            title = \"Golden Devotee\";\n            description = \"1 week of consistent Maghrib prayers!\";\n            break;\n          case 15:\n            title = \"Sunset Master\";\n            description = \"15 days of Maghrib dedication!\";\n            break;\n          case 30:\n            title = \"Maghrib Champion\";\n            description = \"30 days of golden hour devotion!\";\n            break;\n          case 60:\n            title = \"Golden Hour Legend\";\n            description = \"60 days of Maghrib consistency!\";\n            break;\n          case 100:\n            title = \"Sunset Guardian\";\n            description = \"100 days of Maghrib mastery!\";\n            break;\n          default:\n            title = `Golden Hour ${milestone}`;\n            description = `${milestone} consecutive Maghrib prayers!`;\n        }\n        \n        achievements.push({\n          type: 'golden_hour',\n          title,\n          description,\n          metadata: {\n            consecutiveDays: milestone,\n            prayerType: 'maghrib',\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Golden Hour achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Weekend Warrior achievements\nexport async function checkWeekendWarriorAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [1, 2, 4, 8, 12, 24];\n    \n    for (const milestone of milestones) {\n      const perfectWeekends = await countPerfectWeekends();\n      \n      if (perfectWeekends >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 1:\n            title = \"Weekend Starter\";\n            description = \"First perfect weekend achieved!\";\n            break;\n          case 2:\n            title = \"Weekend Enthusiast\";\n            description = \"2 perfect weekends completed!\";\n            break;\n          case 4:\n            title = \"Weekend Champion\";\n            description = \"4 perfect weekends in a month!\";\n            break;\n          case 8:\n            title = \"Weekend Master\";\n            description = \"8 perfect weekends achieved!\";\n            break;\n          case 12:\n            title = \"Weekend Legend\";\n            description = \"12 perfect weekends completed!\";\n            break;\n          case 24:\n            title = \"Weekend Guardian\";\n            description = \"24 perfect weekends mastered!\";\n            break;\n          default:\n            title = `Weekend Warrior ${milestone}`;\n            description = `${milestone} perfect weekends achieved!`;\n        }\n        \n        achievements.push({\n          type: 'weekend_warrior',\n          title,\n          description,\n          metadata: {\n            perfectWeekends: milestone,\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Weekend Warrior achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Dedication achievements (Weekend streaks)\nexport async function checkDedicationAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30];\n    \n    for (const milestone of milestones) {\n      const consecutiveWeekends = await checkConsecutiveWeekendStreaks();\n      \n      if (consecutiveWeekends >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Dedicated Beginner\";\n            description = \"3 consecutive perfect weekends!\";\n            break;\n          case 7:\n            title = \"Weekend Devotee\";\n            description = \"7 consecutive perfect weekends!\";\n            break;\n          case 15:\n            title = \"Dedication Master\";\n            description = \"15 consecutive perfect weekends!\";\n            break;\n          case 30:\n            title = \"Ultimate Dedication\";\n            description = \"30 consecutive perfect weekends!\";\n            break;\n          default:\n            title = `Dedication ${milestone}`;\n            description = `${milestone} consecutive perfect weekends!`;\n        }\n        \n        achievements.push({\n          type: 'dedication',\n          title,\n          description,\n          metadata: {\n            consecutiveWeekends: milestone,\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Dedication achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Comeback achievements\nexport async function checkComebackAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30];\n    \n    for (const milestone of milestones) {\n      const isComeback = await checkIfComebackStreak(milestone);\n      \n      if (isComeback) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Fresh Start\";\n            description = \"3 days back on track after missing prayers!\";\n            break;\n          case 7:\n            title = \"Comeback Kid\";\n            description = \"1 week of prayers after a setback!\";\n            break;\n          case 15:\n            title = \"Resilient Soul\";\n            description = \"15 days of recovery and dedication!\";\n            break;\n          case 30:\n            title = \"Phoenix Rising\";\n            description = \"30 days of comeback dedication!\";\n            break;\n          default:\n            title = `Comeback ${milestone}`;\n            description = `${milestone} days of recovery after missed prayers!`;\n        }\n        \n        achievements.push({\n          type: 'comeback',\n          title,\n          description,\n          metadata: {\n            comebackDays: milestone,\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Comeback achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Monthly Champion achievements\nexport async function checkMonthlyChampionAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [1, 2, 3, 6, 12];\n    \n    for (const milestone of milestones) {\n      const perfectMonths = await countPerfectMonths();\n      \n      if (perfectMonths >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 1:\n            title = \"Monthly Achiever\";\n            description = \"First perfect month completed!\";\n            break;\n          case 2:\n            title = \"Bi-Monthly Champion\";\n            description = \"2 perfect months achieved!\";\n            break;\n          case 3:\n            title = \"Quarterly Master\";\n            description = \"3 perfect months completed!\";\n            break;\n          case 6:\n            title = \"Half-Year Champion\";\n            description = \"6 perfect months achieved!\";\n            break;\n          case 12:\n            title = \"Yearly Champion\";\n            description = \"12 perfect months - A full year!\";\n            break;\n          default:\n            title = `Monthly Champion ${milestone}`;\n            description = `${milestone} perfect months achieved!`;\n        }\n        \n        achievements.push({\n          type: 'monthly_champion',\n          title,\n          description,\n          metadata: {\n            perfectMonths: milestone,\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Monthly Champion achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Seasonal achievements\nexport async function checkSeasonalAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const currentMonth = new Date().getMonth() + 1; // 1-12\n    const currentYear = new Date().getFullYear();\n    \n    // Check for Ramadan (approximate - month 9 in Islamic calendar, but using month check for simplicity)\n    if (currentMonth === 4 && isEndOfMonth()) { // April as example Ramadan month\n      const monthProgress = await calculateMonthProgressFromAPI();\n      if (monthProgress === 100) {\n        achievements.push({\n          type: 'seasonal',\n          title: \"Ramadan Champion\",\n          description: \"Perfect prayers throughout the holy month!\",\n          metadata: {\n            specialMonth: 'Ramadan',\n            month: currentMonth,\n            year: currentYear,\n            earnedDate: getTodayString()\n          }\n        });\n      }\n    }\n    \n    // Check for perfect prayers during Dhul Hijjah (month 12)\n    if (currentMonth === 7 && isEndOfMonth()) { // July as example Dhul Hijjah month\n      const monthProgress = await calculateMonthProgressFromAPI();\n      if (monthProgress === 100) {\n        achievements.push({\n          type: 'seasonal',\n          title: \"Hajj Month Devotee\",\n          description: \"Perfect prayers during Dhul Hijjah!\",\n          metadata: {\n            specialMonth: 'Dhul Hijjah',\n            month: currentMonth,\n            year: currentYear,\n            earnedDate: getTodayString()\n          }\n        });\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Seasonal achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Helper function to check consecutive prayer completion for a specific prayer\nexport async function checkConsecutivePrayerCompletion(prayerType: 'fajr' | 'dhuhr' | 'asr' | 'maghrib' | 'isha', targetDays: number): Promise<number> {\n  try {\n    let consecutiveDays = 0;\n    const today = new Date();\n    \n    for (let i = 0; i < targetDays + 10; i++) { // Check a few extra days to be sure\n      const checkDate = new Date(today);\n      checkDate.setDate(today.getDate() - i);\n      const dateString = checkDate.toISOString().split('T')[0];\n      \n      const record = await apiService.getPrayerRecord(dateString);\n      \n      if (record && record.prayers && record.prayers[prayerType] && record.prayers[prayerType].completed) {\n        consecutiveDays++;\n      } else {\n        break; // Streak broken\n      }\n    }\n    \n    return consecutiveDays;\n  } catch (error) {\n    console.error(`Failed to check consecutive ${prayerType} completion:`, error);\n    return 0;\n  }\n}\n\n// Helper function to count perfect weekends\nexport async function countPerfectWeekends(): Promise<number> {\n  try {\n    const { startDate, endDate } = getDateRangeForPeriod('year');\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let perfectWeekends = 0;\n    const weekends: { [key: string]: { saturday: boolean; sunday: boolean } } = {};\n    \n    records.forEach(record => {\n      const date = new Date(record.date);\n      const dayOfWeek = date.getDay();\n      \n      if (dayOfWeek === 6 || dayOfWeek === 0) { // Saturday or Sunday\n        const weekKey = getWeekStart(date).toISOString().split('T')[0];\n        \n        if (!weekends[weekKey]) {\n          weekends[weekKey] = { saturday: false, sunday: false };\n        }\n        \n        if (record.prayers) {\n          const prayers = convertPrayerRecordToDailyPrayers(record);\n          if (prayers) {\n            const allCompleted = Object.values(prayers).every(prayer => prayer.completed);\n            if (dayOfWeek === 6) weekends[weekKey].saturday = allCompleted;\n            if (dayOfWeek === 0) weekends[weekKey].sunday = allCompleted;\n          }\n        }\n      }\n    });\n    \n    // Count weekends where both Saturday and Sunday were perfect\n    Object.values(weekends).forEach(weekend => {\n      if (weekend.saturday && weekend.sunday) {\n        perfectWeekends++;\n      }\n    });\n    \n    return perfectWeekends;\n  } catch (error) {\n    console.error('Failed to count perfect weekends:', error);\n    return 0;\n  }\n}\n\n// Helper function to check consecutive weekend streaks\nexport async function checkConsecutiveWeekendStreaks(): Promise<number> {\n  try {\n    let consecutiveWeekends = 0;\n    const today = new Date();\n    let currentWeekStart = getWeekStart(today);\n    \n    // Go back weekend by weekend\n    for (let i = 0; i < 52; i++) { // Check up to a year of weekends\n      const saturday = new Date(currentWeekStart);\n      saturday.setDate(currentWeekStart.getDate() + 5);\n      const sunday = new Date(currentWeekStart);\n      sunday.setDate(currentWeekStart.getDate() + 6);\n      \n      const saturdayRecord = await apiService.getPrayerRecord(saturday.toISOString().split('T')[0]);\n      const sundayRecord = await apiService.getPrayerRecord(sunday.toISOString().split('T')[0]);\n      \n      let weekendPerfect = true;\n      \n      // Check Saturday\n      if (saturdayRecord && saturdayRecord.prayers) {\n        const saturdayPrayers = convertPrayerRecordToDailyPrayers(saturdayRecord);\n        if (!saturdayPrayers || !Object.values(saturdayPrayers).every(prayer => prayer.completed)) {\n          weekendPerfect = false;\n        }\n      } else {\n        weekendPerfect = false;\n      }\n      \n      // Check Sunday\n      if (sundayRecord && sundayRecord.prayers) {\n        const sundayPrayers = convertPrayerRecordToDailyPrayers(sundayRecord);\n        if (!sundayPrayers || !Object.values(sundayPrayers).every(prayer => prayer.completed)) {\n          weekendPerfect = false;\n        }\n      } else {\n        weekendPerfect = false;\n      }\n      \n      if (weekendPerfect) {\n        consecutiveWeekends++;\n        currentWeekStart.setDate(currentWeekStart.getDate() - 7);\n      } else {\n        break;\n      }\n    }\n    \n    return consecutiveWeekends;\n  } catch (error) {\n    console.error('Failed to check consecutive weekend streaks:', error);\n    return 0;\n  }\n}\n\n// Helper function to check if current streak is a comeback after missed prayers\nexport async function checkIfComebackStreak(targetDays: number): Promise<boolean> {\n  try {\n    const today = new Date();\n    let currentStreak = 0;\n    let foundMissedPrayers = false;\n    \n    // Check current streak\n    for (let i = 0; i < targetDays + 5; i++) {\n      const checkDate = new Date(today);\n      checkDate.setDate(today.getDate() - i);\n      const dateString = checkDate.toISOString().split('T')[0];\n      \n      const record = await apiService.getPrayerRecord(dateString);\n      \n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          const allCompleted = Object.values(prayers).every(prayer => prayer.completed);\n          if (allCompleted) {\n            currentStreak++;\n          } else {\n            if (currentStreak >= targetDays) {\n              foundMissedPrayers = true;\n              break;\n            }\n            return false;\n          }\n        }\n      } else {\n        if (currentStreak >= targetDays) {\n          foundMissedPrayers = true;\n          break;\n        }\n        return false;\n      }\n    }\n    \n    return currentStreak >= targetDays && foundMissedPrayers;\n  } catch (error) {\n    console.error('Failed to check comeback streak:', error);\n    return false;\n  }\n}\n\n// Helper function to count perfect months\nexport async function countPerfectMonths(): Promise<number> {\n  try {\n    const { startDate, endDate } = getDateRangeForPeriod('year');\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    const months: { [key: string]: { completed: number; total: number } } = {};\n    \n    // Group records by month\n    records.forEach(record => {\n      const date = new Date(record.date);\n      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      \n      if (!months[monthKey]) {\n        months[monthKey] = { completed: 0, total: 0 };\n      }\n      \n      if (record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          months[monthKey].total++;\n          if (prayer.completed) {\n            months[monthKey].completed++;\n          }\n        });\n      } else {\n        months[monthKey].total += 5;\n      }\n    });\n    \n    // Count months with 100% completion\n    let perfectMonths = 0;\n    Object.values(months).forEach(month => {\n      if (month.total > 0 && month.completed === month.total) {\n        perfectMonths++;\n      }\n    });\n    \n    return perfectMonths;\n  } catch (error) {\n    console.error('Failed to count perfect months:', error);\n    return 0;\n  }\n}\n\n// Helper function to get Hijri date (simple approximation)\nexport function getHijriDate(gregorianDate?: Date): string {\n  const date = gregorianDate || new Date();\n  \n  // Hijri calendar is approximately 354 days long, so it's ~11 days shorter than Gregorian\n  // Hijri epoch: July 16, 622 CE (Gregorian)\n  const hijriEpoch = new Date(622, 6, 16).getTime();\n  const daysSinceEpoch = (date.getTime() - hijriEpoch) / (1000 * 60 * 60 * 24);\n  \n  // Approximate Hijri year (354.36 days per year)\n  const hijriYear = Math.floor(daysSinceEpoch / 354.36);\n  const dayInYear = Math.floor(daysSinceEpoch % 354.36);\n  \n  // Approximate month (29.5 days per month on average)\n  const month = Math.floor(dayInYear / 29.5) % 12;\n  const day = Math.floor(dayInYear % 29.5) + 1;\n  \n  const hijriMonths = [\n    \"Muharram\", \"Safar\", \"Rabi' I\", \"Rabi' II\", \"Jumada I\", \"Jumada II\",\n    \"Rajab\", \"Sha'ban\", \"Ramadan\", \"Shawwal\", \"Dhu al-Qi'dah\", \"Dhu al-Hijjah\"\n  ];\n  \n  return `${day} ${hijriMonths[month]} ${hijriYear}`;\n}\n\n// Helper function to get current time formatted\nexport function getCurrentTime(): string {\n  const now = new Date();\n  return now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });\n}\n\n// Helper function to determine current prayer based on time\nexport function getCurrentPrayer(): { name: string; emoji: string; key: string } | null {\n  const now = new Date();\n  const currentMinutes = now.getHours() * 60 + now.getMinutes();\n  \n  // Convert prayer times to minutes\n  const prayerMinutes = {\n    fajr: 5 * 60 + 30,     // 5:30 AM\n    dhuhr: 12 * 60 + 45,   // 12:45 PM\n    asr: 16 * 60 + 15,     // 4:15 PM\n    maghrib: 19 * 60 + 20, // 7:20 PM\n    isha: 20 * 60 + 45,    // 8:45 PM\n  };\n  \n  // Determine which prayer time is active\n  if (currentMinutes >= prayerMinutes.fajr && currentMinutes < prayerMinutes.dhuhr) {\n    return { name: 'Fajr', emoji: '🌅', key: 'fajr' };\n  } else if (currentMinutes >= prayerMinutes.dhuhr && currentMinutes < prayerMinutes.asr) {\n    return { name: 'Dhuhr', emoji: '☀️', key: 'dhuhr' };\n  } else if (currentMinutes >= prayerMinutes.asr && currentMinutes < prayerMinutes.maghrib) {\n    return { name: 'Asr', emoji: '🌤️', key: 'asr' };\n  } else if (currentMinutes >= prayerMinutes.maghrib && currentMinutes < prayerMinutes.isha) {\n    return { name: 'Maghrib', emoji: '🌅', key: 'maghrib' };\n  } else if (currentMinutes >= prayerMinutes.isha || currentMinutes < prayerMinutes.fajr) {\n    return { name: 'Isha', emoji: '⭐', key: 'isha' };\n  }\n  \n  return null;\n}\n\n// Helper function to get next prayer and countdown\nexport function getNextPrayer(): { name: string; emoji: string; key: string; countdown: string } {\n  const now = new Date();\n  const currentMinutes = now.getHours() * 60 + now.getMinutes();\n  \n  // Convert prayer times to minutes\n  const prayers = [\n    { name: 'Fajr', emoji: '🌅', key: 'fajr', minutes: 5 * 60 + 30 },\n    { name: 'Dhuhr', emoji: '☀️', key: 'dhuhr', minutes: 12 * 60 + 45 },\n    { name: 'Asr', emoji: '🌤️', key: 'asr', minutes: 16 * 60 + 15 },\n    { name: 'Maghrib', emoji: '🌅', key: 'maghrib', minutes: 19 * 60 + 20 },\n    { name: 'Isha', emoji: '⭐', key: 'isha', minutes: 20 * 60 + 45 },\n  ];\n  \n  // Find next prayer\n  let nextPrayer = prayers.find(p => p.minutes > currentMinutes);\n  let minutesUntil;\n  \n  if (!nextPrayer) {\n    // Next prayer is Fajr tomorrow\n    nextPrayer = prayers[0];\n    minutesUntil = (24 * 60 - currentMinutes) + prayers[0].minutes;\n  } else {\n    minutesUntil = nextPrayer.minutes - currentMinutes;\n  }\n  \n  // Format countdown\n  const hours = Math.floor(minutesUntil / 60);\n  const minutes = minutesUntil % 60;\n  const countdown = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n  \n  return {\n    name: nextPrayer.name,\n    emoji: nextPrayer.emoji,\n    key: nextPrayer.key,\n    countdown,\n  };\n}\n\n// Helper function to format date for display\nexport function formatDateForDisplay(date: Date): string {\n  const options: Intl.DateTimeFormatOptions = { day: 'numeric', month: 'long' };\n  return date.toLocaleDateString('en-US', options);\n}\n\n// Helper function to get calendar dates for week view with prayer data\nexport async function getCalendarWeekData(startDate: Date): Promise<Array<{\n  date: string;\n  dayName: string;\n  dayNumber: number;\n  isToday: boolean;\n  completionPercentage: number;\n}>> {\n  const dates: Array<{\n    date: string;\n    dayName: string;\n    dayNumber: number;\n    isToday: boolean;\n    completionPercentage: number;\n  }> = [];\n  \n  const today = new Date().toISOString().split('T')[0];\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  \n  for (let i = 0; i < 7; i++) {\n    const currentDate = new Date(startDate);\n    currentDate.setDate(startDate.getDate() + i);\n    const dateString = currentDate.toISOString().split('T')[0];\n    \n    // Get prayer data for this date\n    let completionPercentage = 0;\n    try {\n      const record = await apiService.getPrayerRecord(dateString);\n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          const completed = getTodayCompletedCount(prayers);\n          completionPercentage = Math.round((completed / 5) * 100);\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to get prayer data for date:', dateString, error);\n    }\n    \n    dates.push({\n      date: dateString,\n      dayName: dayNames[currentDate.getDay()],\n      dayNumber: currentDate.getDate(),\n      isToday: dateString === today,\n      completionPercentage,\n    });\n  }\n  \n  return dates;\n}\n\n// Helper function to get calendar dates for month view with prayer data\nexport async function getCalendarMonthData(monthDate: Date): Promise<Array<{\n  date: string;\n  dayNumber: number;\n  isToday: boolean;\n  isCurrentMonth: boolean;\n  completionPercentage: number;\n}>> {\n  const year = monthDate.getFullYear();\n  const month = monthDate.getMonth();\n  \n  // Get first day of month\n  const firstDay = new Date(year, month, 1);\n  const lastDay = new Date(year, month + 1, 0);\n  \n  // Get day of week for first day (0 = Sunday)\n  const firstDayOfWeek = firstDay.getDay();\n  \n  // Calculate how many days from previous month to show\n  const daysFromPrevMonth = firstDayOfWeek;\n  \n  // Calculate start date (including previous month days)\n  const startDate = new Date(firstDay);\n  startDate.setDate(firstDay.getDate() - daysFromPrevMonth);\n  \n  const dates: Array<{\n    date: string;\n    dayNumber: number;\n    isToday: boolean;\n    isCurrentMonth: boolean;\n    completionPercentage: number;\n  }> = [];\n  \n  const today = new Date().toISOString().split('T')[0];\n  \n  // Generate 42 days (6 weeks) for calendar grid\n  for (let i = 0; i < 42; i++) {\n    const currentDate = new Date(startDate);\n    currentDate.setDate(startDate.getDate() + i);\n    const dateString = currentDate.toISOString().split('T')[0];\n    \n    // Get prayer data for this date\n    let completionPercentage = 0;\n    try {\n      const record = await apiService.getPrayerRecord(dateString);\n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          const completed = getTodayCompletedCount(prayers);\n          completionPercentage = Math.round((completed / 5) * 100);\n        }\n      }\n    } catch (error) {\n      // Silently fail for dates without data\n    }\n    \n    dates.push({\n      date: dateString,\n      dayNumber: currentDate.getDate(),\n      isToday: dateString === today,\n      isCurrentMonth: currentDate.getMonth() === month,\n      completionPercentage,\n    });\n  }\n  \n  return dates;\n}\n\n// Helper function to format date range for calendar view\nexport function formatDateRange(viewType: 'week' | 'month', startDate: Date): string {\n  if (viewType === 'week') {\n    const endDate = new Date(startDate);\n    endDate.setDate(startDate.getDate() + 6);\n    \n    const startMonth = startDate.toLocaleDateString('en-US', { month: 'long' });\n    const endMonth = endDate.toLocaleDateString('en-US', { month: 'long' });\n    const year = endDate.getFullYear();\n    \n    if (startMonth === endMonth) {\n      return `${startMonth} ${year}`;\n    } else {\n      return `${startMonth} - ${endMonth} ${year}`;\n    }\n  } else {\n    return startDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n  }\n}\n","size_bytes":79679},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/achievements.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Flame, Clock, Mountain, Calendar, Target, Trophy, Star } from 'lucide-react';\nimport { AchievementCard, MilestoneProgress } from '../components/achievement-card';\nimport { usePrayer } from '../contexts/prayer-context';\nimport { Achievement, UserStats } from '@shared/schema';\nimport { apiService } from '@/lib/api-service';\nimport { getPeriodSummary } from '@/lib/prayer-utils';\n\nexport default function Achievements() {\n  const { currentStreak, isLoading: contextLoading } = usePrayer();\n  const [achievements, setAchievements] = useState<Achievement[]>([]);\n  const [userStats, setUserStats] = useState<UserStats | null>(null);\n  const [milestones, setMilestones] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [monthSummary, setMonthSummary] = useState<any>(null);\n  const [weekSummary, setWeekSummary] = useState<any>(null);\n\n  useEffect(() => {\n    loadAchievementsData();\n  }, []);\n\n  const loadAchievementsData = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Load achievements and user stats from API\n      const [achievementsData, statsData] = await Promise.all([\n        apiService.getAchievements(),\n        apiService.getUserStats()\n      ]);\n      \n      setAchievements(achievementsData);\n      setUserStats(statsData);\n      \n      // Load analytics data for milestones\n      const [monthData, weekData] = await Promise.all([\n        getPeriodSummary('month').catch(() => ({ successRate: 0, totalPrayers: 0, onTimePrayers: 0 })),\n        getPeriodSummary('week').catch(() => ({ successRate: 0, totalPrayers: 0, onTimePrayers: 0 }))\n      ]);\n      \n      setMonthSummary(monthData);\n      setWeekSummary(weekData);\n      \n      // Calculate milestones based on real data\n      const calculatedMilestones = calculateMilestones(statsData, monthData, weekData);\n      setMilestones(calculatedMilestones);\n      \n    } catch (error) {\n      console.error('Failed to load achievements data:', error);\n      // Fallback to localStorage for achievements if API fails\n      const storedAchievements = localStorage.getItem('achievements');\n      if (storedAchievements) {\n        setAchievements(JSON.parse(storedAchievements));\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const calculateMilestones = (stats: UserStats, monthData: any, weekData: any) => {\n    const currentMonth = new Date().getMonth();\n    const daysInMonth = new Date(new Date().getFullYear(), currentMonth + 1, 0).getDate();\n    const maxMonthlyPrayers = daysInMonth * 5;\n    \n    return [\n      {\n        title: \"7-Day Streak\",\n        description: \"Complete prayers for 7 consecutive days\",\n        current: Math.min(currentStreak, 7),\n        target: 7,\n        icon: Flame,\n        color: \"bg-orange-500\",\n      },\n      {\n        title: \"30-Day Streak\",\n        description: \"Complete prayers for 30 consecutive days\",\n        current: Math.min(currentStreak, 30),\n        target: 30,\n        icon: Calendar,\n        color: \"bg-primary\",\n      },\n      {\n        title: \"100-Day Streak\",\n        description: \"Complete prayers for 100 consecutive days\",\n        current: Math.min(currentStreak, 100),\n        target: 100,\n        icon: Trophy,\n        color: \"bg-yellow-500\",\n      },\n      {\n        title: \"Prayer Master\",\n        description: \"Complete 1000 prayers total\",\n        current: Math.min(stats.totalPrayers || 0, 1000),\n        target: 1000,\n        icon: Target,\n        color: \"bg-green-500\",\n      },\n      {\n        title: \"Weekly Consistency\",\n        description: \"80%+ prayer completion this week\",\n        current: weekData.successRate || 0,\n        target: 80,\n        icon: Star,\n        color: \"bg-blue-500\",\n      },\n      {\n        title: \"Monthly Devotee\",\n        description: \"Complete 80% of prayers this month\",\n        current: monthData.successRate || 0,\n        target: 80,\n        icon: Mountain,\n        color: \"bg-purple-500\",\n      },\n    ];\n  };\n\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"page-achievements\">\n      <h2 className=\"text-2xl font-bold text-center\" data-testid=\"text-achievements-title\">\n        Achievements\n      </h2>\n      \n      {/* Current Streak Card */}\n      <div className=\"glass-card rounded-2xl p-6 text-center animate-float\">\n        <div className=\"w-20 h-20 bg-gradient-to-br from-secondary to-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Flame className=\"w-8 h-8 text-white\" />\n        </div>\n        <h3 className=\"text-xl font-bold text-foreground mb-2\" data-testid=\"text-current-streak-title\">\n          Current Streak\n        </h3>\n        <p className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-current-streak-value\">\n          {currentStreak} Days\n        </p>\n        <p className=\"text-muted-foreground\">\n          Keep going! Your best streak is{' '}\n          <span className=\"font-semibold\" data-testid=\"text-best-streak\">\n            {Math.max(userStats?.bestStreak || 0, currentStreak)} days\n          </span>\n        </p>\n        {userStats && (\n          <div className=\"mt-4 grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <p className=\"text-muted-foreground\">Total Prayers</p>\n              <p className=\"font-semibold text-primary\">{userStats.totalPrayers || 0}</p>\n            </div>\n            <div>\n              <p className=\"text-muted-foreground\">On-Time Prayers</p>\n              <p className=\"font-semibold text-green-600\">{userStats.onTimePrayers || 0}</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Achievement Cards Grid */}\n      {achievements.length > 0 ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {achievements.map((achievement, index) => (\n            <AchievementCard \n              key={achievement.id} \n              achievement={achievement} \n              index={index}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"glass-card rounded-2xl p-8 text-center\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Calendar className=\"w-8 h-8 text-muted-foreground\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-no-achievements\">\n            No Achievements Yet\n          </h3>\n          <p className=\"text-muted-foreground\">\n            Complete your first perfect week to unlock your first achievement!\n          </p>\n        </div>\n      )}\n\n      {/* Milestone Progress */}\n      <div className=\"glass-card rounded-2xl p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-milestones-title\">\n          Milestones\n        </h3>\n        {isLoading || contextLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-muted rounded-full\"></div>\n                    <div>\n                      <div className=\"h-4 bg-muted rounded w-32 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-48\"></div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"h-4 bg-muted rounded w-16 mb-2\"></div>\n                    <div className=\"w-20 h-2 bg-muted rounded-full\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {milestones.map((milestone) => (\n              <MilestoneProgress\n                key={milestone.title}\n                title={milestone.title}\n                description={milestone.description}\n                current={milestone.current}\n                target={milestone.target}\n                icon={milestone.icon}\n                color={milestone.color}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8174},"client/src/pages/analytics.tsx":{"content":"import { AnalyticsCharts } from '../components/analytics-charts';\n\nexport default function Analytics() {\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-analytics\">\n      <h2 className=\"text-2xl font-bold text-center\" data-testid=\"text-analytics-title\">\n        Analytics\n      </h2>\n      <AnalyticsCharts />\n    </div>\n  );\n}\n","size_bytes":340},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { PrayerTracker } from '../components/prayer-tracker';\nimport { WeeklyProgress, WeeklyOverview } from '../components/weekly-progress';\nimport { \n  getHijriDate, \n  formatDateForDisplay, \n  getCurrentPrayer, \n  getNextPrayer,\n  getCurrentTime\n} from '../lib/prayer-utils';\n\nexport default function Dashboard() {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [currentTime, setCurrentTime] = useState(getCurrentTime());\n  const [nextPrayer, setNextPrayer] = useState(getNextPrayer());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(getCurrentTime());\n      setNextPrayer(getNextPrayer());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const currentPrayer = getCurrentPrayer();\n  const hijriDate = getHijriDate(selectedDate);\n  const isToday = selectedDate.toDateString() === new Date().toDateString();\n\n  const navigateDate = (direction: 'prev' | 'next') => {\n    const newDate = new Date(selectedDate);\n    newDate.setDate(selectedDate.getDate() + (direction === 'next' ? 1 : -1));\n    setSelectedDate(newDate);\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-dashboard\">\n      {/* Calendar Date Display */}\n      <div className=\"glass-card rounded-2xl p-6\" data-testid=\"calendar-date-display\">\n        <div className=\"flex items-center justify-between\">\n          <button\n            onClick={() => navigateDate('prev')}\n            className=\"p-2 hover:bg-muted/20 rounded-full transition-colors\"\n            data-testid=\"button-prev-date\"\n            aria-label=\"Previous day\"\n          >\n            <ChevronLeft className=\"w-5 h-5\" />\n          </button>\n\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-current-date\">\n              {isToday ? 'Today' : ''}{isToday ? ', ' : ''}{formatDateForDisplay(selectedDate)}\n            </h2>\n            <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-hijri-date\">\n              {hijriDate}\n            </p>\n          </div>\n\n          <button\n            onClick={() => navigateDate('next')}\n            className=\"p-2 hover:bg-muted/20 rounded-full transition-colors\"\n            data-testid=\"button-next-date\"\n            aria-label=\"Next day\"\n          >\n            <ChevronRight className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Current Prayer Time Card */}\n      {currentPrayer && (\n        <div className=\"glass-card rounded-2xl p-6\" data-testid=\"current-prayer-card\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <span className=\"px-3 py-1 bg-primary/20 text-primary rounded-full text-xs font-semibold\" data-testid=\"badge-now\">\n                Now\n              </span>\n              <div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-3xl\" data-testid=\"emoji-current-prayer\">{currentPrayer.emoji}</span>\n                  <h3 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-current-prayer-name\">\n                    {currentPrayer.name}\n                  </h3>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-next-prayer-countdown\">\n                  {nextPrayer.name} in {nextPrayer.countdown}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"text-4xl font-bold text-primary\" data-testid=\"text-current-time\">\n                {currentTime}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <section>\n        <h2 className=\"text-2xl font-bold mb-6 text-center\" data-testid=\"text-page-title\">\n          Today's Prayers\n        </h2>\n        <PrayerTracker />\n      </section>\n\n      <WeeklyProgress />\n      <WeeklyOverview />\n    </div>\n  );\n}\n","size_bytes":4077},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 right-0 z-[100] flex max-h-screen flex-col p-4 md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 rounded-lg p-6 pr-8 transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full\",\n  {\n    variants: {\n      variant: {\n        default: \"glass-toast text-foreground\",\n        destructive:\n          \"destructive group glass-toast-destructive text-white\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4675},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { config } from \"dotenv\";\nconfig(); // Ensure env vars are loaded\n\n// Use memory database if no DATABASE_URL (for demo/development)\nlet db: any = null;\n\nif (process.env.DATABASE_URL) {\n  const client = postgres(process.env.DATABASE_URL);\n  db = drizzle(client);\n} else {\n  console.log(\"No DATABASE_URL found - using memory storage only\");\n  db = null; // Will use MemStorage\n}\n\nexport { db };\n","size_bytes":484},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\n// Keep track of registered strategies\nconst registeredStrategies = new Set<string>();\n\n// Helper function to register a strategy dynamically\nasync function ensureStrategyRegistered(hostname: string, config: any, verify: VerifyFunction): Promise<void> {\n  const strategyName = `replitauth:${hostname}`;\n  \n  if (!registeredStrategies.has(strategyName)) {\n    console.log(`Registering strategy dynamically for hostname: ${hostname}`);\n    const strategy = new Strategy(\n      {\n        name: strategyName,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${hostname}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n    registeredStrategies.add(strategyName);\n    console.log(`Successfully registered strategy for: ${hostname}`);\n  }\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  // Register strategies for configured domains\n  const configuredDomains = process.env.REPLIT_DOMAINS!.split(\",\");\n  console.log(\"Configured domains:\", configuredDomains);\n  \n  for (const domain of configuredDomains) {\n    const strategyName = `replitauth:${domain}`;\n    const strategy = new Strategy(\n      {\n        name: strategyName,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n    registeredStrategies.add(strategyName);\n    console.log(`Registered strategy for domain: ${domain}`);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", async (req, res, next) => {\n    console.log(`Login attempt for hostname: ${req.hostname}`);\n    \n    // Ensure strategy is registered for this hostname\n    await ensureStrategyRegistered(req.hostname, config, verify);\n    \n    const strategyName = `replitauth:${req.hostname}`;\n    passport.authenticate(strategyName, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", async (req, res, next) => {\n    console.log(`Callback attempt for hostname: ${req.hostname}`);\n    \n    // Ensure strategy is registered for this hostname\n    await ensureStrategyRegistered(req.hostname, config, verify);\n    \n    const strategyName = `replitauth:${req.hostname}`;\n    passport.authenticate(strategyName, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":5809},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport type { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: () => void;\n  logout: () => void;\n  refetchUser: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Always use JWT auth for local development\n// In production on Replit, use the server-side detection\nconst isCustomAuth = true;\n\n// Custom auth functions\nconst getAuthToken = () => localStorage.getItem('authToken');\nconst setAuthToken = (token: string) => localStorage.setItem('authToken', token);\nconst removeAuthToken = () => localStorage.removeItem('authToken');\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function useAuthQuery() {\n  const queryClient = useQueryClient();\n  const [customUser, setCustomUser] = useState<User | null>(null);\n  const [customLoading, setCustomLoading] = useState(true);\n\n  // For custom JWT auth, check token and fetch user\n  useEffect(() => {\n    if (isCustomAuth) {\n      const token = getAuthToken();\n      if (token) {\n        // Verify token by fetching user\n        fetch('/api/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        })\n        .then(res => res.json())\n        .then(setCustomUser)\n        .catch(() => {\n          removeAuthToken();\n          setCustomUser(null);\n        })\n        .finally(() => setCustomLoading(false));\n      } else {\n        setCustomUser(null);\n        setCustomLoading(false);\n      }\n    }\n  }, []);\n\n  const {\n    data: sessionUser,\n    isLoading: sessionLoading,\n    error,\n    refetch: refetchSessionUser\n  } = useQuery<User | null>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n    refetchOnWindowFocus: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    enabled: !isCustomAuth, // Only run for session auth\n  });\n\n  const user = isCustomAuth ? customUser : sessionUser;\n  const isLoading = isCustomAuth ? customLoading : sessionLoading;\n  const isAuthenticated = !!user;\n\n  const login = () => {\n    if (isCustomAuth) {\n      window.location.href = '/login';\n    } else {\n      window.location.href = '/api/login';\n    }\n  };\n\n  const logout = () => {\n    if (isCustomAuth) {\n      removeAuthToken();\n      setCustomUser(null);\n      window.location.href = '/';\n    } else {\n      queryClient.clear();\n      window.location.href = '/api/logout';\n    }\n  };\n\n  const refetchUser = () => {\n    if (isCustomAuth) {\n      const token = getAuthToken();\n      if (token) {\n        setCustomLoading(true);\n        fetch('/api/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        })\n        .then(res => res.json())\n        .then(setCustomUser)\n        .catch(() => {\n          removeAuthToken();\n          setCustomUser(null);\n        })\n        .finally(() => setCustomLoading(false));\n      }\n    } else {\n      refetchSessionUser();\n    }\n  };\n\n  return {\n    user: user || null,\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    refetchUser,\n  };\n}\n\nexport { AuthContext };\nexport type { AuthContextType };\n","size_bytes":3398},"client/src/lib/authUtils.ts":{"content":"import { toast } from '@/hooks/use-toast';\n\nexport function handleAuthError(error: any) {\n  if (error?.message?.includes('401') || error?.message?.includes('Unauthorized')) {\n    toast({\n      title: \"Session Expired\",\n      description: \"Please log in again to continue using the app.\",\n      variant: \"destructive\",\n    });\n    \n    // Redirect to login after a short delay\n    setTimeout(() => {\n      window.location.href = '/api/login';\n    }, 2000);\n    \n    return true; // Indicates this was an auth error\n  }\n  \n  return false; // Not an auth error\n}\n\nexport function createAuthAwareQuery<T>(queryFn: () => Promise<T>) {\n  return async () => {\n    try {\n      return await queryFn();\n    } catch (error: any) {\n      if (handleAuthError(error)) {\n        throw error; // Re-throw to maintain query error state\n      }\n      throw error;\n    }\n  };\n}\n\nexport function createAuthAwareMutation<T, U>(mutationFn: (data: T) => Promise<U>) {\n  return async (data: T) => {\n    try {\n      return await mutationFn(data);\n    } catch (error: any) {\n      if (handleAuthError(error)) {\n        throw error; // Re-throw to maintain mutation error state\n      }\n      throw error;\n    }\n  };\n}\n\nexport function isAuthError(error: any): boolean {\n  return error?.message?.includes('401') || error?.message?.includes('Unauthorized');\n}","size_bytes":1330},"client/src/pages/landing.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ThemeToggle } from '@/components/theme-toggle';\nimport { Calendar, Trophy, BarChart3, Clock, Zap, Star } from 'lucide-react';\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = '/api/login';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-purple-900 dark:to-indigo-900\">\n      {/* Header */}\n      <header className=\"glass-nav fixed top-0 left-0 right-0 z-50 px-4 py-3 m-4 rounded-2xl\" data-testid=\"header-landing\">\n        <div className=\"flex items-center justify-between max-w-6xl mx-auto\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-lg\">🕌</span>\n            </div>\n            <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-title\">\n              Namaz Tracker\n            </h1>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <ThemeToggle />\n            <Button \n              onClick={handleLogin}\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-login-header\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"pt-24 pb-8 px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16 space-y-6\">\n            <div className=\"space-y-4\">\n              <Badge variant=\"secondary\" className=\"text-sm px-4 py-2\" data-testid=\"badge-spiritual\">\n                ✨ Strengthen Your Spiritual Journey\n              </Badge>\n              <h1 className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\" data-testid=\"text-hero-title\">\n                Track Your Daily Prayers\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed\" data-testid=\"text-hero-description\">\n                Never miss a prayer again. Build consistent habits, track your spiritual progress, and earn achievements along your journey.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Button \n                size=\"lg\" \n                onClick={handleLogin}\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-3 text-lg rounded-full shadow-lg\"\n                data-testid=\"button-login-hero\"\n              >\n                Start Tracking Today\n              </Button>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-free-signup\">\n                Free to use • Secure with Replit Auth\n              </p>\n            </div>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16\">\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-tracking\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center mb-4\">\n                  <Calendar className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Daily Prayer Tracking</CardTitle>\n                <CardDescription>\n                  Log your 5 daily prayers and track completion times\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-analytics\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mb-4\">\n                  <BarChart3 className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Progress Analytics</CardTitle>\n                <CardDescription>\n                  Visualize your prayer consistency with beautiful charts\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-achievements\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mb-4\">\n                  <Trophy className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Achievements</CardTitle>\n                <CardDescription>\n                  Earn badges and celebrate your spiritual milestones\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-streaks\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center mb-4\">\n                  <Zap className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Prayer Streaks</CardTitle>\n                <CardDescription>\n                  Build momentum with daily prayer streaks and habits\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-timing\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center mb-4\">\n                  <Clock className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">On-Time Tracking</CardTitle>\n                <CardDescription>\n                  Monitor if you're praying within the prescribed times\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-insights\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-teal-500 to-green-500 rounded-full flex items-center justify-center mb-4\">\n                  <Star className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Weekly Insights</CardTitle>\n                <CardDescription>\n                  Get detailed insights into your weekly prayer patterns\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n\n          {/* CTA Section */}\n          <div className=\"text-center space-y-6\">\n            <div className=\"glass-card p-8 rounded-3xl border-0 shadow-2xl max-w-2xl mx-auto\" data-testid=\"card-cta\">\n              <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"text-cta-title\">\n                Ready to Begin Your Journey?\n              </h2>\n              <p className=\"text-muted-foreground mb-6 text-lg\" data-testid=\"text-cta-description\">\n                Join thousands of Muslims who are strengthening their prayer habits with Namaz Tracker.\n              </p>\n              <Button \n                size=\"lg\" \n                onClick={handleLogin}\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-12 py-4 text-lg rounded-full shadow-lg\"\n                data-testid=\"button-login-cta\"\n              >\n                Get Started Now\n              </Button>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":8238},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298},"client/src/components/qaza-prayer-manager.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Calendar as CalendarIcon, Save, X, Sun, Cloud, Star, Clock } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiService, convertPrayerRecordToDailyPrayers } from '@/lib/api-service';\nimport { prayerNames, getPastWeeks, getWeeksFromJanuary, getPastMonthsFromJanuary, calculateWeekCompletion, calculateMonthCompletion, isWeekInFuture } from '@/lib/prayer-utils';\nimport { PrayerType, PrayerRecord } from '@shared/schema';\nimport { DailyPrayers } from '@/contexts/prayer-context';\nimport { apiRequest } from '@/lib/queryClient';\nimport { createAuthAwareQuery } from '@/lib/authUtils';\n\nconst prayerIcons = {\n  fajr: Sun,\n  dhuhr: Sun,\n  asr: Cloud,\n  maghrib: Star,\n  isha: Star,\n};\n\nconst prayerColors = {\n  fajr: 'bg-primary/10 text-primary',\n  dhuhr: 'bg-secondary/10 text-secondary',\n  asr: 'bg-accent/10 text-accent',\n  maghrib: 'bg-destructive/10 text-destructive',\n  isha: 'bg-primary/10 text-primary',\n};\n\nconst defaultPrayers: DailyPrayers = {\n  fajr: { completed: false, onTime: false },\n  dhuhr: { completed: false, onTime: false },\n  asr: { completed: false, onTime: false },\n  maghrib: { completed: false, onTime: false },\n  isha: { completed: false, onTime: false },\n};\n\nexport function QazaPrayerManager() {\n  // Tab state\n  const [activeTab, setActiveTab] = useState<\"daily\" | \"weekly\" | \"monthly\">(\"daily\");\n  \n  // Daily view state\n  const [selectedDate, setSelectedDate] = useState<Date>(() => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    return yesterday;\n  });\n  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);\n  const [editedPrayers, setEditedPrayers] = useState<DailyPrayers>(defaultPrayers);\n  const [originalPrayers, setOriginalPrayers] = useState<DailyPrayers>(defaultPrayers);\n  const [hasChanges, setHasChanges] = useState(false);\n  \n  // Weekly view state\n  const [selectedWeeks, setSelectedWeeks] = useState<Set<string>>(new Set());\n  const [isMarkingAsCompleted, setIsMarkingAsCompleted] = useState(true);\n  const [weeklyHasChanges, setWeeklyHasChanges] = useState(false);\n  const [pastWeeks, setPastWeeks] = useState<Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    weekLabel: string;\n  }>>([]);\n  \n  // Monthly view state\n  const [selectedMonths, setSelectedMonths] = useState<Set<string>>(new Set());\n  const [isMonthMarkingAsCompleted, setIsMonthMarkingAsCompleted] = useState(true);\n  const [monthlyHasChanges, setMonthlyHasChanges] = useState(false);\n  const [pastMonths, setPastMonths] = useState<Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    monthLabel: string;\n    monthName: string;\n    year: number;\n  }>>([]);\n  \n  // Confirmation dialog state\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [confirmationDetails, setConfirmationDetails] = useState<{\n    weekCount: number;\n    dateCount: number;\n    prayerCount: number;\n    action: 'completed' | 'missed';\n    dateRange: { start: string; end: string };\n  } | null>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const selectedDateString = selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '';\n\n  // Fetch prayer data for selected date\n  const { data: prayerRecord, isLoading: isLoadingPrayers, refetch } = useQuery<PrayerRecord | null>({\n    queryKey: ['/api/prayers', selectedDateString],\n    queryFn: createAuthAwareQuery(() => apiService.getPrayerRecord(selectedDateString)),\n    enabled: !!selectedDateString,\n    staleTime: 0, // Always refetch to get latest data\n  });\n\n  // Save prayer changes mutation (daily)\n  const savePrayersMutation = useMutation({\n    mutationFn: async (data: { date: string; prayers: DailyPrayers }) => {\n      const response = await apiRequest('POST', '/api/prayers', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Changes Saved! ✅\",\n        description: \"Prayer record has been updated successfully.\",\n      });\n      \n      // Invalidate and refetch relevant queries for cache consistency\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats/yearly-qaza'] });\n      \n      // Invalidate analytics queries for all periods to ensure real-time sync\n      ['week', 'month', 'year'].forEach(period => {\n        queryClient.invalidateQueries({ queryKey: ['/analytics/trend', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/data', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/summary', period] });\n      });\n      \n      // Update original prayers to reflect saved state\n      setOriginalPrayers(editedPrayers);\n      setHasChanges(false);\n    },\n    onError: (error) => {\n      console.error('Failed to save prayer record:', error);\n      toast({\n        title: \"Save Failed ❌\",\n        description: \"Failed to save changes. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Batch update mutation (weekly)\n  const batchUpdateMutation = useMutation({\n    mutationFn: async (updates: Array<{ date: string; prayers: DailyPrayers }>) => {\n      return await apiService.batchUpdatePrayerRecords(updates);\n    },\n    onSuccess: (data, variables) => {\n      const weekCount = selectedWeeks.size;\n      const prayerCount = variables.length;\n      const action = isMarkingAsCompleted ? 'completed' : 'missed';\n      \n      toast({\n        title: \"Batch Update Successful! ✅\",\n        description: `${weekCount} week(s) with ${prayerCount} prayer records marked as ${action}.`,\n      });\n      \n      // Invalidate and refetch relevant queries for cache consistency\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats/yearly-qaza'] });\n      \n      // Invalidate analytics queries for all periods to ensure real-time sync\n      ['week', 'month', 'year'].forEach(period => {\n        queryClient.invalidateQueries({ queryKey: ['/analytics/trend', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/data', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/summary', period] });\n      });\n      \n      // Reset weekly selections\n      setSelectedWeeks(new Set());\n      setWeeklyHasChanges(false);\n    },\n    onError: (error) => {\n      console.error('Failed to batch update prayer records:', error);\n      toast({\n        title: \"Batch Update Failed ❌\",\n        description: \"Failed to update prayer records. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update prayers when data is fetched\n  useEffect(() => {\n    if (prayerRecord) {\n      const prayers = convertPrayerRecordToDailyPrayers(prayerRecord);\n      if (prayers) {\n        setEditedPrayers(prayers);\n        setOriginalPrayers(prayers);\n        setHasChanges(false);\n      }\n    } else if (selectedDateString) {\n      // No data for this date, use default prayers\n      setEditedPrayers(defaultPrayers);\n      setOriginalPrayers(defaultPrayers);\n      setHasChanges(false);\n    }\n  }, [prayerRecord, selectedDateString]);\n\n  // Load past weeks and months when component mounts\n  useEffect(() => {\n    const weeks = getWeeksFromJanuary(); // Get weeks from January 1st to current\n    setPastWeeks(weeks);\n    \n    const months = getPastMonthsFromJanuary(); // Get months from January to current (excluding current)\n    setPastMonths(months);\n  }, []);\n\n  // Check if prayers have changed from original\n  useEffect(() => {\n    const changed = Object.keys(editedPrayers).some(prayer => {\n      const prayerKey = prayer as PrayerType;\n      return editedPrayers[prayerKey].completed !== originalPrayers[prayerKey].completed;\n    });\n    setHasChanges(changed);\n  }, [editedPrayers, originalPrayers]);\n\n  // Check if weekly selections have changed\n  useEffect(() => {\n    setWeeklyHasChanges(selectedWeeks.size > 0);\n  }, [selectedWeeks]);\n  \n  // Check if monthly selections have changed\n  useEffect(() => {\n    setMonthlyHasChanges(selectedMonths.size > 0);\n  }, [selectedMonths]);\n\n  const handleDateSelect = (date: Date | undefined) => {\n    if (date && date <= new Date()) {\n      setSelectedDate(date);\n      setIsDatePickerOpen(false);\n    }\n  };\n\n  const togglePrayer = (prayer: PrayerType) => {\n    const currentTime = new Date().toISOString();\n    setEditedPrayers(prev => ({\n      ...prev,\n      [prayer]: {\n        ...prev[prayer],\n        completed: !prev[prayer].completed,\n        completedAt: !prev[prayer].completed ? currentTime : undefined,\n      }\n    }));\n  };\n\n  const handleSave = () => {\n    if (!selectedDateString) return;\n    \n    savePrayersMutation.mutate({\n      date: selectedDateString,\n      prayers: editedPrayers,\n    });\n  };\n\n  const handleCancel = () => {\n    setEditedPrayers(originalPrayers);\n    setHasChanges(false);\n  };\n\n  // Weekly handlers\n  const toggleWeekSelection = (weekKey: string) => {\n    const newSelected = new Set(selectedWeeks);\n    if (newSelected.has(weekKey)) {\n      newSelected.delete(weekKey);\n    } else {\n      newSelected.add(weekKey);\n    }\n    setSelectedWeeks(newSelected);\n  };\n\n  const selectAllWeeks = () => {\n    const allWeekKeys = pastWeeks.map(week => `${week.startDate}-${week.endDate}`);\n    setSelectedWeeks(new Set(allWeekKeys));\n  };\n\n  const clearWeekSelection = () => {\n    setSelectedWeeks(new Set());\n  };\n\n  const handleBatchUpdate = () => {\n    // Check if either weeks or months are selected\n    if (selectedWeeks.size === 0 && selectedMonths.size === 0) return;\n\n    // Calculate batch update details\n    const updates: Array<{ date: string; prayers: DailyPrayers }> = [];\n    let earliestDate: string | null = null;\n    let latestDate: string | null = null;\n    \n    // Handle weekly updates\n    if (selectedWeeks.size > 0) {\n      selectedWeeks.forEach(weekKey => {\n        const week = pastWeeks.find(w => `${w.startDate}-${w.endDate}` === weekKey);\n        if (week) {\n          week.dates.forEach(date => {\n            if (!earliestDate || date < earliestDate) earliestDate = date;\n            if (!latestDate || date > latestDate) latestDate = date;\n            \n            const prayers: DailyPrayers = {\n              fajr: { completed: isMarkingAsCompleted, onTime: false },\n              dhuhr: { completed: isMarkingAsCompleted, onTime: false },\n              asr: { completed: isMarkingAsCompleted, onTime: false },\n              maghrib: { completed: isMarkingAsCompleted, onTime: false },\n              isha: { completed: isMarkingAsCompleted, onTime: false },\n            };\n            updates.push({ date, prayers });\n          });\n        }\n      });\n    }\n\n    // Handle monthly updates\n    if (selectedMonths.size > 0) {\n      selectedMonths.forEach(monthKey => {\n        const month = pastMonths.find(m => `${m.monthName}-${m.year}` === monthKey);\n        if (month) {\n          month.dates.forEach(date => {\n            if (!earliestDate || date < earliestDate) earliestDate = date;\n            if (!latestDate || date > latestDate) latestDate = date;\n            \n            const prayers: DailyPrayers = {\n              fajr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              dhuhr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              asr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              maghrib: { completed: isMonthMarkingAsCompleted, onTime: false },\n              isha: { completed: isMonthMarkingAsCompleted, onTime: false },\n            };\n            updates.push({ date, prayers });\n          });\n        }\n      });\n    }\n\n    // Set confirmation details and show dialog\n    const weekCount = selectedWeeks.size;\n    const action = selectedWeeks.size > 0 \n      ? (isMarkingAsCompleted ? 'completed' : 'missed')\n      : (isMonthMarkingAsCompleted ? 'completed' : 'missed');\n\n    setConfirmationDetails({\n      weekCount: weekCount,\n      dateCount: updates.length,\n      prayerCount: updates.length * 5, // 5 prayers per day\n      action: action,\n      dateRange: { \n        start: earliestDate || '', \n        end: latestDate || '' \n      }\n    });\n    setShowConfirmDialog(true);\n  };\n\n  const handleConfirmBatchUpdate = async () => {\n    if (selectedWeeks.size === 0 && selectedMonths.size === 0) return;\n\n    const updates: Array<{ date: string; prayers: DailyPrayers }> = [];\n    \n    // Handle weekly updates\n    if (selectedWeeks.size > 0) {\n      selectedWeeks.forEach(weekKey => {\n        const week = pastWeeks.find(w => `${w.startDate}-${w.endDate}` === weekKey);\n        if (week) {\n          week.dates.forEach(date => {\n            const prayers: DailyPrayers = {\n              fajr: { completed: isMarkingAsCompleted, onTime: false },\n              dhuhr: { completed: isMarkingAsCompleted, onTime: false },\n              asr: { completed: isMarkingAsCompleted, onTime: false },\n              maghrib: { completed: isMarkingAsCompleted, onTime: false },\n              isha: { completed: isMarkingAsCompleted, onTime: false },\n            };\n            updates.push({ date, prayers });\n          });\n        }\n      });\n    }\n    \n    // Handle monthly updates\n    if (selectedMonths.size > 0) {\n      selectedMonths.forEach(monthKey => {\n        const month = pastMonths.find(m => `${m.monthName}-${m.year}` === monthKey);\n        if (month) {\n          month.dates.forEach(date => {\n            const prayers: DailyPrayers = {\n              fajr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              dhuhr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              asr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              maghrib: { completed: isMonthMarkingAsCompleted, onTime: false },\n              isha: { completed: isMonthMarkingAsCompleted, onTime: false },\n            };\n            updates.push({ date, prayers });\n          });\n        }\n      });\n    }\n\n    setShowConfirmDialog(false);\n    \n    // Split updates into batches of 7 (API limit) and send sequentially\n    const batchSize = 7;\n    const batches = [];\n    for (let i = 0; i < updates.length; i += batchSize) {\n      batches.push(updates.slice(i, i + batchSize));\n    }\n    \n    try {\n      // Send all batches sequentially\n      for (const batch of batches) {\n        await batchUpdateMutation.mutateAsync(batch);\n      }\n      \n      // Clear selections after successful batch updates\n      setSelectedWeeks(new Set());\n      setSelectedMonths(new Set());\n      setWeeklyHasChanges(false);\n      setMonthlyHasChanges(false);\n      \n      toast({\n        title: \"Prayers Updated Successfully\",\n        description: `Updated ${updates.length} day(s) across ${batches.length} batch(es)`,\n      });\n      \n    } catch (error) {\n      console.error('Batch update failed:', error);\n      toast({\n        title: \"Batch Update Failed\",\n        description: \"Failed to update prayer records. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleWeeklyCancelChanges = () => {\n    setSelectedWeeks(new Set());\n    setWeeklyHasChanges(false);\n  };\n\n  // Monthly handlers\n  const toggleMonthSelection = (monthKey: string) => {\n    const newSelected = new Set(selectedMonths);\n    if (newSelected.has(monthKey)) {\n      newSelected.delete(monthKey);\n    } else {\n      newSelected.add(monthKey);\n    }\n    setSelectedMonths(newSelected);\n  };\n\n  const selectAllMonths = () => {\n    const allMonthKeys = pastMonths.map(month => `${month.monthName}-${month.year}`);\n    setSelectedMonths(new Set(allMonthKeys));\n  };\n\n  const clearMonthSelection = () => {\n    setSelectedMonths(new Set());\n  };\n\n  const handleMonthlyBatchUpdate = () => {\n    if (selectedMonths.size === 0) return;\n\n    // Calculate batch update details for months\n    const updates: Array<{ date: string; prayers: DailyPrayers }> = [];\n    let earliestDate: string | null = null;\n    let latestDate: string | null = null;\n    \n    selectedMonths.forEach(monthKey => {\n      const month = pastMonths.find(m => `${m.monthName}-${m.year}` === monthKey);\n      if (month) {\n        month.dates.forEach(date => {\n          if (!earliestDate || date < earliestDate) earliestDate = date;\n          if (!latestDate || date > latestDate) latestDate = date;\n          \n          const prayers: DailyPrayers = {\n            fajr: { completed: isMonthMarkingAsCompleted, onTime: false },\n            dhuhr: { completed: isMonthMarkingAsCompleted, onTime: false },\n            asr: { completed: isMonthMarkingAsCompleted, onTime: false },\n            maghrib: { completed: isMonthMarkingAsCompleted, onTime: false },\n            isha: { completed: isMonthMarkingAsCompleted, onTime: false },\n          };\n          updates.push({ date, prayers });\n        });\n      }\n    });\n\n    // Set confirmation details and show dialog\n    setConfirmationDetails({\n      weekCount: selectedMonths.size,\n      dateCount: updates.length,\n      prayerCount: updates.length * 5, // 5 prayers per day\n      action: isMonthMarkingAsCompleted ? 'completed' : 'missed',\n      dateRange: { \n        start: earliestDate || '', \n        end: latestDate || '' \n      }\n    });\n    setShowConfirmDialog(true);\n  };\n\n  const handleMonthlyCancelChanges = () => {\n    setSelectedMonths(new Set());\n    setMonthlyHasChanges(false);\n  };\n\n  const isPastDate = (date: Date) => date < new Date(new Date().setHours(0, 0, 0, 0));\n\n  return (\n    <div className=\"glass-card rounded-2xl p-6 space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-qaza-title\">\n          Qaza Prayer Management\n        </h2>\n        <p className=\"text-muted-foreground\" data-testid=\"text-qaza-description\">\n          Manage your missed prayers individually by date or in bulk by week\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as \"daily\" | \"weekly\" | \"monthly\")} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"tabs-view-selector\">\n          <TabsTrigger value=\"daily\" data-testid=\"tab-daily\">\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            Daily View\n          </TabsTrigger>\n          <TabsTrigger value=\"weekly\" data-testid=\"tab-weekly\">\n            <Clock className=\"mr-2 h-4 w-4\" />\n            Weekly View\n          </TabsTrigger>\n          <TabsTrigger value=\"monthly\" data-testid=\"tab-monthly\">\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            Monthly View\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Daily View */}\n        <TabsContent value=\"daily\" className=\"space-y-6\" data-testid=\"content-daily-view\">\n\n      {/* Date Picker */}\n      <div className=\"flex justify-center\">\n        <Popover open={isDatePickerOpen} onOpenChange={setIsDatePickerOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              className={cn(\n                \"w-[240px] justify-start text-left font-normal glass-card\",\n                !selectedDate && \"text-muted-foreground\"\n              )}\n              data-testid=\"button-date-picker\"\n            >\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {selectedDate ? format(selectedDate, \"PPP\") : \"Pick a date\"}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\" align=\"start\" data-testid=\"popover-calendar\">\n            <Calendar\n              mode=\"single\"\n              selected={selectedDate}\n              onSelect={handleDateSelect}\n              disabled={(date) => date > new Date() || date < new Date('2020-01-01')}\n              initialFocus\n              data-testid=\"calendar-date-picker\"\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      {/* Prayer Status Display */}\n      {selectedDate && (\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-semibold\" data-testid=\"text-selected-date\">\n              Prayer Status for {format(selectedDate, \"MMMM d, yyyy\")}\n            </h3>\n          </div>\n\n          {/* Loading State */}\n          {isLoadingPrayers ? (\n            <div className=\"animate-pulse space-y-4\" data-testid=\"loading-prayers\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"flex items-center justify-between p-4 rounded-xl bg-muted/30\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                    <div>\n                      <div className=\"w-16 h-4 bg-muted rounded\"></div>\n                      <div className=\"w-24 h-3 bg-muted/70 rounded mt-2\"></div>\n                    </div>\n                  </div>\n                  <div className=\"w-6 h-6 bg-muted rounded-full\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            /* Prayer List */\n            <div className=\"space-y-3\">\n              {Object.entries(editedPrayers).map(([prayer, status]) => {\n                const prayerKey = prayer as PrayerType;\n                const Icon = prayerIcons[prayerKey];\n                \n                return (\n                  <div\n                    key={prayer}\n                    className={cn(\n                      \"flex items-center justify-between p-4 rounded-xl transition-all duration-300 hover:bg-muted/50\",\n                      status.completed ? \"bg-primary/5\" : \"bg-muted/30\"\n                    )}\n                    data-testid={`prayer-item-${prayer}`}\n                  >\n                    <div className=\"flex items-center gap-4\">\n                      <div className={cn(\"w-12 h-12 rounded-full flex items-center justify-center\", prayerColors[prayerKey])}>\n                        <Icon className=\"w-6 h-6\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-foreground\" data-testid={`text-prayer-name-${prayer}`}>\n                          {prayerNames[prayerKey]}\n                        </h4>\n                        <p className=\"text-sm text-muted-foreground\" data-testid={`text-prayer-status-${prayer}`}>\n                          {status.completed ? 'Completed' : 'Missed'}\n                        </p>\n                      </div>\n                    </div>\n                    <Checkbox\n                      checked={status.completed}\n                      onCheckedChange={() => togglePrayer(prayerKey)}\n                      className=\"h-5 w-5\"\n                      data-testid={`checkbox-prayer-${prayer}`}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          {selectedDate && !isLoadingPrayers && (\n            <div className=\"flex justify-center gap-3 pt-4\">\n              <Button\n                onClick={handleCancel}\n                variant=\"outline\"\n                disabled={!hasChanges || savePrayersMutation.isPending}\n                className=\"min-w-[100px]\"\n                data-testid=\"button-cancel\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSave}\n                disabled={!hasChanges || savePrayersMutation.isPending}\n                className=\"min-w-[100px]\"\n                data-testid=\"button-save\"\n              >\n                {savePrayersMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <Save className=\"mr-2 h-4 w-4\" />\n                )}\n                {savePrayersMutation.isPending ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n\n          {!selectedDate && (\n            <div className=\"text-center py-12\">\n              <CalendarIcon className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-date-selected\">\n                Select a date to manage prayer records\n              </p>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Weekly View */}\n        <TabsContent value=\"weekly\" className=\"space-y-6\" data-testid=\"content-weekly-view\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-weekly-title\">\n              Bulk Prayer Management\n            </h3>\n            <p className=\"text-muted-foreground text-sm\" data-testid=\"text-weekly-description\">\n              Select weeks to mark all prayers as completed or missed\n            </p>\n          </div>\n\n          {/* Mark as Completed/Missed Toggle */}\n          <div className=\"flex justify-center gap-4\">\n            <Button\n              variant={isMarkingAsCompleted ? \"default\" : \"outline\"}\n              onClick={() => {\n                setIsMarkingAsCompleted(true);\n                handleBatchUpdate();\n              }}\n              data-testid=\"button-mark-completed\"\n            >\n              Mark as Completed\n            </Button>\n            <Button\n              variant={!isMarkingAsCompleted ? \"default\" : \"outline\"}\n              onClick={() => {\n                setIsMarkingAsCompleted(false);\n                handleBatchUpdate();\n              }}\n              data-testid=\"button-mark-missed\"\n            >\n              Mark as Missed\n            </Button>\n          </div>\n\n          {/* Week Selection Controls */}\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={selectAllWeeks}\n                disabled={pastWeeks.length === 0}\n                data-testid=\"button-select-all-weeks\"\n              >\n                Select All\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={clearWeekSelection}\n                disabled={selectedWeeks.size === 0}\n                data-testid=\"button-clear-selection\"\n              >\n                Clear Selection\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-selected-count\">\n              {selectedWeeks.size} week(s) selected\n            </p>\n          </div>\n\n          {/* Past Weeks List */}\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\" data-testid=\"list-past-weeks\">\n            {pastWeeks.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Clock className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-weeks-available\">\n                  No past weeks available for selection\n                </p>\n              </div>\n            ) : (\n              pastWeeks.map((week) => {\n                const weekKey = `${week.startDate}-${week.endDate}`;\n                const isSelected = selectedWeeks.has(weekKey);\n                \n                return (\n                  <WeekRow\n                    key={weekKey}\n                    week={week}\n                    isSelected={isSelected}\n                    onToggle={() => toggleWeekSelection(weekKey)}\n                  />\n                );\n              })\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          {weeklyHasChanges && (\n            <div className=\"flex justify-center gap-3 pt-4\">\n              <Button\n                onClick={handleWeeklyCancelChanges}\n                variant=\"outline\"\n                disabled={batchUpdateMutation.isPending}\n                className=\"min-w-[100px]\"\n                data-testid=\"button-weekly-cancel\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Cancel\n              </Button>\n              <Button\n                onClick={handleBatchUpdate}\n                disabled={selectedWeeks.size === 0 || batchUpdateMutation.isPending}\n                className=\"min-w-[140px]\"\n                data-testid=\"button-weekly-save\"\n              >\n                {batchUpdateMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <Save className=\"mr-2 h-4 w-4\" />\n                )}\n                {batchUpdateMutation.isPending \n                  ? 'Processing...' \n                  : `Mark Selected Weeks`\n                }\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Monthly View */}\n        <TabsContent value=\"monthly\" className=\"space-y-6\" data-testid=\"content-monthly-view\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-monthly-title\">\n              Monthly Prayer Management\n            </h3>\n            <p className=\"text-muted-foreground text-sm\" data-testid=\"text-monthly-description\">\n              Select months to mark all prayers as completed or missed\n            </p>\n          </div>\n\n          {/* Mark as Completed/Missed Toggle */}\n          <div className=\"flex justify-center gap-4\">\n            <Button\n              variant={isMonthMarkingAsCompleted ? \"default\" : \"outline\"}\n              onClick={() => {\n                setIsMonthMarkingAsCompleted(true);\n                handleBatchUpdate();\n              }}\n              data-testid=\"button-monthly-mark-completed\"\n            >\n              Mark as Completed\n            </Button>\n            <Button\n              variant={!isMonthMarkingAsCompleted ? \"default\" : \"outline\"}\n              onClick={() => {\n                setIsMonthMarkingAsCompleted(false);\n                handleBatchUpdate();\n              }}\n              data-testid=\"button-monthly-mark-missed\"\n            >\n              Mark as Missed\n            </Button>\n          </div>\n\n          {/* Month Selection Controls */}\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={selectAllMonths}\n                disabled={pastMonths.length === 0}\n                data-testid=\"button-select-all-months\"\n              >\n                Select All\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={clearMonthSelection}\n                disabled={selectedMonths.size === 0}\n                data-testid=\"button-clear-monthly-selection\"\n              >\n                Clear Selection\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-monthly-selected-count\">\n              {selectedMonths.size} month(s) selected\n            </p>\n          </div>\n\n          {/* Past Months List */}\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\" data-testid=\"list-past-months\">\n            {pastMonths.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <CalendarIcon className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-months-available\">\n                  No past months available for selection\n                </p>\n              </div>\n            ) : (\n              pastMonths.map((month) => {\n                const monthKey = `${month.monthName}-${month.year}`;\n                const isSelected = selectedMonths.has(monthKey);\n                \n                return (\n                  <MonthRow\n                    key={monthKey}\n                    month={month}\n                    isSelected={isSelected}\n                    onToggle={() => toggleMonthSelection(monthKey)}\n                  />\n                );\n              })\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          {monthlyHasChanges && (\n            <div className=\"flex justify-center gap-3 pt-4\">\n              <Button\n                onClick={handleMonthlyCancelChanges}\n                variant=\"outline\"\n                disabled={batchUpdateMutation.isPending}\n                className=\"min-w-[100px]\"\n                data-testid=\"button-monthly-cancel\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Cancel\n              </Button>\n              <Button\n                onClick={handleMonthlyBatchUpdate}\n                disabled={selectedMonths.size === 0 || batchUpdateMutation.isPending}\n                className=\"min-w-[140px]\"\n                data-testid=\"button-monthly-save\"\n              >\n                {batchUpdateMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <Save className=\"mr-2 h-4 w-4\" />\n                )}\n                {batchUpdateMutation.isPending \n                  ? 'Processing...' \n                  : `Mark Selected Months`\n                }\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Confirmation Dialog */}\n      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <AlertDialogContent data-testid=\"dialog-batch-confirmation\">\n          <AlertDialogHeader>\n            <AlertDialogTitle data-testid=\"text-confirmation-title\">\n              Confirm Batch Update\n            </AlertDialogTitle>\n            <AlertDialogDescription data-testid=\"text-confirmation-description\">\n              {confirmationDetails && (\n                <div className=\"space-y-3\">\n                  <p className=\"text-destructive font-medium\">\n                    ⚠️ This action will overwrite any existing prayer records for the selected dates\n                  </p>\n                  <div className=\"bg-muted/30 p-4 rounded-lg space-y-2\">\n                    <p>\n                      <strong>Action:</strong> Mark as{\" \"}\n                      <span className={cn(\n                        \"font-semibold\",\n                        confirmationDetails.action === 'completed' ? \"text-green-600\" : \"text-orange-600\"\n                      )}>\n                        {confirmationDetails.action}\n                      </span>\n                    </p>\n                    <p>\n                      <strong>Affected weeks:</strong> {confirmationDetails.weekCount} week(s)\n                    </p>\n                    <p>\n                      <strong>Date range:</strong> {confirmationDetails.dateRange.start} to {confirmationDetails.dateRange.end}\n                    </p>\n                    <p>\n                      <strong>Total prayers:</strong> {confirmationDetails.prayerCount} prayers across {confirmationDetails.dateCount} days\n                    </p>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    This cannot be undone. All individual daily prayer settings for these dates will be replaced.\n                  </p>\n                </div>\n              )}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => setShowConfirmDialog(false)}\n              data-testid=\"button-confirmation-cancel\"\n            >\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmBatchUpdate}\n              disabled={batchUpdateMutation.isPending}\n              data-testid=\"button-confirmation-proceed\"\n              className={cn(\n                confirmationDetails?.action === 'completed' \n                  ? \"bg-green-600 hover:bg-green-700\" \n                  : \"bg-orange-600 hover:bg-orange-700\"\n              )}\n            >\n              {batchUpdateMutation.isPending ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  Processing...\n                </div>\n              ) : (\n                `Yes, Mark as ${confirmationDetails?.action || 'completed'}`\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n\n// Week Row Component for displaying individual weeks\nfunction WeekRow({ \n  week, \n  isSelected, \n  onToggle \n}: { \n  week: { startDate: string; endDate: string; dates: string[]; weekLabel: string }; \n  isSelected: boolean; \n  onToggle: () => void; \n}) {\n  const [completion, setCompletion] = useState<{\n    completionPercentage: number;\n    status: 'empty' | 'partial' | 'complete';\n  }>({ completionPercentage: 0, status: 'empty' });\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Check if this week is in the future and should be disabled\n  const isDisabled = isWeekInFuture(week.endDate);\n\n  useEffect(() => {\n    const fetchCompletion = async () => {\n      setIsLoading(true);\n      try {\n        const result = await calculateWeekCompletion(week.dates);\n        setCompletion({\n          completionPercentage: result.completionPercentage,\n          status: result.status,\n        });\n      } catch (error) {\n        console.error('Error fetching week completion:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCompletion();\n  }, [week.dates]);\n\n  const getStatusIndicator = () => {\n    if (isLoading) {\n      return <div className=\"w-3 h-3 rounded-full bg-muted animate-pulse\"></div>;\n    }\n    \n    switch (completion.status) {\n      case 'complete':\n        return <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>;\n      case 'partial':\n        return <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>;\n      case 'empty':\n        return <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>;\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-between p-4 rounded-xl transition-all duration-300\",\n        isDisabled \n          ? \"opacity-50 cursor-not-allowed bg-muted/20\" \n          : \"hover:bg-muted/50 cursor-pointer\",\n        isSelected && !isDisabled ? \"bg-primary/10 border border-primary/20\" : \"bg-muted/30\"\n      )}\n      onClick={isDisabled ? undefined : onToggle}\n      data-testid={`week-row-${week.startDate}`}\n    >\n      <div className=\"flex items-center gap-4\">\n        <Checkbox\n          checked={isSelected && !isDisabled}\n          onCheckedChange={isDisabled ? undefined : onToggle}\n          disabled={isDisabled}\n          className=\"h-5 w-5\"\n          data-testid={`checkbox-week-${week.startDate}`}\n        />\n        <div className=\"flex items-center gap-3\">\n          {getStatusIndicator()}\n          <div>\n            <h4 className={cn(\n              \"font-medium\",\n              isDisabled ? \"text-muted-foreground\" : \"text-foreground\"\n            )} data-testid={`text-week-label-${week.startDate}`}>\n              {week.weekLabel}\n              {isDisabled && <span className=\"ml-2 text-xs\">(Future)</span>}\n            </h4>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`text-week-completion-${week.startDate}`}>\n              {isDisabled \n                ? 'Not available (future week)'\n                : isLoading \n                  ? 'Loading...' \n                  : `${completion.completionPercentage}% completed`\n              }\n            </p>\n          </div>\n        </div>\n      </div>\n      <div className=\"text-sm text-muted-foreground\">\n        {week.dates.length} days\n      </div>\n    </div>\n  );\n}\n\n// Month Row Component for displaying individual months\nfunction MonthRow({ \n  month, \n  isSelected, \n  onToggle \n}: { \n  month: { \n    startDate: string; \n    endDate: string; \n    dates: string[]; \n    monthLabel: string;\n    monthName: string;\n    year: number;\n  }; \n  isSelected: boolean; \n  onToggle: () => void; \n}) {\n  const [completion, setCompletion] = useState<{\n    completionPercentage: number;\n    status: 'empty' | 'partial' | 'complete';\n  }>({ completionPercentage: 0, status: 'empty' });\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchCompletion = async () => {\n      setIsLoading(true);\n      try {\n        const result = await calculateMonthCompletion(month.dates);\n        setCompletion({\n          completionPercentage: result.completionPercentage,\n          status: result.status,\n        });\n      } catch (error) {\n        console.error('Error fetching month completion:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCompletion();\n  }, [month.dates]);\n\n  const getStatusIndicator = () => {\n    if (isLoading) {\n      return <div className=\"w-3 h-3 rounded-full bg-muted animate-pulse\"></div>;\n    }\n    \n    switch (completion.status) {\n      case 'complete':\n        return <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>;\n      case 'partial':\n        return <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>;\n      case 'empty':\n        return <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>;\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-between p-4 rounded-xl transition-all duration-300 hover:bg-muted/50 cursor-pointer\",\n        isSelected ? \"bg-primary/10 border border-primary/20\" : \"bg-muted/30\"\n      )}\n      onClick={onToggle}\n      data-testid={`month-row-${month.monthName}-${month.year}`}\n    >\n      <div className=\"flex items-center gap-4\">\n        <Checkbox\n          checked={isSelected}\n          onCheckedChange={onToggle}\n          className=\"h-5 w-5\"\n          data-testid={`checkbox-month-${month.monthName}-${month.year}`}\n        />\n        <div className=\"flex items-center gap-3\">\n          {getStatusIndicator()}\n          <div>\n            <h4 className=\"font-medium text-foreground\" data-testid={`text-month-label-${month.monthName}-${month.year}`}>\n              {month.monthLabel}\n            </h4>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`text-month-completion-${month.monthName}-${month.year}`}>\n              {isLoading \n                ? 'Loading...' \n                : `${completion.completionPercentage}% completed`\n              }\n            </p>\n          </div>\n        </div>\n      </div>\n      <div className=\"text-sm text-muted-foreground\">\n        {month.dates.length} days\n      </div>\n    </div>\n  );\n}","size_bytes":43660},"client/src/pages/qaza.tsx":{"content":"import { QazaPrayerManager } from '../components/qaza-prayer-manager';\n\nexport default function Qaza() {\n  return (\n    <div className=\"space-y-8\" data-testid=\"page-qaza\">\n      <section>\n        <h2 className=\"text-2xl font-bold mb-6 text-center\" data-testid=\"text-page-title\">\n          Qaza Prayer Management\n        </h2>\n        <p className=\"text-center text-muted-foreground mb-8\" data-testid=\"text-page-description\">\n          Review and update your past prayer records to keep your spiritual journey accurate.\n        </p>\n        <QazaPrayerManager />\n      </section>\n    </div>\n  );\n}","size_bytes":596},"README.md":{"content":"# NamazTracker\n\n","size_bytes":16},"server/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\nimport { registerUserSchema, loginUserSchema, safeUserSchema } from \"@shared/schema\";\nimport type { RequestHandler, Request, Response } from \"express\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-jwt-secret-here\";\n\n// Hash password\nexport const hashPassword = async (password: string): Promise<string> => {\n  return await bcrypt.hash(password, 12);\n};\n\n// Verify password\nexport const verifyPassword = async (password: string, hashedPassword: string): Promise<boolean> => {\n  return await bcrypt.compare(password, hashedPassword);\n};\n\n// Generate JWT token\nexport const generateToken = (user: User): string => {\n  return jwt.sign(\n    {\n      userId: user.id,\n      username: user.username,\n      email: user.email\n    },\n    JWT_SECRET,\n    { expiresIn: '7d' }\n  );\n};\n\n// Verify JWT token\nexport const verifyToken = (token: string): any => {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n};\n\n// Middleware for authentication\nexport const authenticate: RequestHandler = (req: Request & { user?: any }, res: Response, next) => {\n  try {\n    const authHeader = req.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ message: \"No token provided\" });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = verifyToken(token);\n\n    if (!decoded) {\n      return res.status(401).json({ message: \"Invalid token\" });\n    }\n\n    req.user = decoded;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: \"Authentication failed\" });\n  }\n};\n\n// Register user\nexport const register = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const validatedData = registerUserSchema.parse(req.body);\n\n    // Check if user already exists\n    const existingUsers = await Promise.all([\n      validatedData.username ? storage.getUserByUsername(validatedData.username) : Promise.resolve(null),\n      validatedData.email ? storage.getUserByEmail(validatedData.email) : Promise.resolve(null)\n    ]);\n\n    if (existingUsers[0]) {\n      res.status(400).json({ message: \"Username already exists\" });\n      return;\n    }\n\n    if (existingUsers[1]) {\n      res.status(400).json({ message: \"Email already exists\" });\n      return;\n    }\n\n    // Hash password (validatedData.passwordHash should be present for JWT auth)\n    const passwordHash = await hashPassword(validatedData.passwordHash!);\n\n    // Create user\n    const userData: Omit<User, 'id' | 'createdAt' | 'updatedAt'> = {\n      username: validatedData.username as string,\n      email: validatedData.email as string,\n      passwordHash,\n      firstName: validatedData.firstName || null,\n      lastName: validatedData.lastName || null,\n      profileImageUrl: validatedData.profileImageUrl || null,\n      isActive: true,\n    };\n\n    const newUser = await storage.createUser(userData);\n\n    // Generate token\n    const token = generateToken(newUser as User);\n\n    // Return safe user data (without password)\n    const safeUser = safeUserSchema.parse(newUser);\n\n    res.status(201).json({\n      user: safeUser,\n      token,\n      message: \"Registration successful\"\n    });\n\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    if (error instanceof Error && error.name === \"ZodError\") {\n      res.status(400).json({ message: \"Validation error\", errors: (error as any).errors });\n    } else {\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  }\n};\n\n// Login user\nexport const login = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { username, password } = loginUserSchema.parse(req.body);\n\n    // Find user by username\n    const user = await storage.getUserByUsername(username);\n    if (!user || !user.isActive) {\n      res.status(401).json({ message: \"Invalid credentials\" });\n      return;\n    }\n\n    // Check if user has password hash (JWT auth)\n    if (!user.passwordHash) {\n      res.status(401).json({ message: \"Invalid authentication method\" });\n      return;\n    }\n\n    // Verify password\n    const isValidPassword = await verifyPassword(password, user.passwordHash);\n    if (!isValidPassword) {\n      res.status(401).json({ message: \"Invalid credentials\" });\n      return;\n    }\n\n    // Generate token\n    const token = generateToken(user);\n\n    // Return safe user data (without password)\n    const safeUser = safeUserSchema.parse(user);\n\n    res.json({\n      user: safeUser,\n      token,\n      message: \"Login successful\"\n    });\n\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    if (error instanceof Error && error.name === \"ZodError\") {\n      res.status(400).json({ message: \"Validation error\", errors: (error as any).errors });\n    } else {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  }\n};\n\n// Get current user\nexport const getMe = async (req: Request & { user?: any }, res: Response): Promise<void> => {\n  try {\n    const userId = req.user?.userId;\n    if (!userId) {\n      res.status(401).json({ message: \"User not authenticated\" });\n      return;\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user) {\n      res.status(404).json({ message: \"User not found\" });\n      return;\n    }\n\n    // Return safe user data (without password)\n    const safeUser = safeUserSchema.parse(user);\n    res.json(safeUser);\n\n  } catch (error) {\n    console.error(\"Get user error:\", error);\n    res.status(500).json({ message: \"Failed to get user\" });\n  }\n};\n\n// Logout (client-side token removal)\nexport const logout = (req: Request, res: Response): void => {\n  res.json({ message: \"Logged out successfully\" });\n};\n","size_bytes":5765},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ThemeToggle } from '@/components/theme-toggle';\nimport { Calendar } from 'lucide-react';\n\nconst loginSchema = z.object({\n  username: z.string().min(1, 'Username is required'),\n  password: z.string().min(1, 'Password is required'),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, 'Username must be at least 3 characters'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Login() {\n  const [location, navigate] = useLocation();\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n  });\n\n  const onLogin = async (data: LoginForm) => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n\n      const { token, user } = await response.json();\n\n      // Store token in localStorage\n      localStorage.setItem('authToken', token);\n\n      // Redirect to dashboard or original location\n      const redirectTo = new URLSearchParams(location.split('?')[1]).get('redirect') || '/dashboard';\n      navigate(redirectTo);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Login failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onRegister = async (data: RegisterForm) => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...data,\n          passwordHash: data.password, // Pass plain password, let server hash it\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n\n      const { token, user } = await response.json();\n\n      // Store token in localStorage\n      localStorage.setItem('authToken', token);\n\n      // Redirect to dashboard\n      navigate('/dashboard');\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Registration failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-purple-900 dark:to-indigo-900 flex items-center justify-center p-4\">\n      <div className=\"absolute top-4 right-4\">\n        <ThemeToggle />\n      </div>\n\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Calendar className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Namaz Tracker</h1>\n          <p className=\"text-muted-foreground\">Track your daily prayers</p>\n        </div>\n\n        <Card className=\"glass-card\">\n          <CardHeader>\n            <CardTitle>Welcome</CardTitle>\n            <CardDescription>\n              Sign in to your account or create a new one\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {error && (\n              <Alert className=\"mb-4\" variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\">\n                <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                  <div>\n                    <Input\n                      {...loginForm.register('username')}\n                      placeholder=\"Username\"\n                      disabled={isLoading}\n                    />\n                    {loginForm.formState.errors.username && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {loginForm.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Input\n                      {...loginForm.register('password')}\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      disabled={isLoading}\n                    />\n                    {loginForm.formState.errors.password && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? 'Signing in...' : 'Sign In'}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\">\n                <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                  <div>\n                    <Input\n                      {...registerForm.register('username')}\n                      placeholder=\"Username\"\n                      disabled={isLoading}\n                    />\n                    {registerForm.formState.errors.username && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Input\n                      {...registerForm.register('email')}\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      disabled={isLoading}\n                    />\n                    {registerForm.formState.errors.email && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Input\n                      {...registerForm.register('password')}\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      disabled={isLoading}\n                    />\n                    {registerForm.formState.errors.password && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Input\n                      {...registerForm.register('firstName')}\n                      placeholder=\"First Name (optional)\"\n                      disabled={isLoading}\n                    />\n                    <Input\n                      {...registerForm.register('lastName')}\n                      placeholder=\"Last Name (optional)\"\n                      disabled={isLoading}\n                    />\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? 'Creating account...' : 'Create Account'}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"mt-6 text-center\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => navigate('/')}\n              >\n                Back to Home\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9038},"AUTH_REMOVAL_GUIDE.md":{"content":"# Authentication System Removal Guide\n\nThis document provides detailed instructions on how to completely remove the authentication system from the Namaz Tracker application.\n\n## Overview\n\nThe app originally had a JWT-based authentication system with login/register functionality. This guide explains how to remove all authentication-related code to allow direct access to all features without requiring user login.\n\n---\n\n## Backend Changes\n\n### 1. Server Routes (`server/routes.ts`)\n\n**Location**: Lines 155-177\n\n**What to Remove/Comment Out**:\n\n```typescript\n// Comment out auth imports\n// const { register, login, getMe, authenticate } = await import(\"./auth\");\n\n// Comment out authentication routes\n// app.post('/api/auth/register', register);\n// app.post('/api/auth/login', login);\n// app.get('/api/auth/me', isAuthenticated, getMe);\n// app.get('/api/auth/user', isAuthenticated, async (req: any, res) => { ... });\n```\n\n**What to Add**:\n\n1. Create a demo user object:\n```typescript\nconst demoUser = { \n  userId: \"demo-user\", \n  username: \"Demo User\", \n  email: \"demo@example.com\" \n};\n```\n\n2. Create a devAuth middleware:\n```typescript\nconst devAuth: DevAuth = (req: any, res, next) => {\n  req.user = demoUser;\n  next();\n};\n```\n\n3. Replace authentication middleware:\n```typescript\n// Change this:\nconst isAuthenticated = authenticate;\n\n// To this:\nconst isAuthenticated = devAuth;\n```\n\n**Result**: All API routes (`/api/prayers`, `/api/achievements`, `/api/stats`) now use the `devAuth` middleware which automatically injects a demo user into every request, bypassing authentication checks.\n\n### 2. Authentication Module (`server/auth.ts`)\n\n**Action**: This file remains in the codebase but is no longer imported or used.\n\n**Note**: You can optionally delete this file completely if you want to permanently remove all auth code, but keeping it commented allows for easier restoration later.\n\n---\n\n## Frontend Changes\n\n### 3. Main App Component (`client/src/App.tsx`)\n\n**What to Remove/Comment Out**:\n\n1. **Auth-related imports** (Lines 10-12, 18-19):\n```typescript\n// import { AuthContext, type AuthContextType, useAuthQuery } from \"./hooks/useAuth\";\n// import { Button } from \"@/components/ui/button\";\n// import { LogOut, User } from \"lucide-react\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\n// import Login from \"./pages/login.tsx\";\n// import Landing from \"./pages/landing\";\n```\n\n2. **AuthProvider component** (Lines 22-30):\n```typescript\n// function AuthProvider({ children }: { children: React.ReactNode }) {\n//   const auth = useAuthQuery();\n//   return (\n//     <AuthContext.Provider value={auth}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }\n```\n\n3. **AuthenticatedHeader component** (Lines 32-65):\n```typescript\n// function AuthenticatedHeader({ user, logout }: { user: any; logout: () => void }) {\n//   // Full component code with logout button and user info\n// }\n```\n\n4. **LoadingScreen component** (Lines 79-91):\n```typescript\n// function LoadingScreen() {\n//   // Loading spinner component\n// }\n```\n\n5. **Original AppContent with auth checks** (Lines 93-115):\n```typescript\n// function AppContent() {\n//   const { user, isLoading, isAuthenticated, logout } = useAuthQuery();\n//   if (isLoading) return <LoadingScreen />;\n//   if (!isAuthenticated) return <Landing />;\n//   // ... rest of component\n// }\n```\n\n**What to Add**:\n\n1. **SimpleHeader component** (replaces AuthenticatedHeader):\n```typescript\nfunction SimpleHeader() {\n  return (\n    <header className=\"glass-nav px-4 py-3 m-4 rounded-2xl\" data-testid=\"header-authenticated\">\n      <div className=\"flex items-center justify-between max-w-6xl mx-auto\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-primary-foreground text-lg\">🕌</span>\n          </div>\n          <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-title\">\n            Namaz Tracker\n          </h1>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <ThemeToggle />\n        </div>\n      </div>\n    </header>\n  );\n}\n```\n\n2. **AppRouter component** (replaces AuthenticatedRouter):\n```typescript\nfunction AppRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/qaza\" component={Qaza} />\n      <Route path=\"/achievements\" component={Achievements} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n```\n\n3. **New simplified AppContent** (no auth checks):\n```typescript\nfunction AppContent() {\n  return (\n    <PrayerProvider>\n      <div className=\"min-h-screen\">\n        <SimpleHeader />\n        <main className=\"pb-24 px-4 max-w-6xl mx-auto\">\n          <AppRouter />\n        </main>\n        <Navigation />\n      </div>\n    </PrayerProvider>\n  );\n}\n```\n\n4. **Updated App component** (Lines 117-131):\n```typescript\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem>\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n```\n\n**Key Changes**:\n- No more `AuthProvider` wrapper\n- No authentication state checks\n- No loading screen while checking auth\n- No redirect to landing page\n- Direct access to all routes\n- Simplified header without user info or logout\n\n### 4. Authentication Hooks (`client/src/hooks/useAuth.ts`)\n\n**Action**: This file remains in the codebase but is no longer imported or used in `App.tsx`.\n\n**Note**: You can optionally delete this file if you want to completely remove auth code.\n\n### 5. Authentication Utilities (`client/src/lib/authUtils.ts`)\n\n**Action**: This file remains but is no longer used.\n\n**Note**: Can be deleted for complete auth removal.\n\n### 6. Login/Landing Pages\n\n**Files Affected**:\n- `client/src/pages/login.tsx`\n- `client/src/pages/landing.tsx`\n\n**Action**: These files remain but are no longer imported or routed in `App.tsx`.\n\n**Note**: Can be deleted if you want to completely clean up unused files.\n\n---\n\n## Database Setup\n\n### 7. Create Demo User\n\n**Requirement**: The demo user must exist in the database for the app to work.\n\n**SQL Command**:\n```sql\nINSERT INTO users (id, username, email, password_hash, first_name) \nVALUES ('demo-user', 'demo', 'demo@example.com', 'dummy-hash', 'Demo User') \nON CONFLICT (id) DO NOTHING;\n```\n\n**How to Run**:\nUsing the Replit SQL execution tool:\n```javascript\nexecute_sql_tool({\n  sql_query: \"INSERT INTO users (id, username, email, password_hash, first_name) VALUES ('demo-user', 'demo', 'demo@example.com', 'dummy-hash', 'Demo User') ON CONFLICT (id) DO NOTHING;\",\n  environment: \"development\"\n});\n```\n\n**Why This is Needed**: All API requests now use `userId: \"demo-user\"` via the `devAuth` middleware. If this user doesn't exist in the database, foreign key constraints will fail when trying to create prayer records, achievements, or stats.\n\n### 8. Initialize Database Tables\n\nIf starting fresh, run the database migration:\n\n```bash\nnpm run db:push\n```\n\nThis creates all required tables:\n- `users`\n- `prayer_records`\n- `achievements`\n- `user_stats`\n\n---\n\n## Files That Can Be Optionally Deleted\n\nIf you want to completely remove auth code (not just comment it out):\n\n1. **Backend**:\n   - `server/auth.ts` - JWT authentication logic\n   - `server/replitAuth.ts` - Replit OAuth authentication (if exists)\n\n2. **Frontend**:\n   - `client/src/hooks/useAuth.ts` - Auth state management\n   - `client/src/lib/authUtils.ts` - Auth utility functions\n   - `client/src/pages/login.tsx` - Login/register page\n   - `client/src/pages/landing.tsx` - Landing page for non-authenticated users\n\n3. **Shared**:\n   - Remove auth-related schemas from `shared/schema.ts` if desired:\n     - `registerUserSchema`\n     - `loginUserSchema`\n     - `safeUserSchema`\n\n**Warning**: Deleting these files means you cannot easily restore authentication later. Commenting out code is safer for debugging purposes.\n\n---\n\n## Testing After Removal\n\n### Verify Backend\nTest all endpoints work without authentication:\n\n```bash\n# Stats endpoint\ncurl http://localhost:5000/api/stats\n\n# Prayers endpoint\ncurl http://localhost:5000/api/prayers/2025-10-01\n\n# Achievements endpoint\ncurl http://localhost:5000/api/achievements\n```\n\nAll should return `200 OK` with data (not `401 Unauthorized`).\n\n### Verify Frontend\n1. Navigate to `http://localhost:5000/`\n2. Should go directly to Dashboard (not landing page)\n3. All navigation links should work:\n   - Dashboard\n   - Qaza\n   - Achievements\n   - Analytics\n4. No authentication errors in browser console\n5. All data loads successfully\n\n---\n\n## Restoring Authentication (If Needed)\n\nTo restore authentication later:\n\n1. **Backend**: Uncomment all auth imports and routes in `server/routes.ts`\n2. **Frontend**: Uncomment all auth code in `client/src/App.tsx`\n3. **Middleware**: Change `const isAuthenticated = devAuth` back to `const isAuthenticated = authenticate`\n4. **Database**: Create real users instead of using demo user\n\n---\n\n## Security Notes\n\n**⚠️ IMPORTANT**: The current setup with `devAuth` is **ONLY** safe for local development and debugging.\n\n**Never deploy this configuration to production** because:\n- All requests are treated as the same demo user\n- No actual authentication or authorization\n- Anyone can access all data\n- No user separation or privacy\n\n**For Production**: You must implement proper authentication with real user accounts, password hashing, JWT tokens, and session management.\n\n---\n\n## Summary of Changes\n\n### What Was Removed:\n✅ JWT token generation and verification  \n✅ Password hashing and verification  \n✅ Login/register API endpoints  \n✅ User authentication checks  \n✅ Auth state management on frontend  \n✅ Landing page with login prompt  \n✅ Loading screen for auth verification  \n✅ Logout functionality  \n✅ User info display in header  \n\n### What Was Added:\n✅ Demo user middleware (`devAuth`)  \n✅ Automatic user injection for all requests  \n✅ Simplified header without auth UI  \n✅ Direct routing to Dashboard  \n✅ Demo user in database  \n\n### Result:\n🎯 Full app functionality without any authentication barriers  \n🎯 Perfect for debugging and development  \n🎯 All features accessible immediately  \n🎯 No login/logout flow required  \n\n---\n\n## Additional Notes\n\n- All auth code is **commented out**, not deleted, making restoration easy\n- The `devAuth` middleware ensures all code paths that expect `req.user` still work\n- Database foreign key relationships remain intact with the demo user\n- No breaking changes to API endpoints or data structures\n- React Query and all frontend state management work unchanged\n\n---\n\nLast Updated: October 1, 2025\n","size_bytes":10878},"server/AUTH_REMOVAL_GUIDE.md":{"content":"# Authentication System Removal Guide\n\nThis document provides detailed instructions on how to completely remove the authentication system from the Namaz Tracker application.\n\n## Overview\n\nThe app originally had a JWT-based authentication system with login/register functionality. This guide explains how to remove all authentication-related code to allow direct access to all features without requiring user login.\n\n---\n\n## Backend Changes\n\n### 1. Server Routes (`server/routes.ts`)\n\n**Location**: Lines 155-177\n\n**What to Remove/Comment Out**:\n\n```typescript\n// Comment out auth imports\n// const { register, login, getMe, authenticate } = await import(\"./auth\");\n\n// Comment out authentication routes\n// app.post('/api/auth/register', register);\n// app.post('/api/auth/login', login);\n// app.get('/api/auth/me', isAuthenticated, getMe);\n// app.get('/api/auth/user', isAuthenticated, async (req: any, res) => { ... });\n```\n\n**What to Add**:\n\n1. Create a demo user object:\n```typescript\nconst demoUser = { \n  userId: \"demo-user\", \n  username: \"Demo User\", \n  email: \"demo@example.com\" \n};\n```\n\n2. Create a devAuth middleware:\n```typescript\nconst devAuth: DevAuth = (req: any, res, next) => {\n  req.user = demoUser;\n  next();\n};\n```\n\n3. Replace authentication middleware:\n```typescript\n// Change this:\nconst isAuthenticated = authenticate;\n\n// To this:\nconst isAuthenticated = devAuth;\n```\n\n**Result**: All API routes (`/api/prayers`, `/api/achievements`, `/api/stats`) now use the `devAuth` middleware which automatically injects a demo user into every request, bypassing authentication checks.\n\n### 2. Authentication Module (`server/auth.ts`)\n\n**Action**: This file remains in the codebase but is no longer imported or used.\n\n**Note**: You can optionally delete this file completely if you want to permanently remove all auth code, but keeping it commented allows for easier restoration later.\n\n---\n\n## Frontend Changes\n\n### 3. Main App Component (`client/src/App.tsx`)\n\n**What to Remove/Comment Out**:\n\n1. **Auth-related imports** (Lines 10-12, 18-19):\n```typescript\n// import { AuthContext, type AuthContextType, useAuthQuery } from \"./hooks/useAuth\";\n// import { Button } from \"@/components/ui/button\";\n// import { LogOut, User } from \"lucide-react\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\n// import Login from \"./pages/login.tsx\";\n// import Landing from \"./pages/landing\";\n```\n\n2. **AuthProvider component** (Lines 22-30):\n```typescript\n// function AuthProvider({ children }: { children: React.ReactNode }) {\n//   const auth = useAuthQuery();\n//   return (\n//     <AuthContext.Provider value={auth}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }\n```\n\n3. **AuthenticatedHeader component** (Lines 32-65):\n```typescript\n// function AuthenticatedHeader({ user, logout }: { user: any; logout: () => void }) {\n//   // Full component code with logout button and user info\n// }\n```\n\n4. **LoadingScreen component** (Lines 79-91):\n```typescript\n// function LoadingScreen() {\n//   // Loading spinner component\n// }\n```\n\n5. **Original AppContent with auth checks** (Lines 93-115):\n```typescript\n// function AppContent() {\n//   const { user, isLoading, isAuthenticated, logout } = useAuthQuery();\n//   if (isLoading) return <LoadingScreen />;\n//   if (!isAuthenticated) return <Landing />;\n//   // ... rest of component\n// }\n```\n\n**What to Add**:\n\n1. **SimpleHeader component** (replaces AuthenticatedHeader):\n```typescript\nfunction SimpleHeader() {\n  return (\n    <header className=\"glass-nav px-4 py-3 m-4 rounded-2xl\" data-testid=\"header-authenticated\">\n      <div className=\"flex items-center justify-between max-w-6xl mx-auto\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-primary-foreground text-lg\">🕌</span>\n          </div>\n          <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-title\">\n            Namaz Tracker\n          </h1>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <ThemeToggle />\n        </div>\n      </div>\n    </header>\n  );\n}\n```\n\n2. **AppRouter component** (replaces AuthenticatedRouter):\n```typescript\nfunction AppRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/qaza\" component={Qaza} />\n      <Route path=\"/achievements\" component={Achievements} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n```\n\n3. **New simplified AppContent** (no auth checks):\n```typescript\nfunction AppContent() {\n  return (\n    <PrayerProvider>\n      <div className=\"min-h-screen\">\n        <SimpleHeader />\n        <main className=\"pb-24 px-4 max-w-6xl mx-auto\">\n          <AppRouter />\n        </main>\n        <Navigation />\n      </div>\n    </PrayerProvider>\n  );\n}\n```\n\n4. **Updated App component** (Lines 117-131):\n```typescript\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem>\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n```\n\n**Key Changes**:\n- No more `AuthProvider` wrapper\n- No authentication state checks\n- No loading screen while checking auth\n- No redirect to landing page\n- Direct access to all routes\n- Simplified header without user info or logout\n\n### 4. Authentication Hooks (`client/src/hooks/useAuth.ts`)\n\n**Action**: This file remains in the codebase but is no longer imported or used in `App.tsx`.\n\n**Note**: You can optionally delete this file if you want to completely remove auth code.\n\n### 5. Authentication Utilities (`client/src/lib/authUtils.ts`)\n\n**Action**: This file remains but is no longer used.\n\n**Note**: Can be deleted for complete auth removal.\n\n### 6. Login/Landing Pages\n\n**Files Affected**:\n- `client/src/pages/login.tsx`\n- `client/src/pages/landing.tsx`\n\n**Action**: These files remain but are no longer imported or routed in `App.tsx`.\n\n**Note**: Can be deleted if you want to completely clean up unused files.\n\n---\n\n## Database Setup\n\n### 7. Create Demo User\n\n**Requirement**: The demo user must exist in the database for the app to work.\n\n**SQL Command**:\n```sql\nINSERT INTO users (id, username, email, password_hash, first_name) \nVALUES ('demo-user', 'demo', 'demo@example.com', 'dummy-hash', 'Demo User') \nON CONFLICT (id) DO NOTHING;\n```\n\n**How to Run**:\nUsing the Replit SQL execution tool:\n```javascript\nexecute_sql_tool({\n  sql_query: \"INSERT INTO users (id, username, email, password_hash, first_name) VALUES ('demo-user', 'demo', 'demo@example.com', 'dummy-hash', 'Demo User') ON CONFLICT (id) DO NOTHING;\",\n  environment: \"development\"\n});\n```\n\n**Why This is Needed**: All API requests now use `userId: \"demo-user\"` via the `devAuth` middleware. If this user doesn't exist in the database, foreign key constraints will fail when trying to create prayer records, achievements, or stats.\n\n### 8. Initialize Database Tables\n\nIf starting fresh, run the database migration:\n\n```bash\nnpm run db:push\n```\n\nThis creates all required tables:\n- `users`\n- `prayer_records`\n- `achievements`\n- `user_stats`\n\n---\n\n## Files That Can Be Optionally Deleted\n\nIf you want to completely remove auth code (not just comment it out):\n\n1. **Backend**:\n   - `server/auth.ts` - JWT authentication logic\n   - `server/replitAuth.ts` - Replit OAuth authentication (if exists)\n\n2. **Frontend**:\n   - `client/src/hooks/useAuth.ts` - Auth state management\n   - `client/src/lib/authUtils.ts` - Auth utility functions\n   - `client/src/pages/login.tsx` - Login/register page\n   - `client/src/pages/landing.tsx` - Landing page for non-authenticated users\n\n3. **Shared**:\n   - Remove auth-related schemas from `shared/schema.ts` if desired:\n     - `registerUserSchema`\n     - `loginUserSchema`\n     - `safeUserSchema`\n\n**Warning**: Deleting these files means you cannot easily restore authentication later. Commenting out code is safer for debugging purposes.\n\n---\n\n## Testing After Removal\n\n### Verify Backend\nTest all endpoints work without authentication:\n\n```bash\n# Stats endpoint\ncurl http://localhost:5000/api/stats\n\n# Prayers endpoint\ncurl http://localhost:5000/api/prayers/2025-10-01\n\n# Achievements endpoint\ncurl http://localhost:5000/api/achievements\n```\n\nAll should return `200 OK` with data (not `401 Unauthorized`).\n\n### Verify Frontend\n1. Navigate to `http://localhost:5000/`\n2. Should go directly to Dashboard (not landing page)\n3. All navigation links should work:\n   - Dashboard\n   - Qaza\n   - Achievements\n   - Analytics\n4. No authentication errors in browser console\n5. All data loads successfully\n\n---\n\n## Restoring Authentication (If Needed)\n\nTo restore authentication later:\n\n1. **Backend**: Uncomment all auth imports and routes in `server/routes.ts`\n2. **Frontend**: Uncomment all auth code in `client/src/App.tsx`\n3. **Middleware**: Change `const isAuthenticated = devAuth` back to `const isAuthenticated = authenticate`\n4. **Database**: Create real users instead of using demo user\n\n---\n\n## Security Notes\n\n**⚠️ IMPORTANT**: The current setup with `devAuth` is **ONLY** safe for local development and debugging.\n\n**Never deploy this configuration to production** because:\n- All requests are treated as the same demo user\n- No actual authentication or authorization\n- Anyone can access all data\n- No user separation or privacy\n\n**For Production**: You must implement proper authentication with real user accounts, password hashing, JWT tokens, and session management.\n\n---\n\n## Summary of Changes\n\n### What Was Removed:\n✅ JWT token generation and verification  \n✅ Password hashing and verification  \n✅ Login/register API endpoints  \n✅ User authentication checks  \n✅ Auth state management on frontend  \n✅ Landing page with login prompt  \n✅ Loading screen for auth verification  \n✅ Logout functionality  \n✅ User info display in header  \n\n### What Was Added:\n✅ Demo user middleware (`devAuth`)  \n✅ Automatic user injection for all requests  \n✅ Simplified header without auth UI  \n✅ Direct routing to Dashboard  \n✅ Demo user in database  \n\n### Result:\n🎯 Full app functionality without any authentication barriers  \n🎯 Perfect for debugging and development  \n🎯 All features accessible immediately  \n🎯 No login/logout flow required  \n\n---\n\n## Additional Notes\n\n- All auth code is **commented out**, not deleted, making restoration easy\n- The `devAuth` middleware ensures all code paths that expect `req.user` still work\n- Database foreign key relationships remain intact with the demo user\n- No breaking changes to API endpoints or data structures\n- React Query and all frontend state management work unchanged\n\n---\n\nLast Updated: October 1, 2025\n","size_bytes":10878},"server/README.md":{"content":"# NamazTracker\n\n","size_bytes":16},"server/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"server/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/replit.md":{"content":"# Overview\n\nThis is a modern Islamic Prayer Tracker web application that helps Muslims track their five daily prayers (Namaz/Salah) with analytics, achievements, and progress visualization. The app provides daily prayer tracking, historical record management (Qaza prayers), streak tracking, and gamification through achievements to encourage consistent prayer habits.\n\n# Setup Instructions\n\n## Database Setup (REQUIRED)\n\n**IMPORTANT: This project requires Supabase PostgreSQL database. Do NOT use Replit's built-in database.**\n\n### Connecting Supabase Database:\n\n1. **Get Supabase Connection String:**\n   - Go to your Supabase project dashboard\n   - Navigate to Settings > Database\n   - Copy the **Transaction Pooler** connection string (uses port 6543)\n   - Format: `postgresql://postgres.[project-ref]:[password]@aws-0-[region].pooler.supabase.com:6543/postgres`\n\n2. **Add to Replit Secrets:**\n   - Open Replit Secrets (lock icon in left sidebar)\n   - Create a new secret named `DATABASE_URL`\n   - Paste your Supabase connection string as the value\n\n3. **Push Database Schema:**\n   ```bash\n   npm run db:push\n   ```\n\n4. **Verify Setup:**\n   - The demo user will be automatically created on first run\n   - Check server logs for \"Database: PostgreSQL (Connected)\"\n\n### Why Supabase?\n- Transaction pooler support for IPv4 compatibility\n- Serverless PostgreSQL with automatic scaling\n- Better performance and reliability than Replit's database\n- Existing project data is stored in Supabase\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Framework & Routing**\n- React 18 with TypeScript for type safety and component-based development\n- Wouter for lightweight client-side routing with four main pages: Dashboard, Qaza (prayer history), Achievements, and Analytics\n- Vite as the build tool and development server for fast builds and hot module replacement\n\n**State Management**\n- React Context API (PrayerContext) for global prayer tracking state\n- TanStack React Query (formerly React Query) for server state management, caching, and API synchronization\n- localStorage for offline persistence of prayer data\n\n**UI & Styling**\n- Shadcn/ui component library built on Radix UI primitives for accessible, customizable components\n- Tailwind CSS with custom CSS variables for theming\n- next-themes for dark/light mode support with system preference detection\n- Glassmorphism design pattern with backdrop blur effects and semi-transparent backgrounds\n\n**Data Visualization**\n- Chart.js with react-chartjs-2 wrapper for prayer analytics\n- Line charts for trends, doughnut charts for completion rates, bar charts for period comparisons\n- Custom progress rings and visual indicators for streaks and weekly progress\n\n## Backend Architecture\n\n**Runtime & Framework**\n- Node.js with Express.js as the web framework\n- TypeScript execution via tsx in development mode\n- RESTful API design with routes for prayer records, achievements, and user statistics\n\n**Development Setup**\n- Hot reload in development using Vite middleware integration\n- esbuild for fast backend TypeScript compilation in production\n- Environment-based configuration with dotenv\n\n**API Structure**\n- `/api/prayers/*` - Prayer record CRUD operations with batch update support\n- `/api/achievements/*` - Achievement tracking and retrieval\n- `/api/stats/*` - User statistics and analytics endpoints\n- Date-based querying with range support for historical data\n\n## Data Storage Solutions\n\n**Database**\n- PostgreSQL as the primary database via Supabase (serverless Postgres with transaction pooler)\n- Drizzle ORM for type-safe database operations and schema management\n- Connected using transaction pooler for IPv4 compatibility (port 6543)\n- Demo user created for development/testing (id: 'demo-user')\n\n**Schema Design**\n- `users` table: Authentication with username/email, password hash, profile data\n- `prayer_records` table: Daily prayer tracking with JSONB column for flexible prayer status storage (completed, onTime, completedAt for each of 5 prayers)\n- `achievements` table: Gamification system with type, title, description, earned date, and metadata JSONB\n- `user_stats` table: Aggregated statistics for performance optimization (total prayers, streaks, perfect weeks, etc.)\n\n**Data Patterns**\n- JSONB columns for flexible schema evolution without migrations\n- Composite keys using userId + date for prayer records\n- Indexed queries for date ranges and user lookups\n\n## Authentication and Authorization\n\n**Current Implementation**\n- Demo mode with hardcoded \"demo-user\" for development\n- Authentication code present but commented out throughout the application\n- JWT token infrastructure prepared (bcrypt for password hashing, jsonwebtoken for tokens)\n- Session management setup with connect-pg-simple for PostgreSQL-backed sessions\n\n**Prepared Authentication Flow**\n- Login/Register schemas with Zod validation\n- Protected API routes with bearer token middleware\n- User context and hooks ready for integration\n- 7-day JWT expiration with automatic refresh\n\n## Core Features Architecture\n\n**Prayer Tracking**\n- Five daily prayers (Fajr, Dhuhr, Asr, Maghrib, Isha) with completion and on-time status\n- Real-time updates with optimistic UI updates via React Query mutations\n- localStorage persistence for offline capability and instant loading\n\n**Qaza (Historical) Management**\n- Three view modes: Daily calendar picker, Weekly bulk update, Monthly overview\n- Batch update API for efficient multi-date modifications\n- Descending date ordering (most recent first) for better UX\n\n**Analytics System**\n- Period-based analytics (week, month, year) with dynamic chart generation\n- Completion rate calculations, on-time percentage tracking\n- Qaza prayer calculation: (Total obligatory prayers for period up to today) - (prayers performed)\n- Trend analysis with historical data visualization\n\n**Achievement System**\n- Multiple achievement types: perfect_day, perfect_week, streak_milestone, consistency tracking\n- Dynamic icon and gradient assignment based on achievement type\n- Metadata storage for achievement context (streak count, period, rates)\n- Milestone progress tracking with percentage completion\n\n**Toast Notifications**\n- Radix UI Toast positioned at top-right\n- Glassmorphism effects with backdrop blur and semi-transparent backgrounds\n- Theme-aware styling for both light and dark modes\n- Success/error/info variants for different notification types\n\n# External Dependencies\n\n**Database & ORM**\n- Supabase (Serverless PostgreSQL) for cloud-hosted database\n- Drizzle ORM for type-safe database operations and migrations\n- postgres npm package for database connections via transaction pooler\n\n**UI Component Library**\n- Radix UI primitives (@radix-ui/*) for accessible, unstyled components\n- Shadcn/ui configuration for pre-built styled components\n- Tailwind CSS for utility-first styling\n- next-themes for theme management\n\n**Data Visualization**\n- Chart.js for chart rendering\n- react-chartjs-2 for React integration\n- Support for Line, Doughnut, and Bar chart types\n\n**Form & Validation**\n- React Hook Form for form state management\n- Zod for runtime schema validation\n- @hookform/resolvers for Zod integration\n\n**State Management & API**\n- TanStack React Query for server state and caching\n- Native fetch API for HTTP requests\n- Custom apiRequest wrapper with credential handling\n\n**Authentication (Prepared)**\n- bcrypt for password hashing (6.0.0 or higher)\n- jsonwebtoken for JWT token generation/verification\n- connect-pg-simple for session storage (configured but not active)\n\n**Development Tools**\n- tsx for TypeScript execution in development\n- Vite for frontend bundling and dev server\n- esbuild for production backend compilation\n- cross-env for cross-platform environment variables","size_bytes":7839},"server/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-10px)' }\n        },\n        'pulse-soft': {\n          '0%, 100%': { opacity: '1' },\n          '50%': { opacity: '0.8' }\n        },\n        'slide-up': {\n          'from': { transform: 'translateY(20px)', opacity: '0' },\n          'to': { transform: 'translateY(0)', opacity: '1' }\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        'float': 'float 6s ease-in-out infinite',\n        'pulse-soft': 'pulse-soft 2s ease-in-out infinite',\n        'slide-up': 'slide-up 0.3s ease-out',\n      },\n      backdropBlur: {\n        xs: '2px',\n      }\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3367},"server/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":635},"server/server/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\nimport { registerUserSchema, loginUserSchema, safeUserSchema } from \"@shared/schema\";\nimport type { RequestHandler, Request, Response } from \"express\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-jwt-secret-here\";\n\n// Hash password\nexport const hashPassword = async (password: string): Promise<string> => {\n  return await bcrypt.hash(password, 12);\n};\n\n// Verify password\nexport const verifyPassword = async (password: string, hashedPassword: string): Promise<boolean> => {\n  return await bcrypt.compare(password, hashedPassword);\n};\n\n// Generate JWT token\nexport const generateToken = (user: User): string => {\n  return jwt.sign(\n    {\n      userId: user.id,\n      username: user.username,\n      email: user.email\n    },\n    JWT_SECRET,\n    { expiresIn: '7d' }\n  );\n};\n\n// Verify JWT token\nexport const verifyToken = (token: string): any => {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n};\n\n// Middleware for authentication\nexport const authenticate: RequestHandler = (req: Request & { user?: any }, res: Response, next) => {\n  try {\n    const authHeader = req.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ message: \"No token provided\" });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = verifyToken(token);\n\n    if (!decoded) {\n      return res.status(401).json({ message: \"Invalid token\" });\n    }\n\n    req.user = decoded;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: \"Authentication failed\" });\n  }\n};\n\n// Register user\nexport const register = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const validatedData = registerUserSchema.parse(req.body);\n\n    // Check if user already exists\n    const existingUsers = await Promise.all([\n      validatedData.username ? storage.getUserByUsername(validatedData.username) : Promise.resolve(null),\n      validatedData.email ? storage.getUserByEmail(validatedData.email) : Promise.resolve(null)\n    ]);\n\n    if (existingUsers[0]) {\n      res.status(400).json({ message: \"Username already exists\" });\n      return;\n    }\n\n    if (existingUsers[1]) {\n      res.status(400).json({ message: \"Email already exists\" });\n      return;\n    }\n\n    // Hash password (validatedData.passwordHash should be present for JWT auth)\n    const passwordHash = await hashPassword(validatedData.passwordHash!);\n\n    // Create user\n    const userData: Omit<User, 'id' | 'createdAt' | 'updatedAt'> = {\n      username: validatedData.username as string,\n      email: validatedData.email as string,\n      passwordHash,\n      firstName: validatedData.firstName || null,\n      lastName: validatedData.lastName || null,\n      profileImageUrl: validatedData.profileImageUrl || null,\n      isActive: true,\n    };\n\n    const newUser = await storage.createUser(userData);\n\n    // Generate token\n    const token = generateToken(newUser as User);\n\n    // Return safe user data (without password)\n    const safeUser = safeUserSchema.parse(newUser);\n\n    res.status(201).json({\n      user: safeUser,\n      token,\n      message: \"Registration successful\"\n    });\n\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    if (error instanceof Error && error.name === \"ZodError\") {\n      res.status(400).json({ message: \"Validation error\", errors: (error as any).errors });\n    } else {\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  }\n};\n\n// Login user\nexport const login = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { username, password } = loginUserSchema.parse(req.body);\n\n    // Find user by username\n    const user = await storage.getUserByUsername(username);\n    if (!user || !user.isActive) {\n      res.status(401).json({ message: \"Invalid credentials\" });\n      return;\n    }\n\n    // Check if user has password hash (JWT auth)\n    if (!user.passwordHash) {\n      res.status(401).json({ message: \"Invalid authentication method\" });\n      return;\n    }\n\n    // Verify password\n    const isValidPassword = await verifyPassword(password, user.passwordHash);\n    if (!isValidPassword) {\n      res.status(401).json({ message: \"Invalid credentials\" });\n      return;\n    }\n\n    // Generate token\n    const token = generateToken(user);\n\n    // Return safe user data (without password)\n    const safeUser = safeUserSchema.parse(user);\n\n    res.json({\n      user: safeUser,\n      token,\n      message: \"Login successful\"\n    });\n\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    if (error instanceof Error && error.name === \"ZodError\") {\n      res.status(400).json({ message: \"Validation error\", errors: (error as any).errors });\n    } else {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  }\n};\n\n// Get current user\nexport const getMe = async (req: Request & { user?: any }, res: Response): Promise<void> => {\n  try {\n    const userId = req.user?.userId;\n    if (!userId) {\n      res.status(401).json({ message: \"User not authenticated\" });\n      return;\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user) {\n      res.status(404).json({ message: \"User not found\" });\n      return;\n    }\n\n    // Return safe user data (without password)\n    const safeUser = safeUserSchema.parse(user);\n    res.json(safeUser);\n\n  } catch (error) {\n    console.error(\"Get user error:\", error);\n    res.status(500).json({ message: \"Failed to get user\" });\n  }\n};\n\n// Logout (client-side token removal)\nexport const logout = (req: Request, res: Response): void => {\n  res.json({ message: \"Logged out successfully\" });\n};\n","size_bytes":5765},"server/server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { config } from \"dotenv\";\nconfig(); // Ensure env vars are loaded\n\n// Use memory database if no DATABASE_URL (for demo/development)\nlet db: any = null;\n\nif (process.env.DATABASE_URL) {\n  const client = postgres(process.env.DATABASE_URL);\n  db = drizzle(client);\n} else {\n  console.log(\"No DATABASE_URL found - using memory storage only\");\n  db = null; // Will use MemStorage\n}\n\nexport { db };\n","size_bytes":484},"server/server/index.ts":{"content":"import { config } from \"dotenv\";\nconfig(); // Load environment variables\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"localhost\", () => {\n    log(`IslamIC Prayer Tracker running at http://localhost:${port}`);\n    log(`Database: PostgreSQL (${process.env.DATABASE_URL ? 'Connected' : 'Not Connected'})`);\n  });\n})();\n","size_bytes":2230},"server/server/routes.ts":{"content":"import type { Express, RequestHandler } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPrayerRecordSchema, insertAchievementSchema, dateParamSchema, dateRangeQuerySchema, userStatsUpdateSchema, batchUpdatePrayersSchema } from \"@shared/schema\";\ninterface DevAuth {\n  (req: any, res: any, next: any): void;\n}\n\n// Development middleware that provides a demo user when not using authentication\nconst devAuth: DevAuth = (req: any, res, next) => {\n  req.user = demoUser;\n  next();\n};\n\n// Import z here\nimport { z } from \"zod\";\n\n// Helper function to calculate and update user statistics\nasync function updateUserStatistics(userId: string): Promise<void> {\n  try {\n    // Get all prayer records for the user\n    const allRecords = await storage.getPrayerRecords(userId);\n    \n    let totalPrayers = 0;\n    let onTimePrayers = 0;\n    let qazaPrayers = 0;\n    let currentStreak = 0;\n    let bestStreak = 0;\n    let perfectWeeks = 0;\n    \n    // Sort records by date for streak calculation\n    const sortedRecords = allRecords.sort((a, b) => b.date.localeCompare(a.date));\n    \n    // Calculate current streak (from most recent date backwards)\n    let streakBroken = false;\n    for (const record of sortedRecords) {\n      if (!streakBroken && record.prayers) {\n        const dayPrayers = Object.values(record.prayers);\n        const allCompleted = dayPrayers.every(prayer => prayer.completed);\n        \n        if (allCompleted) {\n          currentStreak++;\n        } else {\n          streakBroken = true;\n        }\n      }\n    }\n    \n    // Calculate historical streaks to find best streak\n    let tempStreak = 0;\n    const chronologicalRecords = allRecords.sort((a, b) => a.date.localeCompare(b.date));\n    \n    for (const record of chronologicalRecords) {\n      if (record.prayers) {\n        const dayPrayers = Object.values(record.prayers);\n        \n        // Count prayers for totals\n        dayPrayers.forEach(prayer => {\n          totalPrayers++;\n          if (prayer.completed) {\n            if (prayer.onTime) {\n              onTimePrayers++;\n            }\n          } else {\n            qazaPrayers++;\n          }\n        });\n        \n        // Check streak\n        const allCompleted = dayPrayers.every(prayer => prayer.completed);\n        if (allCompleted) {\n          tempStreak++;\n          bestStreak = Math.max(bestStreak, tempStreak);\n        } else {\n          tempStreak = 0;\n        }\n      }\n    }\n    \n    // Calculate perfect weeks\n    const weekGroups = groupRecordsByWeek(chronologicalRecords);\n    perfectWeeks = weekGroups.filter(week => week.completionRate === 100).length;\n    \n    // Ensure best streak includes current streak\n    bestStreak = Math.max(bestStreak, currentStreak);\n    \n    // Update or create user statistics\n    let userStats = await storage.getUserStats(userId);\n    \n    if (userStats) {\n      await storage.updateUserStats(userId, {\n        totalPrayers: totalPrayers - qazaPrayers, // Only count completed prayers\n        onTimePrayers,\n        qazaPrayers,\n        currentStreak,\n        bestStreak,\n        perfectWeeks,\n        lastStreakUpdate: new Date().toISOString().split('T')[0],\n        updatedAt: new Date(),\n      });\n    } else {\n      await storage.createUserStats({\n        userId,\n        totalPrayers: totalPrayers - qazaPrayers,\n        onTimePrayers,\n        qazaPrayers,\n        currentStreak,\n        bestStreak,\n        perfectWeeks,\n        lastStreakUpdate: new Date().toISOString().split('T')[0],\n      });\n    }\n  } catch (error) {\n    console.error('Failed to update user statistics:', error);\n  }\n}\n\n// Helper function to group records by week\nfunction groupRecordsByWeek(records: any[]): Array<{ completionRate: number }> {\n  const weeks: { [key: string]: { completed: number; total: number } } = {};\n  \n  records.forEach(record => {\n    const date = new Date(record.date);\n    const weekStart = new Date(date);\n    weekStart.setDate(date.getDate() - (date.getDay() === 0 ? 6 : date.getDay() - 1));\n    const weekKey = weekStart.toISOString().split('T')[0];\n    \n    if (!weeks[weekKey]) {\n      weeks[weekKey] = { completed: 0, total: 0 };\n    }\n    \n    if (record.prayers) {\n      Object.values(record.prayers).forEach((prayer: any) => {\n        weeks[weekKey].total++;\n        if (prayer.completed) {\n          weeks[weekKey].completed++;\n        }\n      });\n    }\n  });\n  \n  return Object.values(weeks)\n    .filter(week => week.total >= 35) // Only count complete weeks (7 days * 5 prayers)\n    .map(week => ({\n      completionRate: week.total > 0 ? Math.round((week.completed / week.total) * 100) : 0\n    }));\n}\n\n// Create a fake user for demo purposes when not using authentication\nconst demoUser = { userId: \"demo-user\", username: \"Demo User\", email: \"demo@example.com\" };\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  console.log(\"Authentication disabled - using demo user\");\n\n  // Import custom auth functions - COMMENTED OUT\n  // const { register, login, getMe, authenticate } = await import(\"./auth\");\n  // Use devAuth middleware instead\n  const isAuthenticated = devAuth;\n\n  // Custom Authentication Routes - COMMENTED OUT\n  // app.post('/api/auth/register', register);\n  // app.post('/api/auth/login', login);\n  // app.get('/api/auth/me', isAuthenticated, getMe);\n\n  // Auth routes - COMMENTED OUT\n  // app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n  //   try {\n  //     const userId = req.user.userId;\n  //     const user = await storage.getUser(userId);\n  //     res.json(user);\n  //   } catch (error) {\n  //     console.error(\"Error fetching user:\", error);\n  //     res.status(500).json({ message: \"Failed to fetch user\" });\n  //   }\n  // });\n\n  // Get prayer record for a specific date\n  app.get(\"/api/prayers/:date\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Validate date parameter\n      const validatedParams = dateParamSchema.parse(req.params);\n      const { date } = validatedParams;\n      \n      // Add cache control headers to prevent 304 responses\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const record = await storage.getPrayerRecord(userId, date);\n      res.json(record || null);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid date parameter', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // Update prayer record\n  app.post(\"/api/prayers\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n      const validatedData = insertPrayerRecordSchema.parse({ ...req.body, userId });\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const record = await storage.updatePrayerRecord(\n        validatedData.userId!,\n        validatedData.date,\n        validatedData.prayers as any\n      );\n      \n      // Automatically update user statistics after saving prayer record\n      await updateUserStatistics(userId);\n      \n      res.json(record);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid prayer record data', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Validation error';\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Batch update prayer records\n  app.post(\"/api/prayers/batch\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Validate batch update request\n      const validatedData = batchUpdatePrayersSchema.parse(req.body);\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      // Perform batch update\n      const updatedRecords = await storage.batchUpdatePrayerRecords(userId, validatedData.updates);\n      \n      // Automatically update user statistics after batch update\n      await updateUserStatistics(userId);\n      \n      res.json(updatedRecords);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid batch update data', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Validation error';\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Get prayer records for a date range\n  app.get(\"/api/prayers\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Validate query parameters\n      const validatedQuery = dateRangeQuerySchema.parse(req.query);\n      const { startDate, endDate } = validatedQuery;\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const records = await storage.getPrayerRecords(\n        userId,\n        startDate,\n        endDate\n      );\n      \n      res.json(records);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid query parameters', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // Get user achievements\n  app.get(\"/api/achievements\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n\n      const achievements = await storage.getAchievements(userId);\n      res.json(achievements);\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // Create achievement\n  app.post(\"/api/achievements\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n      const validatedData = insertAchievementSchema.parse({ ...req.body, userId });\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const achievement = await storage.createAchievement(validatedData);\n      res.json(achievement);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid achievement data', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Validation error';\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Get user statistics\n  app.get(\"/api/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n      let stats = await storage.getUserStats(userId);\n      \n      if (!stats) {\n        // Create initial stats if they don't exist\n        stats = await storage.createUserStats({ userId });\n      }\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      res.json(stats);\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // Update user statistics\n  app.patch(\"/api/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Validate request body\n      const validatedUpdates = userStatsUpdateSchema.parse(req.body);\n      \n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const stats = await storage.updateUserStats(userId, validatedUpdates);\n      res.json(stats);\n    } catch (error: unknown) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid user statistics data', \n          errors: error.errors.map(e => e.message) \n        });\n      }\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Get yearly Qaza statistics\n  app.get(\"/api/stats/yearly-qaza\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.userId;\n\n      // Add cache control headers\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      // Calculate yearly Qaza statistics\n      const today = new Date();\n      const currentYear = today.getFullYear();\n      const startOfYear = new Date(currentYear, 0, 1);\n      \n      // Calculate total days from start of year to today (inclusive)\n      const daysSinceStartOfYear = Math.floor((today.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n      \n      // Total possible prayers for the year so far (5 prayers per day)\n      const totalPossible = daysSinceStartOfYear * 5;\n      \n      // Get year dates up to today\n      const yearDates: string[] = [];\n      for (let d = new Date(startOfYear); d <= today; d.setDate(d.getDate() + 1)) {\n        yearDates.push(d.toISOString().split('T')[0]);\n      }\n      \n      const startDate = yearDates[0];\n      const endDate = yearDates[yearDates.length - 1];\n      \n      const records = await storage.getPrayerRecords(userId, startDate, endDate);\n      \n      let completed = 0;\n      \n      yearDates.forEach(date => {\n        const record = records.find(r => r.date === date);\n        if (record && record.prayers) {\n          Object.values(record.prayers).forEach(prayer => {\n            if (prayer.completed) completed++;\n          });\n        }\n      });\n      \n      const qazaRemaining = Math.max(0, totalPossible - completed);\n      \n      const response = {\n        totalPossible,\n        completed,\n        qazaRemaining,\n        currentYear\n      };\n      \n      res.json(response);\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error('Error calculating yearly Qaza stats:', error);\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15374},"server/server/storage.ts":{"content":"import {\n  users,\n  prayerRecords,\n  achievements,\n  userStats,\n  type User,\n  type UpsertUser,\n  type PrayerRecord,\n  type InsertPrayerRecord,\n  type Achievement,\n  type InsertAchievement,\n  type UserStats,\n  type InsertUserStats,\n  type DailyPrayers,\n  type BatchUpdatePrayers,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Prayer records\n  getPrayerRecord(userId: string, date: string): Promise<PrayerRecord | undefined>;\n  getPrayerRecords(userId: string, startDate?: string, endDate?: string): Promise<PrayerRecord[]>;\n  createPrayerRecord(record: InsertPrayerRecord): Promise<PrayerRecord>;\n  updatePrayerRecord(userId: string, date: string, prayers: any): Promise<PrayerRecord>;\n  batchUpdatePrayerRecords(userId: string, updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]>;\n\n  // Achievements\n  getAchievements(userId: string): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n\n  // User statistics\n  getUserStats(userId: string): Promise<UserStats | undefined>;\n  createUserStats(stats: InsertUserStats): Promise<UserStats>;\n  updateUserStats(userId: string, updates: Partial<UserStats>): Promise<UserStats>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private prayerRecords: Map<string, PrayerRecord>; // key: userId-date\n  private achievements: Map<string, Achievement>;\n  private userStats: Map<string, UserStats>; // key: userId\n\n  constructor() {\n    this.users = new Map();\n    this.prayerRecords = new Map();\n    this.achievements = new Map();\n    this.userStats = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = this.users.get(userData.id!);\n    if (existingUser) {\n      const updatedUser: User = {\n        ...existingUser,\n        ...userData,\n        updatedAt: new Date(),\n      };\n      this.users.set(userData.id!, updatedUser);\n      return updatedUser;\n    }\n    \n    const user: User = {\n      id: userData.id!,\n      username: userData.username ?? null,\n      email: userData.email ?? null,\n      passwordHash: userData.passwordHash || '', // Required for custom auth\n      firstName: userData.firstName ?? null,\n      lastName: userData.lastName ?? null,\n      profileImageUrl: userData.profileImageUrl ?? null,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    \n    // Initialize user stats\n    const userStatsData: UserStats = {\n      id: randomUUID(),\n      userId: user.id,\n      totalPrayers: 0,\n      onTimePrayers: 0,\n      qazaPrayers: 0,\n      currentStreak: 0,\n      bestStreak: 0,\n      perfectWeeks: 0,\n      lastStreakUpdate: null,\n      updatedAt: new Date(),\n    };\n    this.userStats.set(user.id, userStatsData);\n    \n    return user;\n  }\n\n  async getPrayerRecord(userId: string, date: string): Promise<PrayerRecord | undefined> {\n    return this.prayerRecords.get(`${userId}-${date}`);\n  }\n\n  async getPrayerRecords(userId: string, startDate?: string, endDate?: string): Promise<PrayerRecord[]> {\n    const records = Array.from(this.prayerRecords.values())\n      .filter(record => record.userId === userId);\n    \n    if (startDate && endDate) {\n      return records.filter(record => \n        record.date >= startDate && record.date <= endDate\n      );\n    }\n    \n    return records;\n  }\n\n  async createPrayerRecord(insertRecord: InsertPrayerRecord): Promise<PrayerRecord> {\n    const id = randomUUID();\n    const userId = insertRecord.userId || \"demo-user\"; // Ensure userId is never null\n    const record: PrayerRecord = {\n      id,\n      userId,\n      date: insertRecord.date,\n      prayers: insertRecord.prayers as PrayerRecord[\"prayers\"],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.prayerRecords.set(`${record.userId}-${record.date}`, record);\n    return record;\n  }\n\n  async updatePrayerRecord(userId: string, date: string, prayers: PrayerRecord[\"prayers\"]): Promise<PrayerRecord> {\n    const key = `${userId}-${date}`;\n    const existing = this.prayerRecords.get(key);\n    \n    if (existing) {\n      const updated: PrayerRecord = {\n        ...existing,\n        prayers,\n        updatedAt: new Date(),\n      };\n      this.prayerRecords.set(key, updated);\n      return updated;\n    }\n    \n    // Create new record if it doesn't exist\n    return this.createPrayerRecord({ userId, date, prayers });\n  }\n\n  async batchUpdatePrayerRecords(userId: string, updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]> {\n    const updatedRecords: PrayerRecord[] = [];\n    \n    for (const update of updates) {\n      const record = await this.updatePrayerRecord(userId, update.date, update.prayers as PrayerRecord[\"prayers\"]);\n      updatedRecords.push(record);\n    }\n    \n    return updatedRecords;\n  }\n\n  async getAchievements(userId: string): Promise<Achievement[]> {\n    return Array.from(this.achievements.values())\n      .filter(achievement => achievement.userId === userId)\n      .sort((a, b) => new Date(b.earnedDate).getTime() - new Date(a.earnedDate).getTime());\n  }\n\n  async createAchievement(insertAchievement: InsertAchievement): Promise<Achievement> {\n    const userId = insertAchievement.userId || \"demo-user\"; // Ensure userId is never null\n    \n    // Check for existing achievement with same userId, type, and earnedDate (idempotency)\n    const existingAchievement = Array.from(this.achievements.values()).find(\n      achievement => \n        achievement.userId === userId &&\n        achievement.type === insertAchievement.type &&\n        achievement.earnedDate === insertAchievement.earnedDate\n    );\n    \n    if (existingAchievement) {\n      return existingAchievement; // Return existing achievement instead of creating duplicate\n    }\n    \n    const id = randomUUID();\n    const achievement: Achievement = {\n      id,\n      userId,\n      type: insertAchievement.type,\n      title: insertAchievement.title,\n      description: insertAchievement.description,\n      earnedDate: insertAchievement.earnedDate,\n      metadata: insertAchievement.metadata as Achievement[\"metadata\"] || null,\n      createdAt: new Date(),\n    };\n    \n    this.achievements.set(id, achievement);\n    return achievement;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(user: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> {\n    const userData = {\n      ...user,\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.users.set(userData.id, userData);\n\n    // Initialize user stats\n    const userStatsData: UserStats = {\n      id: randomUUID(),\n      userId: userData.id,\n      totalPrayers: 0,\n      onTimePrayers: 0,\n      qazaPrayers: 0,\n      currentStreak: 0,\n      bestStreak: 0,\n      perfectWeeks: 0,\n      lastStreakUpdate: null,\n      updatedAt: new Date(),\n    };\n    this.userStats.set(userData.id, userStatsData);\n\n    return userData;\n  }\n\n  async getUserStats(userId: string): Promise<UserStats | undefined> {\n    return this.userStats.get(userId);\n  }\n\n  async createUserStats(insertStats: InsertUserStats): Promise<UserStats> {\n    const id = randomUUID();\n    const stats: UserStats = {\n      ...insertStats,\n      id,\n      userId: insertStats.userId || null,\n      totalPrayers: insertStats.totalPrayers || 0,\n      onTimePrayers: insertStats.onTimePrayers || 0,\n      qazaPrayers: insertStats.qazaPrayers || 0,\n      currentStreak: insertStats.currentStreak || 0,\n      bestStreak: insertStats.bestStreak || 0,\n      perfectWeeks: insertStats.perfectWeeks || 0,\n      lastStreakUpdate: insertStats.lastStreakUpdate || null,\n      updatedAt: new Date(),\n    };\n    \n    this.userStats.set(stats.userId!, stats);\n    return stats;\n  }\n\n  async updateUserStats(userId: string, updates: Partial<UserStats>): Promise<UserStats> {\n    const existing = this.userStats.get(userId);\n    if (!existing) {\n      throw new Error(\"User stats not found\");\n    }\n    \n    const updated: UserStats = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    \n    this.userStats.set(userId, updated);\n    return updated;\n  }\n}\n\n// Database storage implementation\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT: these are mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Initialize user stats if it's a new user\n    const existingStats = await this.getUserStats(user.id);\n    if (!existingStats) {\n      await this.createUserStats({ userId: user.id });\n    }\n    \n    return user;\n  }\n\n  // Prayer records\n  async getPrayerRecord(userId: string, date: string): Promise<PrayerRecord | undefined> {\n    const [record] = await db\n      .select()\n      .from(prayerRecords)\n      .where(and(\n        eq(prayerRecords.userId, userId),\n        eq(prayerRecords.date, date)\n      ));\n    return record;\n  }\n\n  async getPrayerRecords(userId: string, startDate?: string, endDate?: string): Promise<PrayerRecord[]> {\n    const conditions = [eq(prayerRecords.userId, userId)];\n    \n    if (startDate && endDate) {\n      conditions.push(\n        gte(prayerRecords.date, startDate),\n        lte(prayerRecords.date, endDate)\n      );\n    }\n    \n    return await db\n      .select()\n      .from(prayerRecords)\n      .where(and(...conditions));\n  }\n\n  async createPrayerRecord(record: InsertPrayerRecord): Promise<PrayerRecord> {\n    const [created] = await db\n      .insert(prayerRecords)\n      .values([record as any])\n      .returning();\n    return created;\n  }\n\n  async updatePrayerRecord(userId: string, date: string, prayers: PrayerRecord[\"prayers\"]): Promise<PrayerRecord> {\n    const existing = await this.getPrayerRecord(userId, date);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(prayerRecords)\n        .set({\n          prayers,\n          updatedAt: new Date(),\n        })\n        .where(eq(prayerRecords.id, existing.id))\n        .returning();\n      return updated;\n    }\n    \n    return this.createPrayerRecord({ \n      userId, \n      date, \n      prayers: prayers as PrayerRecord[\"prayers\"]\n    });\n  }\n\n  async batchUpdatePrayerRecords(userId: string, updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]> {\n    const updatedRecords: PrayerRecord[] = [];\n    \n    // Process updates sequentially to maintain data consistency\n    for (const update of updates) {\n      const record = await this.updatePrayerRecord(userId, update.date, update.prayers as PrayerRecord[\"prayers\"]);\n      updatedRecords.push(record);\n    }\n    \n    return updatedRecords;\n  }\n\n  // Achievements\n  async getAchievements(userId: string): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.userId, userId));\n  }\n\n  async createAchievement(achievement: InsertAchievement): Promise<Achievement> {\n    // Check for existing achievement with same userId, type, and earnedDate (idempotency)\n    const [existingAchievement] = await db\n      .select()\n      .from(achievements)\n      .where(and(\n        eq(achievements.userId, achievement.userId!),\n        eq(achievements.type, achievement.type),\n        eq(achievements.earnedDate, achievement.earnedDate)\n      ));\n    \n    if (existingAchievement) {\n      return existingAchievement; // Return existing achievement instead of creating duplicate\n    }\n    \n    const [created] = await db\n      .insert(achievements)\n      .values([achievement as any])\n      .returning();\n    return created;\n  }\n\n  // User statistics\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(user: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> {\n    const [created] = await db\n      .insert(users)\n      .values(user as any)\n      .returning();\n\n    // Initialize user stats\n    await this.createUserStats({ userId: created.id });\n\n    return created;\n  }\n\n  async getUserStats(userId: string): Promise<UserStats | undefined> {\n    const [stats] = await db\n      .select()\n      .from(userStats)\n      .where(eq(userStats.userId, userId));\n    return stats;\n  }\n\n  async createUserStats(stats: InsertUserStats): Promise<UserStats> {\n    const [created] = await db\n      .insert(userStats)\n      .values([stats])\n      .returning();\n    return created;\n  }\n\n  async updateUserStats(userId: string, updates: Partial<UserStats>): Promise<UserStats> {\n    const [updated] = await db\n      .update(userStats)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(userStats.userId, userId))\n      .returning();\n    \n    if (!updated) {\n      throw new Error(\"User stats not found\");\n    }\n    \n    return updated;\n  }\n}\n\n// Use database storage for persistent data, fallback to memory storage\nexport const storage = db ? new DatabaseStorage() : new MemStorage();\n","size_bytes":14457},"server/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User storage table with custom authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique(),\n  email: varchar(\"email\").unique(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const prayerRecords = pgTable(\"prayer_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  prayers: jsonb(\"prayers\").$type<{\n    fajr: { completed: boolean; onTime: boolean; completedAt?: string };\n    dhuhr: { completed: boolean; onTime: boolean; completedAt?: string };\n    asr: { completed: boolean; onTime: boolean; completedAt?: string };\n    maghrib: { completed: boolean; onTime: boolean; completedAt?: string };\n    isha: { completed: boolean; onTime: boolean; completedAt?: string };\n  }>().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: text(\"type\").notNull(), // 'perfect_week', 'streak_milestone', etc.\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  earnedDate: text(\"earned_date\").notNull(), // YYYY-MM-DD format\n  metadata: jsonb(\"metadata\").$type<{\n    weekNumber?: number;\n    year?: number;\n    streakDays?: number;\n    totalPrayers?: number;\n    onTimePrayers?: number;\n    qazaPrayers?: number;\n    consistencyRate?: number;\n    period?: string;\n    consecutiveDays?: number;\n    prayerType?: string;\n    perfectWeekends?: number;\n    consecutiveWeekends?: number;\n    comebackDays?: number;\n    perfectMonths?: number;\n    specialMonth?: string;\n    dateRange?: { start: string; end: string };\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userStats = pgTable(\"user_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).unique(),\n  totalPrayers: integer(\"total_prayers\").default(0),\n  onTimePrayers: integer(\"on_time_prayers\").default(0),\n  qazaPrayers: integer(\"qaza_prayers\").default(0),\n  currentStreak: integer(\"current_streak\").default(0),\n  bestStreak: integer(\"best_streak\").default(0),\n  perfectWeeks: integer(\"perfect_weeks\").default(0),\n  lastStreakUpdate: text(\"last_streak_update\"), // YYYY-MM-DD format\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  username: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  passwordHash: true, // Include for when password is provided\n}).partial({\n  passwordHash: true, // Make it optional\n});\n\n// Register schema for user registration (requires password)\nexport const registerUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  isActive: true,\n}).extend({\n  passwordHash: z.string().min(60), // bcrypt hash length\n});\n\n// Login schema for user authentication\nexport const loginUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\n// User without password for responses\nexport const safeUserSchema = createInsertSchema(users).omit({\n  passwordHash: true,\n});\n\nexport const insertPrayerRecordSchema = createInsertSchema(prayerRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserStatsSchema = createInsertSchema(userStats).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertPrayerRecord = z.infer<typeof insertPrayerRecordSchema>;\nexport type PrayerRecord = typeof prayerRecords.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type InsertUserStats = z.infer<typeof insertUserStatsSchema>;\nexport type UserStats = typeof userStats.$inferSelect;\n\n// Additional validation schemas for API routes\nexport const dateParamSchema = z.object({\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\")\n});\n\nexport const dateRangeQuerySchema = z.object({\n  startDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Start date must be in YYYY-MM-DD format\").optional(),\n  endDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"End date must be in YYYY-MM-DD format\").optional()\n}).refine(\n  (data) => {\n    if (data.startDate && data.endDate) {\n      return data.startDate <= data.endDate;\n    }\n    return true;\n  },\n  { message: \"Start date must be before or equal to end date\" }\n);\n\nexport const userStatsUpdateSchema = z.object({\n  totalPrayers: z.number().int().min(0).optional(),\n  onTimePrayers: z.number().int().min(0).optional(),\n  qazaPrayers: z.number().int().min(0).optional(),\n  currentStreak: z.number().int().min(0).optional(),\n  bestStreak: z.number().int().min(0).optional(),\n  perfectWeeks: z.number().int().min(0).optional(),\n  lastStreakUpdate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\").nullable().optional()\n});\n\nexport type PrayerType = 'fajr' | 'dhuhr' | 'asr' | 'maghrib' | 'isha';\nexport type PrayerStatus = {\n  completed: boolean;\n  onTime: boolean;\n  completedAt?: string;\n};\n\nexport type DailyPrayers = {\n  fajr: { completed: boolean; onTime: boolean; completedAt?: string };\n  dhuhr: { completed: boolean; onTime: boolean; completedAt?: string };\n  asr: { completed: boolean; onTime: boolean; completedAt?: string };\n  maghrib: { completed: boolean; onTime: boolean; completedAt?: string };\n  isha: { completed: boolean; onTime: boolean; completedAt?: string };\n};\n\n// Schema for individual prayer status\nconst prayerStatusSchema = z.object({\n  completed: z.boolean(),\n  onTime: z.boolean(),\n  completedAt: z.string().optional(),\n});\n\n// Schema for daily prayers object\nconst dailyPrayersSchema = z.object({\n  fajr: prayerStatusSchema,\n  dhuhr: prayerStatusSchema,\n  asr: prayerStatusSchema,\n  maghrib: prayerStatusSchema,\n  isha: prayerStatusSchema,\n});\n\n// Schema for batch update request\nexport const batchUpdatePrayersSchema = z.object({\n  updates: z.array(z.object({\n    date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\"),\n    prayers: dailyPrayersSchema,\n  })).min(1, \"At least one update is required\").max(7, \"Maximum 7 updates per batch\"),\n});\n\nexport type BatchUpdatePrayers = z.infer<typeof batchUpdatePrayersSchema>;\n","size_bytes":7384},"server/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"next-themes\";\nimport { PrayerProvider } from \"./contexts/prayer-context\";\nimport { Navigation } from \"./components/navigation\";\nimport { ThemeToggle } from \"./components/theme-toggle\";\n// import { AuthContext, type AuthContextType, useAuthQuery } from \"./hooks/useAuth\";\n// import { Button } from \"@/components/ui/button\";\n// import { LogOut, User } from \"lucide-react\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\nimport Dashboard from \"./pages/dashboard\";\nimport Qaza from \"./pages/qaza\";\nimport Achievements from \"./pages/achievements\";\nimport Analytics from \"./pages/analytics\";\n// import Login from \"./pages/login.tsx\";\n// import Landing from \"./pages/landing\";\nimport NotFound from \"@/pages/not-found\";\n\n// AUTHENTICATION REMOVED - All auth-related code commented out\n// function AuthProvider({ children }: { children: React.ReactNode }) {\n//   const auth = useAuthQuery();\n//   \n//   return (\n//     <AuthContext.Provider value={auth}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// function AuthenticatedHeader({ user, logout }: { user: any; logout: () => void }) {\n//   return (\n//     <header className=\"glass-nav px-4 py-3 m-4 rounded-2xl\" data-testid=\"header-authenticated\">\n//       <div className=\"flex items-center justify-between max-w-6xl mx-auto\">\n//         <div className=\"flex items-center gap-3\">\n//           <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n//             <span className=\"text-primary-foreground text-lg\">🕌</span>\n//           </div>\n//           <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-title\">\n//             Namaz Tracker\n//           </h1>\n//         </div>\n//         \n//         <div className=\"flex items-center gap-4\">\n//           <div className=\"flex items-center gap-2 text-sm text-muted-foreground\" data-testid=\"text-user-info\">\n//             <User className=\"w-4 h-4\" />\n//             <span>{user?.firstName || user?.email?.split('@')[0] || 'User'}</span>\n//           </div>\n//           <ThemeToggle />\n//           <Button \n//             variant=\"outline\" \n//             size=\"sm\" \n//             onClick={logout}\n//             className=\"flex items-center gap-2\"\n//             data-testid=\"button-logout\"\n//           >\n//             <LogOut className=\"w-4 h-4\" />\n//             Logout\n//           </Button>\n//         </div>\n//       </div>\n//     </header>\n//   );\n// }\n\nfunction SimpleHeader() {\n  return (\n    <header className=\"glass-nav px-4 py-3 m-4 rounded-2xl\" data-testid=\"header-authenticated\">\n      <div className=\"flex items-center justify-between max-w-6xl mx-auto\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-primary-foreground text-lg\">🕌</span>\n          </div>\n          <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-title\">\n            Namaz Tracker\n          </h1>\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          <ThemeToggle />\n        </div>\n      </div>\n    </header>\n  );\n}\n\nfunction AppRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/qaza\" component={Qaza} />\n      <Route path=\"/achievements\" component={Achievements} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\n// function LoadingScreen() {\n//   return (\n//     <div className=\"min-h-screen flex items-center justify-center\" data-testid=\"loading-auth\">\n//       <div className=\"text-center space-y-4\">\n//         <div className=\"w-16 h-16 mx-auto bg-primary rounded-full flex items-center justify-center animate-pulse\">\n//           <span className=\"text-primary-foreground text-2xl\">🕌</span>\n//         </div>\n//         <Skeleton className=\"h-4 w-48 mx-auto\" />\n//         <Skeleton className=\"h-4 w-32 mx-auto\" />\n//       </div>\n//     </div>\n//   );\n// }\n\n// LANDING PAGE COMMENTED OUT - Direct access to dashboard\n// function AppContent() {\n//   const { user, isLoading, isAuthenticated, logout } = useAuthQuery();\n//\n//   if (isLoading) {\n//     return <LoadingScreen />;\n//   }\n//\n//   if (!isAuthenticated) {\n//     return <Landing />;\n//   }\n//\n//   return (\n//     <PrayerProvider>\n//       <div className=\"min-h-screen\">\n//         <AuthenticatedHeader user={user} logout={logout} />\n//         <main className=\"pb-24 px-4 max-w-6xl mx-auto\">\n//           <AuthenticatedRouter />\n//         </main>\n//         <Navigation />\n//       </div>\n//     </PrayerProvider>\n//   );\n// }\n\nfunction AppContent() {\n  return (\n    <PrayerProvider>\n      <div className=\"min-h-screen\">\n        <SimpleHeader />\n        <main className=\"pb-24 px-4 max-w-6xl mx-auto\">\n          <AppRouter />\n        </main>\n        <Navigation />\n      </div>\n    </PrayerProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem>\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5569},"server/client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 96%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%, 0.7);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(158, 70%, 20%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(28, 80%, 45%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 90%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(199, 89%, 48%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(158, 70%, 20%);\n  --chart-1: hsl(158, 70%, 20%);\n  --chart-2: hsl(28, 80%, 45%);\n  --chart-3: hsl(199, 89%, 48%);\n  --chart-4: hsl(0, 84.2%, 60.2%);\n  --chart-5: hsl(262.1, 83.3%, 57.8%);\n  --sidebar: hsl(0, 0%, 100%, 0.7);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(158, 70%, 20%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 90%);\n  --sidebar-accent-foreground: hsl(158, 70%, 20%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(158, 70%, 20%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%, 0.7);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(158, 60%, 30%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(28, 70%, 40%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(199, 80%, 40%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(158, 60%, 30%);\n  --chart-1: hsl(158, 60%, 30%);\n  --chart-2: hsl(28, 70%, 40%);\n  --chart-3: hsl(199, 80%, 40%);\n  --chart-4: hsl(0, 62.8%, 30.6%);\n  --chart-5: hsl(262.1, 83.3%, 57.8%);\n  --sidebar: hsl(222.2, 84%, 4.9%, 0.7);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(158, 60%, 30%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(158, 60%, 30%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(158, 60%, 30%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground min-h-screen;\n    background-image: \n      radial-gradient(circle at 25% 25%, rgba(22, 163, 74, 0.1) 0%, transparent 50%),\n      radial-gradient(circle at 75% 75%, rgba(217, 119, 6, 0.1) 0%, transparent 50%);\n  }\n}\n\n@layer components {\n  .glass-card {\n    @apply backdrop-blur-md border border-white/20;\n    background: var(--card);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  }\n\n  .glass-nav {\n    @apply backdrop-blur-2xl border-2;\n    background: rgba(255, 255, 255, 0);\n    border: 1px solid rgba(255, 255, 255, 0.6);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.15),\n      inset 0 1px 0 rgba(255, 255, 255, 0.8),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.2);\n    backdrop-filter: blur(10px) saturate(180%);\n    -webkit-backdrop-filter: blur(20px) saturate(180%) brightness(1.3);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .glass-nav::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, \n      rgba(255, 255, 255, 0.4) 0%,\n      rgba(255, 255, 255, 0.1) 50%,\n      rgba(255, 255, 255, 0.2) 100%);\n    pointer-events: none;\n    z-index: -1;\n  }\n\n  .dark .glass-nav {\n    background: rgba(15, 23, 42, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.3),\n      inset 0 1px 0 rgba(255, 255, 255, 0.4),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.1);\n  }\n\n  .dark .glass-nav::before {\n    background: linear-gradient(135deg, \n      rgba(255, 255, 255, 0.15) 0%,\n      rgba(255, 255, 255, 0.05) 50%,\n      rgba(255, 255, 255, 0.1) 100%);\n  }\n\n  .glass-toast {\n    @apply backdrop-blur-2xl relative overflow-hidden;\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.6);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.15),\n      inset 0 1px 0 rgba(255, 255, 255, 0.8),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.2);\n    backdrop-filter: blur(10px) saturate(180%);\n    -webkit-backdrop-filter: blur(20px) saturate(180%) brightness(1.3);\n  }\n\n  .glass-toast::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, \n      rgba(255, 255, 255, 0.4) 0%,\n      rgba(255, 255, 255, 0.1) 50%,\n      rgba(255, 255, 255, 0.2) 100%);\n    pointer-events: none;\n    z-index: -1;\n  }\n\n  .dark .glass-toast {\n    background: rgba(15, 23, 42, 0.2);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.3),\n      inset 0 1px 0 rgba(255, 255, 255, 0.4),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.1);\n  }\n\n  .dark .glass-toast::before {\n    background: linear-gradient(135deg, \n      rgba(255, 255, 255, 0.15) 0%,\n      rgba(255, 255, 255, 0.05) 50%,\n      rgba(255, 255, 255, 0.1) 100%);\n  }\n\n  .glass-toast-destructive {\n    @apply backdrop-blur-2xl relative overflow-hidden;\n    background: rgba(239, 68, 68, 0.2);\n    border: 1px solid rgba(239, 68, 68, 0.5);\n    box-shadow: \n      0 8px 32px rgba(239, 68, 68, 0.2),\n      inset 0 1px 0 rgba(255, 255, 255, 0.3),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px) saturate(180%);\n    -webkit-backdrop-filter: blur(20px) saturate(180%) brightness(1.1);\n  }\n\n  .glass-toast-destructive::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, \n      rgba(239, 68, 68, 0.3) 0%,\n      rgba(239, 68, 68, 0.1) 50%,\n      rgba(239, 68, 68, 0.2) 100%);\n    pointer-events: none;\n    z-index: -1;\n  }\n\n  .dark .glass-toast-destructive {\n    background: rgba(127, 29, 29, 0.3);\n    border: 1px solid rgba(239, 68, 68, 0.4);\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.4),\n      inset 0 1px 0 rgba(255, 255, 255, 0.2),\n      inset 0 -1px 0 rgba(255, 255, 255, 0.05);\n  }\n\n  .dark .glass-toast-destructive::before {\n    background: linear-gradient(135deg, \n      rgba(239, 68, 68, 0.2) 0%,\n      rgba(239, 68, 68, 0.05) 50%,\n      rgba(239, 68, 68, 0.1) 100%);\n  }\n\n  .prayer-checkbox {\n    @apply appearance-none w-6 h-6 border-2 border-primary rounded-full relative cursor-pointer transition-all duration-300 hover:scale-105;\n  }\n\n  .prayer-checkbox:checked {\n    @apply bg-primary scale-110;\n  }\n\n  .prayer-checkbox:checked::after {\n    content: \"✓\";\n    @apply absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-primary-foreground text-sm font-bold;\n  }\n\n  .progress-ring {\n    @apply -rotate-90;\n  }\n\n  .progress-ring-circle {\n    @apply transition-all ease-in-out;\n    transition-duration: 600ms;\n  }\n}\n\n@layer utilities {\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-pulse-soft {\n    animation: pulse-soft 2s ease-in-out infinite;\n  }\n\n  .animate-slide-up {\n    animation: slide-up 0.3s ease-out;\n  }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes pulse-soft {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.8; }\n}\n\n@keyframes slide-up {\n  from { transform: translateY(20px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n","size_bytes":8126},"server/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/client/src/components/achievement-card.tsx":{"content":"import { Trophy, Star, Medal, Calendar, Flame, Target, CheckCircle, Award, Crown, Zap, Moon, Sun, Shield, RotateCcw, CalendarDays } from 'lucide-react';\nimport { Achievement } from '@shared/schema';\nimport { cn } from '@/lib/utils';\n\n// Helper function to convert background color to text color\nfunction getTextColorFromBg(bgColor: string): string {\n  const colorMap: { [key: string]: string } = {\n    'bg-primary': 'text-primary',\n    'bg-secondary': 'text-secondary',\n    'bg-accent': 'text-accent',\n    'bg-orange-500': 'text-orange-600',\n    'bg-yellow-500': 'text-yellow-600',\n    'bg-green-500': 'text-green-600',\n    'bg-blue-500': 'text-blue-600',\n    'bg-purple-500': 'text-purple-600',\n    'bg-pink-500': 'text-pink-600',\n    'bg-red-500': 'text-red-600',\n    'bg-indigo-500': 'text-indigo-600',\n    'bg-teal-500': 'text-teal-600',\n  };\n  return colorMap[bgColor] || 'text-primary';\n}\n\ninterface AchievementCardProps {\n  achievement: Achievement;\n  index: number;\n}\n\nconst achievementIcons = {\n  perfect_day: CheckCircle,\n  perfect_week: Trophy,\n  perfect_month: Medal,\n  streak_milestone: Flame,\n  prayer_milestone: Target,\n  consistency: Calendar,\n  early_bird: Star,\n  night_owl: Moon,\n  golden_hour: Sun,\n  weekend_warrior: Shield,\n  dedication: Crown,\n  comeback: RotateCcw,\n  monthly_champion: CalendarDays,\n  special: Award,\n  seasonal: Zap,\n};\n\nconst achievementGradients = {\n  perfect_day: 'from-green-400 to-green-600',\n  perfect_week: 'from-blue-400 to-blue-600', \n  perfect_month: 'from-purple-400 to-purple-600',\n  streak_milestone: 'from-orange-400 to-red-500',\n  prayer_milestone: 'from-yellow-400 to-yellow-600',\n  consistency: 'from-teal-400 to-teal-600',\n  early_bird: 'from-pink-400 to-pink-600',\n  night_owl: 'from-slate-400 to-slate-600',\n  golden_hour: 'from-amber-400 to-orange-500',\n  weekend_warrior: 'from-cyan-400 to-cyan-600',\n  dedication: 'from-indigo-400 to-indigo-600',\n  comeback: 'from-lime-400 to-green-500',\n  monthly_champion: 'from-violet-400 to-purple-500',\n  special: 'from-amber-400 to-amber-600',\n  seasonal: 'from-emerald-400 to-emerald-600',\n  default: 'from-primary to-accent'\n};\n\nexport function AchievementCard({ achievement, index }: AchievementCardProps) {\n  const Icon = achievementIcons[achievement.type as keyof typeof achievementIcons] || Trophy;\n  const gradient = achievementGradients[achievement.type as keyof typeof achievementGradients] || achievementGradients.default;\n\n  return (\n    <div \n      className=\"glass-card rounded-2xl p-6 hover:scale-105 transition-transform duration-300 animate-slide-up\"\n      style={{ animationDelay: `${index * 100}ms` }}\n      data-testid={`achievement-card-${index}`}\n    >\n      <div className=\"text-center mb-4\">\n        <div className={cn(\n          \"w-16 h-16 bg-gradient-to-br rounded-full flex items-center justify-center mx-auto mb-3\",\n          gradient\n        )}>\n          <Icon className=\"w-8 h-8 text-white\" />\n        </div>\n        <h4 className=\"font-semibold text-foreground\" data-testid={`achievement-title-${index}`}>\n          {achievement.title}\n        </h4>\n        <p className=\"text-sm text-muted-foreground\" data-testid={`achievement-description-${index}`}>\n          {achievement.description}\n        </p>\n      </div>\n      <div className=\"border-t pt-4 text-sm text-muted-foreground space-y-1\">\n        <p data-testid={`achievement-date-${index}`}>\n          <strong>Date:</strong> {new Date(achievement.earnedDate).toLocaleDateString()}\n        </p>\n        {achievement.metadata?.weekNumber && achievement.metadata?.year && (\n          <p data-testid={`achievement-week-${index}`}>\n            <strong>Week:</strong> {achievement.metadata.weekNumber} of {achievement.metadata.year}\n          </p>\n        )}\n        {achievement.metadata?.streakDays && (\n          <p data-testid={`achievement-streak-${index}`}>\n            <strong>Streak:</strong> {achievement.metadata.streakDays} days\n          </p>\n        )}\n        {achievement.metadata?.totalPrayers && (\n          <p data-testid={`achievement-prayers-${index}`}>\n            <strong>Prayers:</strong> {achievement.metadata.totalPrayers} completed\n          </p>\n        )}\n        {achievement.metadata?.consistencyRate && (\n          <p data-testid={`achievement-consistency-${index}`}>\n            <strong>Rate:</strong> {achievement.metadata.consistencyRate}%\n          </p>\n        )}\n        {achievement.metadata?.onTimePrayers !== undefined && (\n          <p data-testid={`achievement-ontime-${index}`}>\n            <strong>On-time:</strong> {achievement.metadata.onTimePrayers} prayers\n          </p>\n        )}\n        {achievement.metadata?.period && (\n          <p data-testid={`achievement-period-${index}`}>\n            <strong>Period:</strong> {achievement.metadata.period}\n          </p>\n        )}\n        {achievement.metadata?.consecutiveDays && (\n          <p data-testid={`achievement-consecutive-${index}`}>\n            <strong>Consecutive:</strong> {achievement.metadata.consecutiveDays} days\n          </p>\n        )}\n        {achievement.metadata?.prayerType && (\n          <p data-testid={`achievement-prayer-type-${index}`}>\n            <strong>Prayer:</strong> {achievement.metadata.prayerType.charAt(0).toUpperCase() + achievement.metadata.prayerType.slice(1)}\n          </p>\n        )}\n        {achievement.metadata?.perfectWeekends && (\n          <p data-testid={`achievement-weekends-${index}`}>\n            <strong>Perfect Weekends:</strong> {achievement.metadata.perfectWeekends}\n          </p>\n        )}\n        {achievement.metadata?.consecutiveWeekends && (\n          <p data-testid={`achievement-consecutive-weekends-${index}`}>\n            <strong>Consecutive Weekends:</strong> {achievement.metadata.consecutiveWeekends}\n          </p>\n        )}\n        {achievement.metadata?.comebackDays && (\n          <p data-testid={`achievement-comeback-${index}`}>\n            <strong>Comeback:</strong> {achievement.metadata.comebackDays} days\n          </p>\n        )}\n        {achievement.metadata?.perfectMonths && (\n          <p data-testid={`achievement-perfect-months-${index}`}>\n            <strong>Perfect Months:</strong> {achievement.metadata.perfectMonths}\n          </p>\n        )}\n        {achievement.metadata?.specialMonth && (\n          <p data-testid={`achievement-special-month-${index}`}>\n            <strong>Special Month:</strong> {achievement.metadata.specialMonth}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\ninterface MilestoneProgressProps {\n  title: string;\n  description: string;\n  current: number;\n  target: number;\n  icon: React.ComponentType<{ className?: string }>;\n  color: string;\n}\n\nexport function MilestoneProgress({ title, description, current, target, icon: Icon, color }: MilestoneProgressProps) {\n  const percentage = Math.min((current / target) * 100, 100);\n\n  return (\n    <div className=\"flex items-center justify-between\" data-testid={`milestone-${title.toLowerCase().replace(' ', '-')}`}>\n      <div className=\"flex items-center gap-3\">\n        <div className={cn(\"w-10 h-10 rounded-full flex items-center justify-center\", color)}>\n          <Icon className=\"w-5 h-5 text-white\" />\n        </div>\n        <div>\n          <p className=\"font-medium\" data-testid={`milestone-title-${title.toLowerCase().replace(' ', '-')}`}>\n            {title}\n          </p>\n          <p className=\"text-sm text-muted-foreground\" data-testid={`milestone-description-${title.toLowerCase().replace(' ', '-')}`}>\n            {description}\n          </p>\n        </div>\n      </div>\n      <div className=\"text-right\">\n        <p className={cn(\"text-sm font-medium\", getTextColorFromBg(color))} data-testid={`milestone-progress-${title.toLowerCase().replace(' ', '-')}`}>\n          {current}/{target}\n        </p>\n        <div className=\"w-20 h-2 bg-muted rounded-full overflow-hidden\">\n          <div \n            className={cn(\"h-full rounded-full transition-all duration-300\", color)}\n            style={{ width: `${percentage}%` }}\n            data-testid={`milestone-bar-${title.toLowerCase().replace(' ', '-')}`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8142},"server/client/src/components/analytics-charts.tsx":{"content":"import { useState } from 'react';\nimport { Line, Doughnut, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  BarElement,\n  Filler,\n} from 'chart.js';\nimport { useQuery } from '@tanstack/react-query';\nimport { getTrendDataForPeriod, getAnalyticsDataForPeriod, getPeriodSummary } from '../lib/prayer-utils';\nimport { createAuthAwareQuery } from '../lib/authUtils';\nimport { apiService } from '../lib/api-service';\nimport { cn } from '@/lib/utils';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  BarElement,\n  Filler\n);\n\nexport function AnalyticsCharts() {\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'year'>('week');\n\n  const timePeriods = [\n    { value: 'week', label: 'Week' },\n    { value: 'month', label: 'Month' },\n    { value: 'year', label: 'Year' },\n  ];\n\n  // Fetch trend data for the selected period\n  const { data: trendData, isLoading: trendLoading } = useQuery({\n    queryKey: ['/analytics/trend', selectedPeriod],\n    queryFn: createAuthAwareQuery(() => getTrendDataForPeriod(selectedPeriod)),\n  });\n\n  // Fetch analytics data for the selected period\n  const { data: analyticsData, isLoading: analyticsLoading } = useQuery({\n    queryKey: ['/analytics/data', selectedPeriod],\n    queryFn: createAuthAwareQuery(() => getAnalyticsDataForPeriod(selectedPeriod)),\n  });\n\n  // Fetch summary statistics for the selected period\n  const { data: summaryData, isLoading: summaryLoading } = useQuery({\n    queryKey: ['/analytics/summary', selectedPeriod],\n    queryFn: createAuthAwareQuery(() => getPeriodSummary(selectedPeriod)),\n  });\n\n  // Fetch yearly Qaza statistics (independent of selected period)\n  const { data: yearlyQazaData, isLoading: yearlyQazaLoading } = useQuery({\n    queryKey: ['/api/stats/yearly-qaza'],\n    queryFn: createAuthAwareQuery(() => apiService.getYearlyQazaStats()),\n  });\n\n  // Fetch user statistics for Qaza vs On-time prayer comparison\n  const { data: userStatsData, isLoading: userStatsLoading } = useQuery({\n    queryKey: ['/api/stats'],\n    queryFn: createAuthAwareQuery(() => apiService.getUserStats()),\n  });\n\n  const isLoading = trendLoading || analyticsLoading || summaryLoading || yearlyQazaLoading || userStatsLoading;\n\n  // Main trend chart data\n  const mainChartData = {\n    labels: trendData?.labels || [],\n    datasets: [\n      {\n        label: 'Completed Prayers',\n        data: trendData?.dataPoints || [],\n        borderColor: 'hsl(158, 70%, 20%)',\n        backgroundColor: 'hsla(158, 70%, 20%, 0.1)',\n        fill: true,\n        tension: 0.4,\n      },\n    ],\n  };\n\n  const mainChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 5,\n        grid: {\n          color: 'hsl(214.3, 31.8%, 91.4%)',\n        },\n      },\n      x: {\n        grid: {\n          color: 'hsl(214.3, 31.8%, 91.4%)',\n        },\n      },\n    },\n  };\n\n  // Prayer distribution chart data\n  const distributionData = {\n    labels: ['Fajr', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'],\n    datasets: [\n      {\n        data: analyticsData ? Object.values(analyticsData).map(prayer => \n          prayer.total > 0 ? Math.round((prayer.completed / prayer.total) * 100) : 0\n        ) : [0, 0, 0, 0, 0],\n        backgroundColor: [\n          'hsl(158, 70%, 20%)',\n          'hsl(28, 80%, 45%)',\n          'hsl(199, 89%, 48%)',\n          'hsl(0, 84.2%, 60.2%)',\n          'hsl(158, 60%, 30%)',\n        ],\n      },\n    ],\n  };\n\n  const distributionOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom' as const,\n      },\n    },\n  };\n\n  // Period comparison chart data (reuses trend data for consistency)\n  const comparisonData = {\n    labels: trendData?.labels || [],\n    datasets: [\n      {\n        label: 'Prayers Completed',\n        data: trendData?.dataPoints || [],\n        backgroundColor: 'hsl(158, 70%, 20%)',\n        borderRadius: 8,\n      },\n    ],\n  };\n\n  const comparisonOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 5,\n      },\n    },\n  };\n\n  // Qaza vs On-time prayer performance chart data\n  const qazaPerformanceData = {\n    labels: ['On-time Prayers', 'Qaza Prayers'],\n    datasets: [\n      {\n        data: [\n          userStatsData?.onTimePrayers || 0,\n          userStatsData?.qazaPrayers || 0,\n        ],\n        backgroundColor: [\n          'hsl(158, 70%, 50%)', // Green for on-time prayers\n          'hsl(0, 84.2%, 60.2%)', // Red for Qaza prayers\n        ],\n        borderWidth: 2,\n        borderColor: [\n          'hsl(158, 70%, 40%)',\n          'hsl(0, 84.2%, 50%)',\n        ],\n      },\n    ],\n  };\n\n  const qazaPerformanceOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom' as const,\n        labels: {\n          padding: 20,\n          font: {\n            size: 12,\n          },\n        },\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context: any) {\n            const total = (userStatsData?.onTimePrayers || 0) + (userStatsData?.qazaPrayers || 0);\n            const percentage = total > 0 ? Math.round((context.parsed / total) * 100) : 0;\n            return `${context.label}: ${context.parsed} (${percentage}%)`;\n          },\n        },\n      },\n    },\n  };\n\n  // Statistics from summary data\n  const totalPrayers = summaryData?.totalPrayers || 0;\n  const totalPossible = summaryData?.totalPossible || 0;\n  const successRate = summaryData?.successRate || 0;\n  const totalQaza = summaryData?.qazaPrayers || 0;\n\n  // Dynamic titles based on period\n  const comparisonTitle = selectedPeriod === 'week' \n    ? 'Weekly Comparison' \n    : selectedPeriod === 'month' \n    ? 'Monthly Comparison' \n    : 'Yearly Comparison';\n\n  const trendTitle = `Prayer Completion Trend (${selectedPeriod.charAt(0).toUpperCase() + selectedPeriod.slice(1)})`;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Time Period Selector */}\n        <div className=\"glass-card rounded-2xl p-4\">\n          <div className=\"flex justify-center gap-2\">\n            {timePeriods.map((period) => (\n              <button\n                key={period.value}\n                onClick={() => setSelectedPeriod(period.value as any)}\n                className={cn(\n                  \"px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300\",\n                  selectedPeriod === period.value\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                )}\n                data-testid={`period-${period.value}`}\n              >\n                {period.label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Loading Skeletons */}\n        <div className=\"glass-card rounded-2xl p-6\">\n          <div className=\"h-6 bg-muted rounded mb-4 w-48 animate-pulse\"></div>\n          <div className=\"h-64 bg-muted rounded animate-pulse\"></div>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"h-6 bg-muted rounded mb-4 w-32 animate-pulse\"></div>\n            <div className=\"h-48 bg-muted rounded animate-pulse\"></div>\n          </div>\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"h-6 bg-muted rounded mb-4 w-32 animate-pulse\"></div>\n            <div className=\"h-48 bg-muted rounded animate-pulse\"></div>\n          </div>\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"h-6 bg-muted rounded mb-4 w-32 animate-pulse\"></div>\n            <div className=\"h-48 bg-muted rounded animate-pulse\"></div>\n            <div className=\"mt-4 space-y-2\">\n              <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n              <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n              <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"glass-card rounded-2xl p-6 text-center\">\n              <div className=\"h-8 bg-muted rounded mb-4 mx-auto w-8 animate-pulse\"></div>\n              <div className=\"h-6 bg-muted rounded mb-2 w-24 mx-auto animate-pulse\"></div>\n              <div className=\"h-8 bg-muted rounded mb-2 w-16 mx-auto animate-pulse\"></div>\n              <div className=\"h-4 bg-muted rounded w-32 mx-auto animate-pulse\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Time Period Selector */}\n      <div className=\"glass-card rounded-2xl p-4\">\n        <div className=\"flex justify-center gap-2\">\n          {timePeriods.map((period) => (\n            <button\n              key={period.value}\n              onClick={() => setSelectedPeriod(period.value as any)}\n              className={cn(\n                \"px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300\",\n                selectedPeriod === period.value\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n              )}\n              data-testid={`period-${period.value}`}\n            >\n              {period.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Main Chart */}\n      <div className=\"glass-card rounded-2xl p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-prayer-completion-trend\">\n          {trendTitle}\n        </h3>\n        <div className=\"h-64\">\n          <Line data={mainChartData} options={mainChartOptions} />\n        </div>\n      </div>\n\n      {/* Prayer-specific Charts */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <div className=\"glass-card rounded-2xl p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-prayer-distribution\">\n            Prayer Distribution\n          </h3>\n          <div className=\"h-48\">\n            <Doughnut data={distributionData} options={distributionOptions} />\n          </div>\n        </div>\n        \n        <div className=\"glass-card rounded-2xl p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-weekly-comparison\">\n            {comparisonTitle}\n          </h3>\n          <div className=\"h-48\">\n            <Bar data={comparisonData} options={comparisonOptions} />\n          </div>\n        </div>\n\n        <div className=\"glass-card rounded-2xl p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-qaza-performance\">\n            Prayer Performance\n          </h3>\n          <div className=\"h-48\">\n            <Doughnut data={qazaPerformanceData} options={qazaPerformanceOptions} />\n          </div>\n          <div className=\"mt-4 text-center space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">On-time:</span>\n              <span className=\"font-semibold text-green-600\" data-testid=\"text-ontime-count\">\n                {userStatsData?.onTimePrayers || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Qaza:</span>\n              <span className=\"font-semibold text-red-600\" data-testid=\"text-qaza-count\">\n                {userStatsData?.qazaPrayers || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm font-medium border-t pt-2\">\n              <span className=\"text-muted-foreground\">Total:</span>\n              <span data-testid=\"text-performance-total\">\n                {(userStatsData?.onTimePrayers || 0) + (userStatsData?.qazaPrayers || 0)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Statistics Summary */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"glass-card rounded-2xl p-6 text-center\">\n          <div className=\"text-3xl mb-3\">🤲</div>\n          <h4 className=\"text-lg font-semibold mb-2\" data-testid=\"text-total-prayers-title\">\n            Total Prayers\n          </h4>\n          <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-prayers\">\n            {totalPrayers}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">Since tracking started</p>\n        </div>\n        \n        <div className=\"glass-card rounded-2xl p-6 text-center\">\n          <div className=\"text-3xl mb-3\">📊</div>\n          <h4 className=\"text-lg font-semibold mb-2\" data-testid=\"text-success-rate-title\">\n            Success Rate\n          </h4>\n          <p className=\"text-2xl font-bold text-secondary\" data-testid=\"text-success-rate\">\n            {successRate}%\n          </p>\n          <p className=\"text-sm text-muted-foreground\">Overall completion rate</p>\n        </div>\n        \n        <div className=\"glass-card rounded-2xl p-6 text-center\">\n          <div className=\"text-3xl mb-3\">⏰</div>\n          <h4 className=\"text-lg font-semibold mb-2\" data-testid=\"text-qaza-prayers-title\">\n            Qaza Prayers\n          </h4>\n          <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-total-qaza\">\n            {totalQaza}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">Need to be completed</p>\n        </div>\n        \n        <div className=\"glass-card rounded-2xl p-6 text-center\">\n          <div className=\"text-3xl mb-3\">📅</div>\n          <h4 className=\"text-lg font-semibold mb-2\" data-testid=\"text-yearly-qaza-title\">\n            Remaining Qaza {yearlyQazaData?.currentYear || new Date().getFullYear()}\n          </h4>\n          <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-yearly-qaza-remaining\">\n            {yearlyQazaData?.qazaRemaining || 0}\n          </p>\n          <div className=\"space-y-1 mt-2\">\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-yearly-total-possible\">\n              {yearlyQazaData?.totalPossible || 0} total possible\n            </p>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-yearly-completed\">\n              {yearlyQazaData?.completed || 0} completed\n            </p>\n            <p className=\"text-xs text-muted-foreground\" data-testid=\"text-yearly-completion-percentage\">\n              {yearlyQazaData && yearlyQazaData.totalPossible > 0 \n                ? Math.round((yearlyQazaData.completed / yearlyQazaData.totalPossible) * 100)\n                : 0}% completion rate\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15240},"server/client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { Home, Trophy, BarChart3, Calendar } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst navItems = [\n  { path: '/', icon: Home, label: 'Dashboard' },\n  { path: '/qaza', icon: Calendar, label: 'Qaza' },\n  { path: '/achievements', icon: Trophy, label: 'Achievements' },\n  { path: '/analytics', icon: BarChart3, label: 'Analytics' },\n];\n\nexport function Navigation() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"glass-nav fixed bottom-4 left-4 right-4 z-50 rounded-2xl p-2\" data-testid=\"nav-bottom\">\n      <div className=\"flex justify-around max-w-md mx-auto\">\n        {navItems.map((item) => (\n          <Link key={item.path} href={item.path}>\n            <button\n              className={cn(\n                \"flex flex-col items-center gap-1 px-4 py-3 rounded-xl transition-all duration-300 relative\",\n                location === item.path\n                  ? \"bg-primary/20 text-black dark:text-primary-foreground backdrop-blur-md border border-primary/30 shadow-lg shadow-primary/20\"\n                  : \"text-muted-foreground hover:bg-white/10 hover:backdrop-blur-sm hover:border hover:border-white/20 dark:hover:bg-white/5\"\n              )}\n              data-testid={`nav-${item.label.toLowerCase()}`}\n            >\n              <item.icon className=\"w-5 h-5\" />\n              <span className=\"text-xs font-medium\">{item.label}</span>\n            </button>\n          </Link>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1512},"server/client/src/components/prayer-tracker.tsx":{"content":"import { Sun, Cloud, Star } from 'lucide-react';\nimport { usePrayer } from '../contexts/prayer-context';\nimport { prayerNames, prayerTimes } from '../lib/prayer-utils';\nimport { PrayerType } from '@shared/schema';\nimport { cn } from '@/lib/utils';\n\nconst prayerIcons = {\n  fajr: Sun,\n  dhuhr: Sun,\n  asr: Cloud,\n  maghrib: Star,\n  isha: Star,\n};\n\nconst prayerColors = {\n  fajr: 'bg-primary/10 text-primary',\n  dhuhr: 'bg-secondary/10 text-secondary',\n  asr: 'bg-accent/10 text-accent',\n  maghrib: 'bg-destructive/10 text-destructive',\n  isha: 'bg-primary/10 text-primary',\n};\n\nexport function PrayerTracker() {\n  const { todayPrayers, togglePrayer, isLoading } = usePrayer();\n\n  if (isLoading) {\n    return (\n      <div className=\"glass-card rounded-2xl p-6 mb-6\">\n        <div className=\"animate-pulse space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"flex items-center justify-between p-4 rounded-xl bg-muted/30\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                <div>\n                  <div className=\"w-16 h-4 bg-muted rounded\"></div>\n                  <div className=\"w-24 h-3 bg-muted/70 rounded mt-2\"></div>\n                </div>\n              </div>\n              <div className=\"w-6 h-6 bg-muted rounded-full\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"glass-card rounded-2xl p-6 mb-6\">\n      <h3 className=\"text-lg font-semibold mb-4 text-center\" data-testid=\"text-todays-prayers\">\n        Today's Prayers\n      </h3>\n      <div className=\"space-y-4\">\n        {Object.entries(todayPrayers).map(([prayer, status]) => {\n          const prayerKey = prayer as PrayerType;\n          const Icon = prayerIcons[prayerKey];\n          \n          return (\n            <div\n              key={prayer}\n              className={cn(\n                \"flex items-center justify-between p-4 rounded-xl transition-all duration-300 hover:bg-muted/50 cursor-pointer\",\n                status.completed ? \"bg-primary/5\" : \"bg-muted/30\"\n              )}\n              onClick={() => togglePrayer(prayerKey)}\n              data-testid={`prayer-item-${prayer}`}\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className={cn(\"w-12 h-12 rounded-full flex items-center justify-center\", prayerColors[prayerKey])}>\n                  <Icon className=\"w-6 h-6\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-foreground\" data-testid={`text-prayer-name-${prayer}`}>\n                    {prayerNames[prayerKey]}\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-prayer-time-${prayer}`}>\n                    {prayer === 'fajr' && 'Dawn Prayer'} • {prayerTimes[prayerKey]}\n                  </p>\n                </div>\n              </div>\n              <input\n                type=\"checkbox\"\n                checked={status.completed}\n                onChange={() => togglePrayer(prayerKey)}\n                className=\"prayer-checkbox\"\n                data-testid={`checkbox-prayer-${prayer}`}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3316},"server/client/src/components/qaza-prayer-manager.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Calendar as CalendarIcon, Save, X, Sun, Cloud, Star, Clock } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiService, convertPrayerRecordToDailyPrayers } from '@/lib/api-service';\nimport { prayerNames, getPastWeeks, getWeeksFromJanuary, getPastMonthsFromJanuary, calculateWeekCompletion, calculateMonthCompletion, isWeekInFuture } from '@/lib/prayer-utils';\nimport { PrayerType, PrayerRecord } from '@shared/schema';\nimport { DailyPrayers } from '@/contexts/prayer-context';\nimport { apiRequest } from '@/lib/queryClient';\nimport { createAuthAwareQuery } from '@/lib/authUtils';\n\nconst prayerIcons = {\n  fajr: Sun,\n  dhuhr: Sun,\n  asr: Cloud,\n  maghrib: Star,\n  isha: Star,\n};\n\nconst prayerColors = {\n  fajr: 'bg-primary/10 text-primary',\n  dhuhr: 'bg-secondary/10 text-secondary',\n  asr: 'bg-accent/10 text-accent',\n  maghrib: 'bg-destructive/10 text-destructive',\n  isha: 'bg-primary/10 text-primary',\n};\n\nconst defaultPrayers: DailyPrayers = {\n  fajr: { completed: false, onTime: false },\n  dhuhr: { completed: false, onTime: false },\n  asr: { completed: false, onTime: false },\n  maghrib: { completed: false, onTime: false },\n  isha: { completed: false, onTime: false },\n};\n\nexport function QazaPrayerManager() {\n  // Tab state\n  const [activeTab, setActiveTab] = useState<\"daily\" | \"weekly\" | \"monthly\">(\"daily\");\n  \n  // Daily view state\n  const [selectedDate, setSelectedDate] = useState<Date>(() => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    return yesterday;\n  });\n  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);\n  const [editedPrayers, setEditedPrayers] = useState<DailyPrayers>(defaultPrayers);\n  const [originalPrayers, setOriginalPrayers] = useState<DailyPrayers>(defaultPrayers);\n  const [hasChanges, setHasChanges] = useState(false);\n  \n  // Weekly view state\n  const [selectedWeeks, setSelectedWeeks] = useState<Set<string>>(new Set());\n  const [isMarkingAsCompleted, setIsMarkingAsCompleted] = useState(true);\n  const [weeklyHasChanges, setWeeklyHasChanges] = useState(false);\n  const [pastWeeks, setPastWeeks] = useState<Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    weekLabel: string;\n  }>>([]);\n  \n  // Monthly view state\n  const [selectedMonths, setSelectedMonths] = useState<Set<string>>(new Set());\n  const [isMonthMarkingAsCompleted, setIsMonthMarkingAsCompleted] = useState(true);\n  const [monthlyHasChanges, setMonthlyHasChanges] = useState(false);\n  const [pastMonths, setPastMonths] = useState<Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    monthLabel: string;\n    monthName: string;\n    year: number;\n  }>>([]);\n  \n  // Confirmation dialog state\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [confirmationDetails, setConfirmationDetails] = useState<{\n    weekCount: number;\n    dateCount: number;\n    prayerCount: number;\n    action: 'completed' | 'missed';\n    dateRange: { start: string; end: string };\n  } | null>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const selectedDateString = selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '';\n\n  // Fetch prayer data for selected date\n  const { data: prayerRecord, isLoading: isLoadingPrayers, refetch } = useQuery<PrayerRecord | null>({\n    queryKey: ['/api/prayers', selectedDateString],\n    queryFn: createAuthAwareQuery(() => apiService.getPrayerRecord(selectedDateString)),\n    enabled: !!selectedDateString,\n    staleTime: 0, // Always refetch to get latest data\n  });\n\n  // Save prayer changes mutation (daily)\n  const savePrayersMutation = useMutation({\n    mutationFn: async (data: { date: string; prayers: DailyPrayers }) => {\n      const response = await apiRequest('POST', '/api/prayers', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Changes Saved! ✅\",\n        description: \"Prayer record has been updated successfully.\",\n      });\n      \n      // Invalidate and refetch relevant queries for cache consistency\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats/yearly-qaza'] });\n      \n      // Invalidate analytics queries for all periods to ensure real-time sync\n      ['week', 'month', 'year'].forEach(period => {\n        queryClient.invalidateQueries({ queryKey: ['/analytics/trend', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/data', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/summary', period] });\n      });\n      \n      // Update original prayers to reflect saved state\n      setOriginalPrayers(editedPrayers);\n      setHasChanges(false);\n    },\n    onError: (error) => {\n      console.error('Failed to save prayer record:', error);\n      toast({\n        title: \"Save Failed ❌\",\n        description: \"Failed to save changes. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Batch update mutation (weekly)\n  const batchUpdateMutation = useMutation({\n    mutationFn: async (updates: Array<{ date: string; prayers: DailyPrayers }>) => {\n      return await apiService.batchUpdatePrayerRecords(updates);\n    },\n    onSuccess: (data, variables) => {\n      const weekCount = selectedWeeks.size;\n      const prayerCount = variables.length;\n      const action = isMarkingAsCompleted ? 'completed' : 'missed';\n      \n      toast({\n        title: \"Batch Update Successful! ✅\",\n        description: `${weekCount} week(s) with ${prayerCount} prayer records marked as ${action}.`,\n      });\n      \n      // Invalidate and refetch relevant queries for cache consistency\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats/yearly-qaza'] });\n      \n      // Invalidate analytics queries for all periods to ensure real-time sync\n      ['week', 'month', 'year'].forEach(period => {\n        queryClient.invalidateQueries({ queryKey: ['/analytics/trend', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/data', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/summary', period] });\n      });\n      \n      // Reset weekly selections\n      setSelectedWeeks(new Set());\n      setWeeklyHasChanges(false);\n    },\n    onError: (error) => {\n      console.error('Failed to batch update prayer records:', error);\n      toast({\n        title: \"Batch Update Failed ❌\",\n        description: \"Failed to update prayer records. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update prayers when data is fetched\n  useEffect(() => {\n    if (prayerRecord) {\n      const prayers = convertPrayerRecordToDailyPrayers(prayerRecord);\n      if (prayers) {\n        setEditedPrayers(prayers);\n        setOriginalPrayers(prayers);\n        setHasChanges(false);\n      }\n    } else if (selectedDateString) {\n      // No data for this date, use default prayers\n      setEditedPrayers(defaultPrayers);\n      setOriginalPrayers(defaultPrayers);\n      setHasChanges(false);\n    }\n  }, [prayerRecord, selectedDateString]);\n\n  // Load past weeks and months when component mounts\n  useEffect(() => {\n    const weeks = getWeeksFromJanuary(); // Get weeks from January 1st to current\n    setPastWeeks(weeks);\n    \n    const months = getPastMonthsFromJanuary(); // Get months from January to current (excluding current)\n    setPastMonths(months);\n  }, []);\n\n  // Check if prayers have changed from original\n  useEffect(() => {\n    const changed = Object.keys(editedPrayers).some(prayer => {\n      const prayerKey = prayer as PrayerType;\n      return editedPrayers[prayerKey].completed !== originalPrayers[prayerKey].completed;\n    });\n    setHasChanges(changed);\n  }, [editedPrayers, originalPrayers]);\n\n  // Check if weekly selections have changed\n  useEffect(() => {\n    setWeeklyHasChanges(selectedWeeks.size > 0);\n  }, [selectedWeeks]);\n  \n  // Check if monthly selections have changed\n  useEffect(() => {\n    setMonthlyHasChanges(selectedMonths.size > 0);\n  }, [selectedMonths]);\n\n  const handleDateSelect = (date: Date | undefined) => {\n    if (date && date <= new Date()) {\n      setSelectedDate(date);\n      setIsDatePickerOpen(false);\n    }\n  };\n\n  const togglePrayer = (prayer: PrayerType) => {\n    const currentTime = new Date().toISOString();\n    setEditedPrayers(prev => ({\n      ...prev,\n      [prayer]: {\n        ...prev[prayer],\n        completed: !prev[prayer].completed,\n        completedAt: !prev[prayer].completed ? currentTime : undefined,\n      }\n    }));\n  };\n\n  const handleSave = () => {\n    if (!selectedDateString) return;\n    \n    savePrayersMutation.mutate({\n      date: selectedDateString,\n      prayers: editedPrayers,\n    });\n  };\n\n  const handleCancel = () => {\n    setEditedPrayers(originalPrayers);\n    setHasChanges(false);\n  };\n\n  // Weekly handlers\n  const toggleWeekSelection = (weekKey: string) => {\n    const newSelected = new Set(selectedWeeks);\n    if (newSelected.has(weekKey)) {\n      newSelected.delete(weekKey);\n    } else {\n      newSelected.add(weekKey);\n    }\n    setSelectedWeeks(newSelected);\n  };\n\n  const selectAllWeeks = () => {\n    const allWeekKeys = pastWeeks.map(week => `${week.startDate}-${week.endDate}`);\n    setSelectedWeeks(new Set(allWeekKeys));\n  };\n\n  const clearWeekSelection = () => {\n    setSelectedWeeks(new Set());\n  };\n\n  const handleBatchUpdate = () => {\n    // Check if either weeks or months are selected\n    if (selectedWeeks.size === 0 && selectedMonths.size === 0) return;\n\n    // Calculate batch update details\n    const updates: Array<{ date: string; prayers: DailyPrayers }> = [];\n    let earliestDate: string | null = null;\n    let latestDate: string | null = null;\n    \n    // Handle weekly updates\n    if (selectedWeeks.size > 0) {\n      selectedWeeks.forEach(weekKey => {\n        const week = pastWeeks.find(w => `${w.startDate}-${w.endDate}` === weekKey);\n        if (week) {\n          week.dates.forEach(date => {\n            if (!earliestDate || date < earliestDate) earliestDate = date;\n            if (!latestDate || date > latestDate) latestDate = date;\n            \n            const prayers: DailyPrayers = {\n              fajr: { completed: isMarkingAsCompleted, onTime: false },\n              dhuhr: { completed: isMarkingAsCompleted, onTime: false },\n              asr: { completed: isMarkingAsCompleted, onTime: false },\n              maghrib: { completed: isMarkingAsCompleted, onTime: false },\n              isha: { completed: isMarkingAsCompleted, onTime: false },\n            };\n            updates.push({ date, prayers });\n          });\n        }\n      });\n    }\n\n    // Handle monthly updates\n    if (selectedMonths.size > 0) {\n      selectedMonths.forEach(monthKey => {\n        const month = pastMonths.find(m => `${m.monthName}-${m.year}` === monthKey);\n        if (month) {\n          month.dates.forEach(date => {\n            if (!earliestDate || date < earliestDate) earliestDate = date;\n            if (!latestDate || date > latestDate) latestDate = date;\n            \n            const prayers: DailyPrayers = {\n              fajr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              dhuhr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              asr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              maghrib: { completed: isMonthMarkingAsCompleted, onTime: false },\n              isha: { completed: isMonthMarkingAsCompleted, onTime: false },\n            };\n            updates.push({ date, prayers });\n          });\n        }\n      });\n    }\n\n    // Set confirmation details and show dialog\n    const weekCount = selectedWeeks.size;\n    const action = selectedWeeks.size > 0 \n      ? (isMarkingAsCompleted ? 'completed' : 'missed')\n      : (isMonthMarkingAsCompleted ? 'completed' : 'missed');\n\n    setConfirmationDetails({\n      weekCount: weekCount,\n      dateCount: updates.length,\n      prayerCount: updates.length * 5, // 5 prayers per day\n      action: action,\n      dateRange: { \n        start: earliestDate || '', \n        end: latestDate || '' \n      }\n    });\n    setShowConfirmDialog(true);\n  };\n\n  const handleConfirmBatchUpdate = async () => {\n    if (selectedWeeks.size === 0 && selectedMonths.size === 0) return;\n\n    const updates: Array<{ date: string; prayers: DailyPrayers }> = [];\n    \n    // Handle weekly updates\n    if (selectedWeeks.size > 0) {\n      selectedWeeks.forEach(weekKey => {\n        const week = pastWeeks.find(w => `${w.startDate}-${w.endDate}` === weekKey);\n        if (week) {\n          week.dates.forEach(date => {\n            const prayers: DailyPrayers = {\n              fajr: { completed: isMarkingAsCompleted, onTime: false },\n              dhuhr: { completed: isMarkingAsCompleted, onTime: false },\n              asr: { completed: isMarkingAsCompleted, onTime: false },\n              maghrib: { completed: isMarkingAsCompleted, onTime: false },\n              isha: { completed: isMarkingAsCompleted, onTime: false },\n            };\n            updates.push({ date, prayers });\n          });\n        }\n      });\n    }\n    \n    // Handle monthly updates\n    if (selectedMonths.size > 0) {\n      selectedMonths.forEach(monthKey => {\n        const month = pastMonths.find(m => `${m.monthName}-${m.year}` === monthKey);\n        if (month) {\n          month.dates.forEach(date => {\n            const prayers: DailyPrayers = {\n              fajr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              dhuhr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              asr: { completed: isMonthMarkingAsCompleted, onTime: false },\n              maghrib: { completed: isMonthMarkingAsCompleted, onTime: false },\n              isha: { completed: isMonthMarkingAsCompleted, onTime: false },\n            };\n            updates.push({ date, prayers });\n          });\n        }\n      });\n    }\n\n    setShowConfirmDialog(false);\n    \n    // Split updates into batches of 7 (API limit) and send sequentially\n    const batchSize = 7;\n    const batches = [];\n    for (let i = 0; i < updates.length; i += batchSize) {\n      batches.push(updates.slice(i, i + batchSize));\n    }\n    \n    try {\n      // Send all batches sequentially\n      for (const batch of batches) {\n        await batchUpdateMutation.mutateAsync(batch);\n      }\n      \n      // Clear selections after successful batch updates\n      setSelectedWeeks(new Set());\n      setSelectedMonths(new Set());\n      setWeeklyHasChanges(false);\n      setMonthlyHasChanges(false);\n      \n      toast({\n        title: \"Prayers Updated Successfully\",\n        description: `Updated ${updates.length} day(s) across ${batches.length} batch(es)`,\n      });\n      \n    } catch (error) {\n      console.error('Batch update failed:', error);\n      toast({\n        title: \"Batch Update Failed\",\n        description: \"Failed to update prayer records. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleWeeklyCancelChanges = () => {\n    setSelectedWeeks(new Set());\n    setWeeklyHasChanges(false);\n  };\n\n  // Monthly handlers\n  const toggleMonthSelection = (monthKey: string) => {\n    const newSelected = new Set(selectedMonths);\n    if (newSelected.has(monthKey)) {\n      newSelected.delete(monthKey);\n    } else {\n      newSelected.add(monthKey);\n    }\n    setSelectedMonths(newSelected);\n  };\n\n  const selectAllMonths = () => {\n    const allMonthKeys = pastMonths.map(month => `${month.monthName}-${month.year}`);\n    setSelectedMonths(new Set(allMonthKeys));\n  };\n\n  const clearMonthSelection = () => {\n    setSelectedMonths(new Set());\n  };\n\n  const handleMonthlyBatchUpdate = () => {\n    if (selectedMonths.size === 0) return;\n\n    // Calculate batch update details for months\n    const updates: Array<{ date: string; prayers: DailyPrayers }> = [];\n    let earliestDate: string | null = null;\n    let latestDate: string | null = null;\n    \n    selectedMonths.forEach(monthKey => {\n      const month = pastMonths.find(m => `${m.monthName}-${m.year}` === monthKey);\n      if (month) {\n        month.dates.forEach(date => {\n          if (!earliestDate || date < earliestDate) earliestDate = date;\n          if (!latestDate || date > latestDate) latestDate = date;\n          \n          const prayers: DailyPrayers = {\n            fajr: { completed: isMonthMarkingAsCompleted, onTime: false },\n            dhuhr: { completed: isMonthMarkingAsCompleted, onTime: false },\n            asr: { completed: isMonthMarkingAsCompleted, onTime: false },\n            maghrib: { completed: isMonthMarkingAsCompleted, onTime: false },\n            isha: { completed: isMonthMarkingAsCompleted, onTime: false },\n          };\n          updates.push({ date, prayers });\n        });\n      }\n    });\n\n    // Set confirmation details and show dialog\n    setConfirmationDetails({\n      weekCount: selectedMonths.size,\n      dateCount: updates.length,\n      prayerCount: updates.length * 5, // 5 prayers per day\n      action: isMonthMarkingAsCompleted ? 'completed' : 'missed',\n      dateRange: { \n        start: earliestDate || '', \n        end: latestDate || '' \n      }\n    });\n    setShowConfirmDialog(true);\n  };\n\n  const handleMonthlyCancelChanges = () => {\n    setSelectedMonths(new Set());\n    setMonthlyHasChanges(false);\n  };\n\n  const isPastDate = (date: Date) => date < new Date(new Date().setHours(0, 0, 0, 0));\n\n  return (\n    <div className=\"glass-card rounded-2xl p-6 space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-qaza-title\">\n          Qaza Prayer Management\n        </h2>\n        <p className=\"text-muted-foreground\" data-testid=\"text-qaza-description\">\n          Manage your missed prayers individually by date or in bulk by week\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as \"daily\" | \"weekly\" | \"monthly\")} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"tabs-view-selector\">\n          <TabsTrigger value=\"daily\" data-testid=\"tab-daily\">\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            Daily View\n          </TabsTrigger>\n          <TabsTrigger value=\"weekly\" data-testid=\"tab-weekly\">\n            <Clock className=\"mr-2 h-4 w-4\" />\n            Weekly View\n          </TabsTrigger>\n          <TabsTrigger value=\"monthly\" data-testid=\"tab-monthly\">\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            Monthly View\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Daily View */}\n        <TabsContent value=\"daily\" className=\"space-y-6\" data-testid=\"content-daily-view\">\n\n      {/* Date Picker */}\n      <div className=\"flex justify-center\">\n        <Popover open={isDatePickerOpen} onOpenChange={setIsDatePickerOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              className={cn(\n                \"w-[240px] justify-start text-left font-normal glass-card\",\n                !selectedDate && \"text-muted-foreground\"\n              )}\n              data-testid=\"button-date-picker\"\n            >\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {selectedDate ? format(selectedDate, \"PPP\") : \"Pick a date\"}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\" align=\"start\" data-testid=\"popover-calendar\">\n            <Calendar\n              mode=\"single\"\n              selected={selectedDate}\n              onSelect={handleDateSelect}\n              disabled={(date) => date > new Date() || date < new Date('2020-01-01')}\n              initialFocus\n              data-testid=\"calendar-date-picker\"\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      {/* Prayer Status Display */}\n      {selectedDate && (\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-semibold\" data-testid=\"text-selected-date\">\n              Prayer Status for {format(selectedDate, \"MMMM d, yyyy\")}\n            </h3>\n          </div>\n\n          {/* Loading State */}\n          {isLoadingPrayers ? (\n            <div className=\"animate-pulse space-y-4\" data-testid=\"loading-prayers\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"flex items-center justify-between p-4 rounded-xl bg-muted/30\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                    <div>\n                      <div className=\"w-16 h-4 bg-muted rounded\"></div>\n                      <div className=\"w-24 h-3 bg-muted/70 rounded mt-2\"></div>\n                    </div>\n                  </div>\n                  <div className=\"w-6 h-6 bg-muted rounded-full\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            /* Prayer List */\n            <div className=\"space-y-3\">\n              {Object.entries(editedPrayers).map(([prayer, status]) => {\n                const prayerKey = prayer as PrayerType;\n                const Icon = prayerIcons[prayerKey];\n                \n                return (\n                  <div\n                    key={prayer}\n                    className={cn(\n                      \"flex items-center justify-between p-4 rounded-xl transition-all duration-300 hover:bg-muted/50\",\n                      status.completed ? \"bg-primary/5\" : \"bg-muted/30\"\n                    )}\n                    data-testid={`prayer-item-${prayer}`}\n                  >\n                    <div className=\"flex items-center gap-4\">\n                      <div className={cn(\"w-12 h-12 rounded-full flex items-center justify-center\", prayerColors[prayerKey])}>\n                        <Icon className=\"w-6 h-6\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-foreground\" data-testid={`text-prayer-name-${prayer}`}>\n                          {prayerNames[prayerKey]}\n                        </h4>\n                        <p className=\"text-sm text-muted-foreground\" data-testid={`text-prayer-status-${prayer}`}>\n                          {status.completed ? 'Completed' : 'Missed'}\n                        </p>\n                      </div>\n                    </div>\n                    <Checkbox\n                      checked={status.completed}\n                      onCheckedChange={() => togglePrayer(prayerKey)}\n                      className=\"h-5 w-5\"\n                      data-testid={`checkbox-prayer-${prayer}`}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          {selectedDate && !isLoadingPrayers && (\n            <div className=\"flex justify-center gap-3 pt-4\">\n              <Button\n                onClick={handleCancel}\n                variant=\"outline\"\n                disabled={!hasChanges || savePrayersMutation.isPending}\n                className=\"min-w-[100px]\"\n                data-testid=\"button-cancel\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSave}\n                disabled={!hasChanges || savePrayersMutation.isPending}\n                className=\"min-w-[100px]\"\n                data-testid=\"button-save\"\n              >\n                {savePrayersMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <Save className=\"mr-2 h-4 w-4\" />\n                )}\n                {savePrayersMutation.isPending ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n\n          {!selectedDate && (\n            <div className=\"text-center py-12\">\n              <CalendarIcon className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-date-selected\">\n                Select a date to manage prayer records\n              </p>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Weekly View */}\n        <TabsContent value=\"weekly\" className=\"space-y-6\" data-testid=\"content-weekly-view\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-weekly-title\">\n              Bulk Prayer Management\n            </h3>\n            <p className=\"text-muted-foreground text-sm\" data-testid=\"text-weekly-description\">\n              Select weeks to mark all prayers as completed or missed\n            </p>\n          </div>\n\n          {/* Mark as Completed/Missed Toggle */}\n          <div className=\"flex justify-center gap-4\">\n            <Button\n              variant={isMarkingAsCompleted ? \"default\" : \"outline\"}\n              onClick={() => {\n                setIsMarkingAsCompleted(true);\n                handleBatchUpdate();\n              }}\n              data-testid=\"button-mark-completed\"\n            >\n              Mark as Completed\n            </Button>\n            <Button\n              variant={!isMarkingAsCompleted ? \"default\" : \"outline\"}\n              onClick={() => {\n                setIsMarkingAsCompleted(false);\n                handleBatchUpdate();\n              }}\n              data-testid=\"button-mark-missed\"\n            >\n              Mark as Missed\n            </Button>\n          </div>\n\n          {/* Week Selection Controls */}\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={selectAllWeeks}\n                disabled={pastWeeks.length === 0}\n                data-testid=\"button-select-all-weeks\"\n              >\n                Select All\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={clearWeekSelection}\n                disabled={selectedWeeks.size === 0}\n                data-testid=\"button-clear-selection\"\n              >\n                Clear Selection\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-selected-count\">\n              {selectedWeeks.size} week(s) selected\n            </p>\n          </div>\n\n          {/* Past Weeks List */}\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\" data-testid=\"list-past-weeks\">\n            {pastWeeks.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Clock className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-weeks-available\">\n                  No past weeks available for selection\n                </p>\n              </div>\n            ) : (\n              pastWeeks.map((week) => {\n                const weekKey = `${week.startDate}-${week.endDate}`;\n                const isSelected = selectedWeeks.has(weekKey);\n                \n                return (\n                  <WeekRow\n                    key={weekKey}\n                    week={week}\n                    isSelected={isSelected}\n                    onToggle={() => toggleWeekSelection(weekKey)}\n                  />\n                );\n              })\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          {weeklyHasChanges && (\n            <div className=\"flex justify-center gap-3 pt-4\">\n              <Button\n                onClick={handleWeeklyCancelChanges}\n                variant=\"outline\"\n                disabled={batchUpdateMutation.isPending}\n                className=\"min-w-[100px]\"\n                data-testid=\"button-weekly-cancel\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Cancel\n              </Button>\n              <Button\n                onClick={handleBatchUpdate}\n                disabled={selectedWeeks.size === 0 || batchUpdateMutation.isPending}\n                className=\"min-w-[140px]\"\n                data-testid=\"button-weekly-save\"\n              >\n                {batchUpdateMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <Save className=\"mr-2 h-4 w-4\" />\n                )}\n                {batchUpdateMutation.isPending \n                  ? 'Processing...' \n                  : `Mark Selected Weeks`\n                }\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Monthly View */}\n        <TabsContent value=\"monthly\" className=\"space-y-6\" data-testid=\"content-monthly-view\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-monthly-title\">\n              Monthly Prayer Management\n            </h3>\n            <p className=\"text-muted-foreground text-sm\" data-testid=\"text-monthly-description\">\n              Select months to mark all prayers as completed or missed\n            </p>\n          </div>\n\n          {/* Mark as Completed/Missed Toggle */}\n          <div className=\"flex justify-center gap-4\">\n            <Button\n              variant={isMonthMarkingAsCompleted ? \"default\" : \"outline\"}\n              onClick={() => {\n                setIsMonthMarkingAsCompleted(true);\n                handleBatchUpdate();\n              }}\n              data-testid=\"button-monthly-mark-completed\"\n            >\n              Mark as Completed\n            </Button>\n            <Button\n              variant={!isMonthMarkingAsCompleted ? \"default\" : \"outline\"}\n              onClick={() => {\n                setIsMonthMarkingAsCompleted(false);\n                handleBatchUpdate();\n              }}\n              data-testid=\"button-monthly-mark-missed\"\n            >\n              Mark as Missed\n            </Button>\n          </div>\n\n          {/* Month Selection Controls */}\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={selectAllMonths}\n                disabled={pastMonths.length === 0}\n                data-testid=\"button-select-all-months\"\n              >\n                Select All\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={clearMonthSelection}\n                disabled={selectedMonths.size === 0}\n                data-testid=\"button-clear-monthly-selection\"\n              >\n                Clear Selection\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-monthly-selected-count\">\n              {selectedMonths.size} month(s) selected\n            </p>\n          </div>\n\n          {/* Past Months List */}\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\" data-testid=\"list-past-months\">\n            {pastMonths.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <CalendarIcon className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-months-available\">\n                  No past months available for selection\n                </p>\n              </div>\n            ) : (\n              pastMonths.map((month) => {\n                const monthKey = `${month.monthName}-${month.year}`;\n                const isSelected = selectedMonths.has(monthKey);\n                \n                return (\n                  <MonthRow\n                    key={monthKey}\n                    month={month}\n                    isSelected={isSelected}\n                    onToggle={() => toggleMonthSelection(monthKey)}\n                  />\n                );\n              })\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          {monthlyHasChanges && (\n            <div className=\"flex justify-center gap-3 pt-4\">\n              <Button\n                onClick={handleMonthlyCancelChanges}\n                variant=\"outline\"\n                disabled={batchUpdateMutation.isPending}\n                className=\"min-w-[100px]\"\n                data-testid=\"button-monthly-cancel\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Cancel\n              </Button>\n              <Button\n                onClick={handleMonthlyBatchUpdate}\n                disabled={selectedMonths.size === 0 || batchUpdateMutation.isPending}\n                className=\"min-w-[140px]\"\n                data-testid=\"button-monthly-save\"\n              >\n                {batchUpdateMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <Save className=\"mr-2 h-4 w-4\" />\n                )}\n                {batchUpdateMutation.isPending \n                  ? 'Processing...' \n                  : `Mark Selected Months`\n                }\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Confirmation Dialog */}\n      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <AlertDialogContent data-testid=\"dialog-batch-confirmation\">\n          <AlertDialogHeader>\n            <AlertDialogTitle data-testid=\"text-confirmation-title\">\n              Confirm Batch Update\n            </AlertDialogTitle>\n            <AlertDialogDescription data-testid=\"text-confirmation-description\">\n              {confirmationDetails && (\n                <div className=\"space-y-3\">\n                  <p className=\"text-destructive font-medium\">\n                    ⚠️ This action will overwrite any existing prayer records for the selected dates\n                  </p>\n                  <div className=\"bg-muted/30 p-4 rounded-lg space-y-2\">\n                    <p>\n                      <strong>Action:</strong> Mark as{\" \"}\n                      <span className={cn(\n                        \"font-semibold\",\n                        confirmationDetails.action === 'completed' ? \"text-green-600\" : \"text-orange-600\"\n                      )}>\n                        {confirmationDetails.action}\n                      </span>\n                    </p>\n                    <p>\n                      <strong>Affected weeks:</strong> {confirmationDetails.weekCount} week(s)\n                    </p>\n                    <p>\n                      <strong>Date range:</strong> {confirmationDetails.dateRange.start} to {confirmationDetails.dateRange.end}\n                    </p>\n                    <p>\n                      <strong>Total prayers:</strong> {confirmationDetails.prayerCount} prayers across {confirmationDetails.dateCount} days\n                    </p>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    This cannot be undone. All individual daily prayer settings for these dates will be replaced.\n                  </p>\n                </div>\n              )}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => setShowConfirmDialog(false)}\n              data-testid=\"button-confirmation-cancel\"\n            >\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmBatchUpdate}\n              disabled={batchUpdateMutation.isPending}\n              data-testid=\"button-confirmation-proceed\"\n              className={cn(\n                confirmationDetails?.action === 'completed' \n                  ? \"bg-green-600 hover:bg-green-700\" \n                  : \"bg-orange-600 hover:bg-orange-700\"\n              )}\n            >\n              {batchUpdateMutation.isPending ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  Processing...\n                </div>\n              ) : (\n                `Yes, Mark as ${confirmationDetails?.action || 'completed'}`\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n\n// Week Row Component for displaying individual weeks\nfunction WeekRow({ \n  week, \n  isSelected, \n  onToggle \n}: { \n  week: { startDate: string; endDate: string; dates: string[]; weekLabel: string }; \n  isSelected: boolean; \n  onToggle: () => void; \n}) {\n  const [completion, setCompletion] = useState<{\n    completionPercentage: number;\n    status: 'empty' | 'partial' | 'complete';\n  }>({ completionPercentage: 0, status: 'empty' });\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Check if this week is in the future and should be disabled\n  const isDisabled = isWeekInFuture(week.endDate);\n\n  useEffect(() => {\n    const fetchCompletion = async () => {\n      setIsLoading(true);\n      try {\n        const result = await calculateWeekCompletion(week.dates);\n        setCompletion({\n          completionPercentage: result.completionPercentage,\n          status: result.status,\n        });\n      } catch (error) {\n        console.error('Error fetching week completion:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCompletion();\n  }, [week.dates]);\n\n  const getStatusIndicator = () => {\n    if (isLoading) {\n      return <div className=\"w-3 h-3 rounded-full bg-muted animate-pulse\"></div>;\n    }\n    \n    switch (completion.status) {\n      case 'complete':\n        return <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>;\n      case 'partial':\n        return <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>;\n      case 'empty':\n        return <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>;\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-between p-4 rounded-xl transition-all duration-300\",\n        isDisabled \n          ? \"opacity-50 cursor-not-allowed bg-muted/20\" \n          : \"hover:bg-muted/50 cursor-pointer\",\n        isSelected && !isDisabled ? \"bg-primary/10 border border-primary/20\" : \"bg-muted/30\"\n      )}\n      onClick={isDisabled ? undefined : onToggle}\n      data-testid={`week-row-${week.startDate}`}\n    >\n      <div className=\"flex items-center gap-4\">\n        <Checkbox\n          checked={isSelected && !isDisabled}\n          onCheckedChange={isDisabled ? undefined : onToggle}\n          disabled={isDisabled}\n          className=\"h-5 w-5\"\n          data-testid={`checkbox-week-${week.startDate}`}\n        />\n        <div className=\"flex items-center gap-3\">\n          {getStatusIndicator()}\n          <div>\n            <h4 className={cn(\n              \"font-medium\",\n              isDisabled ? \"text-muted-foreground\" : \"text-foreground\"\n            )} data-testid={`text-week-label-${week.startDate}`}>\n              {week.weekLabel}\n              {isDisabled && <span className=\"ml-2 text-xs\">(Future)</span>}\n            </h4>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`text-week-completion-${week.startDate}`}>\n              {isDisabled \n                ? 'Not available (future week)'\n                : isLoading \n                  ? 'Loading...' \n                  : `${completion.completionPercentage}% completed`\n              }\n            </p>\n          </div>\n        </div>\n      </div>\n      <div className=\"text-sm text-muted-foreground\">\n        {week.dates.length} days\n      </div>\n    </div>\n  );\n}\n\n// Month Row Component for displaying individual months\nfunction MonthRow({ \n  month, \n  isSelected, \n  onToggle \n}: { \n  month: { \n    startDate: string; \n    endDate: string; \n    dates: string[]; \n    monthLabel: string;\n    monthName: string;\n    year: number;\n  }; \n  isSelected: boolean; \n  onToggle: () => void; \n}) {\n  const [completion, setCompletion] = useState<{\n    completionPercentage: number;\n    status: 'empty' | 'partial' | 'complete';\n  }>({ completionPercentage: 0, status: 'empty' });\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchCompletion = async () => {\n      setIsLoading(true);\n      try {\n        const result = await calculateMonthCompletion(month.dates);\n        setCompletion({\n          completionPercentage: result.completionPercentage,\n          status: result.status,\n        });\n      } catch (error) {\n        console.error('Error fetching month completion:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCompletion();\n  }, [month.dates]);\n\n  const getStatusIndicator = () => {\n    if (isLoading) {\n      return <div className=\"w-3 h-3 rounded-full bg-muted animate-pulse\"></div>;\n    }\n    \n    switch (completion.status) {\n      case 'complete':\n        return <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>;\n      case 'partial':\n        return <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>;\n      case 'empty':\n        return <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>;\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-between p-4 rounded-xl transition-all duration-300 hover:bg-muted/50 cursor-pointer\",\n        isSelected ? \"bg-primary/10 border border-primary/20\" : \"bg-muted/30\"\n      )}\n      onClick={onToggle}\n      data-testid={`month-row-${month.monthName}-${month.year}`}\n    >\n      <div className=\"flex items-center gap-4\">\n        <Checkbox\n          checked={isSelected}\n          onCheckedChange={onToggle}\n          className=\"h-5 w-5\"\n          data-testid={`checkbox-month-${month.monthName}-${month.year}`}\n        />\n        <div className=\"flex items-center gap-3\">\n          {getStatusIndicator()}\n          <div>\n            <h4 className=\"font-medium text-foreground\" data-testid={`text-month-label-${month.monthName}-${month.year}`}>\n              {month.monthLabel}\n            </h4>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`text-month-completion-${month.monthName}-${month.year}`}>\n              {isLoading \n                ? 'Loading...' \n                : `${completion.completionPercentage}% completed`\n              }\n            </p>\n          </div>\n        </div>\n      </div>\n      <div className=\"text-sm text-muted-foreground\">\n        {month.dates.length} days\n      </div>\n    </div>\n  );\n}","size_bytes":43660},"server/client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from 'next-themes';\nimport { useEffect, useState } from 'react';\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  // Avoid hydration mismatch by only rendering after component mounts\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return (\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"w-10 h-10 rounded-full\"\n        data-testid=\"button-theme-toggle\"\n        disabled\n      >\n        <div className=\"h-5 w-5\" />\n        <span className=\"sr-only\">Toggle theme</span>\n      </Button>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\n      className=\"w-10 h-10 rounded-full hover:scale-110 hover:opacity-80 transition-all duration-300\"\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'dark' ? (\n        <Sun className=\"h-5 w-5\" />\n      ) : (\n        <Moon className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":1216},"server/client/src/components/weekly-progress.tsx":{"content":"import { usePrayer } from '../contexts/prayer-context';\nimport { getWeeklyData, getTodayCompletedCount } from '../lib/prayer-utils';\nimport { cn } from '@/lib/utils';\n\nexport function WeeklyProgress() {\n  const { todayPrayers, weekProgress, currentStreak, qazaCount } = usePrayer();\n  const weeklyData = getWeeklyData();\n  \n  // Calculate progress ring\n  const circumference = 2 * Math.PI * 54;\n  const offset = circumference - (weekProgress / 100) * circumference;\n\n  const todayCompleted = getTodayCompletedCount(todayPrayers);\n  const completedPrayers = Math.round((weekProgress / 100) * 35);\n\n  return (\n    <section className=\"grid md:grid-cols-2 gap-6 mb-8\">\n      {/* Weekly Progress Circle */}\n      <div className=\"glass-card rounded-2xl p-6\">\n        <h3 className=\"text-lg font-semibold mb-4 text-center\" data-testid=\"text-weekly-progress-title\">\n          This Week's Progress\n        </h3>\n        <div className=\"flex items-center justify-center\">\n          <div className=\"relative w-32 h-32\">\n            <svg className=\"progress-ring w-32 h-32\" viewBox=\"0 0 120 120\">\n              <circle \n                cx=\"60\" \n                cy=\"60\" \n                r=\"54\" \n                stroke=\"var(--muted)\" \n                strokeWidth=\"8\" \n                fill=\"transparent\"\n              />\n              <circle \n                className=\"progress-ring-circle\" \n                cx=\"60\" \n                cy=\"60\" \n                r=\"54\" \n                stroke=\"var(--primary)\" \n                strokeWidth=\"8\" \n                fill=\"transparent\" \n                strokeLinecap=\"round\"\n                strokeDasharray={circumference}\n                strokeDashoffset={offset}\n                data-testid=\"progress-ring-circle\"\n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-week-percentage\">\n                  {weekProgress}%\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Complete</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-4 text-center text-sm text-muted-foreground\">\n          <span data-testid=\"text-completed-prayers\">{completedPrayers}</span> of{' '}\n          <span data-testid=\"text-total-weekly-prayers\">35</span> prayers\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"glass-card rounded-2xl p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-quick-stats-title\">Quick Stats</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Today's Prayers</span>\n            <span className=\"font-semibold text-primary\" data-testid=\"text-today-completed\">\n              {todayCompleted}/5\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Current Streak</span>\n            <span className=\"font-semibold text-secondary\" data-testid=\"text-current-streak\">\n              {currentStreak} days\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Qaza Counter</span>\n            <span className=\"font-semibold text-destructive\" data-testid=\"text-qaza-count\">\n              {qazaCount} prayers\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Weekly Progress</span>\n            <span className=\"font-semibold text-accent\" data-testid=\"text-weekly-progress\">\n              {weekProgress}%\n            </span>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport function WeeklyOverview() {\n  const { todayPrayers } = usePrayer(); // Add context to trigger re-renders\n  const weeklyData = getWeeklyData();\n\n  const getStatusColor = (percentage: number) => {\n    if (percentage === 100) return 'bg-primary';\n    if (percentage >= 80) return 'bg-secondary';\n    if (percentage >= 50) return 'bg-accent';\n    if (percentage > 0) return 'bg-destructive';\n    return 'bg-muted';\n  };\n\n  return (\n    <section className=\"glass-card rounded-2xl p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-weekly-overview-title\">\n        This Week Overview\n      </h3>\n      <div className=\"grid grid-cols-7 gap-2\">\n        {weeklyData.map((day, index) => (\n          <div key={day.date} className=\"text-center\">\n            <div className=\"text-xs text-muted-foreground mb-2\" data-testid={`text-day-${index}`}>\n              {day.day}\n            </div>\n            <div className=\"w-full h-20 bg-muted/30 rounded-lg flex flex-col items-center justify-center gap-1\">\n              <div className=\"text-xs font-medium\" data-testid={`text-day-completed-${index}`}>\n                {day.completed}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">of 5</div>\n              <div \n                className={cn(\n                  \"w-2 h-2 rounded-full\",\n                  getStatusColor(day.percentage),\n                  day.percentage === 0 && \"opacity-50\"\n                )}\n                data-testid={`status-indicator-${index}`}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":5550},"server/client/src/contexts/prayer-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { PrayerType, PrayerStatus } from '@shared/schema';\nimport { calculateWeekProgress, calculateWeekProgressFromAPI, getTodayString, checkAchievements, getTodayCompletedCount, getWeekDates, calculateCurrentStreakFromAPI, calculateQazaCountFromAPI, calculateRealTimeStatistics, updateUserStatisticsInBackend } from '@/lib/prayer-utils';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiService, convertPrayerRecordToDailyPrayers } from '@/lib/api-service';\n\nexport interface DailyPrayers {\n  fajr: PrayerStatus;\n  dhuhr: PrayerStatus;\n  asr: PrayerStatus;\n  maghrib: PrayerStatus;\n  isha: PrayerStatus;\n}\n\nexport interface PrayerContextType {\n  todayPrayers: DailyPrayers;\n  weekProgress: number;\n  currentStreak: number;\n  qazaCount: number;\n  togglePrayer: (prayer: PrayerType) => void;\n  isLoading: boolean;\n  refreshStatistics: () => Promise<void>;\n}\n\nconst PrayerContext = createContext<PrayerContextType | undefined>(undefined);\n\nconst defaultPrayers: DailyPrayers = {\n  fajr: { completed: false, onTime: false },\n  dhuhr: { completed: false, onTime: false },\n  asr: { completed: false, onTime: false },\n  maghrib: { completed: false, onTime: false },\n  isha: { completed: false, onTime: false },\n};\n\nexport function PrayerProvider({ children }: { children: React.ReactNode }) {\n  const [todayPrayers, setTodayPrayers] = useState<DailyPrayers>(defaultPrayers);\n  const [weekProgress, setWeekProgress] = useState(0);\n  const [currentStreak, setCurrentStreak] = useState(0);\n  const [qazaCount, setQazaCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Load today's prayers from localStorage on mount\n  useEffect(() => {\n    loadTodayPrayers();\n    loadUserStats();\n  }, []);\n\n  const loadTodayPrayers = async () => {\n    try {\n      const today = getTodayString();\n      \n      // Try to load from API first\n      const apiRecord = await apiService.getPrayerRecord(today);\n      if (apiRecord) {\n        const apiPrayers = convertPrayerRecordToDailyPrayers(apiRecord);\n        if (apiPrayers) {\n          setTodayPrayers(apiPrayers);\n          // Also save to localStorage for fallback\n          localStorage.setItem(`prayers-${today}`, JSON.stringify(apiPrayers));\n          const progress = calculateWeekProgress();\n          setWeekProgress(progress);\n          setIsLoading(false);\n          return;\n        }\n      }\n      \n      // Fallback to localStorage if API fails or returns null\n      const stored = localStorage.getItem(`prayers-${today}`);\n      if (stored) {\n        const prayers = JSON.parse(stored);\n        setTodayPrayers(prayers);\n        // Try to sync to backend if we have localStorage data but no API data\n        try {\n          await apiService.savePrayerRecord(today, prayers);\n        } catch (error) {\n          console.warn('Failed to sync localStorage data to API:', error);\n        }\n      }\n      \n      // Calculate week progress\n      const progress = calculateWeekProgress();\n      setWeekProgress(progress);\n      setIsLoading(false);\n    } catch (error) {\n      console.error('Failed to load prayers:', error);\n      setIsLoading(false);\n    }\n  };\n\n  const loadUserStats = async () => {\n    try {\n      // Try to load from API first\n      const apiStats = await apiService.getUserStats();\n      if (apiStats) {\n        setCurrentStreak(apiStats.currentStreak || 0);\n        setQazaCount(apiStats.qazaPrayers || 0);\n        // Save to localStorage for fallback\n        localStorage.setItem('currentStreak', (apiStats.currentStreak || 0).toString());\n        localStorage.setItem('qazaCount', (apiStats.qazaPrayers || 0).toString());\n        return;\n      }\n      \n      // If no API stats, calculate from scratch\n      try {\n        const calculatedStreak = await calculateCurrentStreakFromAPI();\n        const calculatedQaza = await calculateQazaCountFromAPI();\n        \n        setCurrentStreak(calculatedStreak);\n        setQazaCount(calculatedQaza);\n        \n        // Save calculated values to localStorage\n        localStorage.setItem('currentStreak', calculatedStreak.toString());\n        localStorage.setItem('qazaCount', calculatedQaza.toString());\n        \n        // Update backend with calculated values\n        await updateUserStatisticsInBackend({ fajr: { completed: false, onTime: false }, dhuhr: { completed: false, onTime: false }, asr: { completed: false, onTime: false }, maghrib: { completed: false, onTime: false }, isha: { completed: false, onTime: false } });\n      } catch (error) {\n        console.warn('Failed to calculate statistics from API, falling back to localStorage:', error);\n        \n        // Final fallback to localStorage\n        const streak = localStorage.getItem('currentStreak');\n        const qaza = localStorage.getItem('qazaCount');\n        \n        setCurrentStreak(streak ? parseInt(streak) : 0);\n        setQazaCount(qaza ? parseInt(qaza) : 0);\n      }\n    } catch (error) {\n      console.error('Failed to load user stats:', error);\n      // Fallback to localStorage on error\n      const streak = localStorage.getItem('currentStreak');\n      const qaza = localStorage.getItem('qazaCount');\n      \n      setCurrentStreak(streak ? parseInt(streak) : 0);\n      setQazaCount(qaza ? parseInt(qaza) : 0);\n    }\n  };\n\n  const saveTodayPrayers = async (prayers: DailyPrayers) => {\n    try {\n      const today = getTodayString();\n      \n      // Calculate real-time statistics for immediate UI updates\n      const currentStats = { currentStreak, qazaCount };\n      const realTimeStats = calculateRealTimeStatistics(prayers, currentStats);\n      \n      // Update UI immediately with calculated values\n      setCurrentStreak(realTimeStats.currentStreak);\n      setQazaCount(realTimeStats.qazaCount);\n      \n      // Save to localStorage immediately for fast UI updates\n      localStorage.setItem(`prayers-${today}`, JSON.stringify(prayers));\n      \n      // Try to save to API\n      try {\n        await apiService.savePrayerRecord(today, prayers);\n      } catch (error) {\n        console.warn('Failed to save prayers to API, saved to localStorage only:', error);\n      }\n      \n      // Update week progress using backend data for better consistency\n      let progress: number;\n      try {\n        progress = await calculateWeekProgressFromAPI();\n        setWeekProgress(progress);\n      } catch (error) {\n        console.warn('Failed to get week progress from API, falling back to localStorage:', error);\n        progress = calculateWeekProgress();\n        setWeekProgress(progress);\n      }\n      \n      // Fetch updated statistics from backend for accuracy (server handles stats update in POST /api/prayers)\n      try {\n        const updatedStats = await apiService.getUserStats();\n        if (updatedStats) {\n          setCurrentStreak(updatedStats.currentStreak || 0);\n          setQazaCount(updatedStats.qazaPrayers || 0);\n          \n          // Update localStorage cache\n          localStorage.setItem('currentStreak', (updatedStats.currentStreak || 0).toString());\n          localStorage.setItem('qazaCount', (updatedStats.qazaPrayers || 0).toString());\n        }\n      } catch (error) {\n        console.warn('Failed to fetch updated statistics:', error);\n      }\n      \n      // Invalidate React Query cache for real-time sync with analytics and other components\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats/yearly-qaza'] });\n      \n      // Invalidate analytics queries for all periods to ensure real-time sync\n      ['week', 'month', 'year'].forEach(period => {\n        queryClient.invalidateQueries({ queryKey: ['/analytics/trend', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/data', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/summary', period] });\n      });\n      \n      // Check for achievements (prevent duplicates using localStorage)\n      const completedCount = getTodayCompletedCount(prayers);\n      \n      try {\n        // Load user stats for achievement calculations\n        const userStats = await apiService.getUserStats();\n        const achievements = await checkAchievements(prayers, progress, realTimeStats.currentStreak, userStats);\n        \n        achievements.forEach(async (achievement: { type: string; title: string; description: string; metadata?: any }) => {\n        // Use different dedup keys: per day for Perfect Day, per week for Perfect Week\n        let achievementKey: string;\n        let shouldShow = false;\n        \n        if (achievement.type === \"perfect_day\" && completedCount === 5) {\n          achievementKey = `${achievement.title}-${today}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else if (achievement.type === \"perfect_week\") {\n          // Use week start date for Perfect Week deduplication\n          const weekDates = getWeekDates();\n          const weekStart = weekDates[0]; // Monday of current week\n          achievementKey = `${achievement.title}-${weekStart}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else if (achievement.type === \"streak_milestone\") {\n          // For streak milestones, use streak days for deduplication\n          achievementKey = `${achievement.type}-${achievement.metadata?.streakDays}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else if (achievement.type === \"prayer_milestone\") {\n          // For prayer milestones, use total prayer count for deduplication\n          achievementKey = `${achievement.type}-${achievement.metadata?.totalPrayers}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else if (achievement.type === \"consistency\") {\n          // For consistency achievements, use period and date\n          achievementKey = `${achievement.type}-${achievement.metadata?.period}-${achievement.metadata?.earnedDate}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        } else {\n          // Generic deduplication for other types\n          achievementKey = `${achievement.type}-${today}`;\n          shouldShow = !localStorage.getItem(achievementKey);\n        }\n        \n        if (shouldShow && achievementKey!) {\n          localStorage.setItem(achievementKey, 'true');\n          \n          // Try to save achievement to API\n          try {\n            await apiService.createAchievement({\n              type: achievement.type,\n              title: achievement.title,\n              description: achievement.description,\n              earnedDate: today,\n              metadata: achievement.metadata || {\n                onTimePrayers: completedCount,\n                year: new Date().getFullYear(),\n              },\n            });\n          } catch (error) {\n            console.warn('Failed to save achievement to API:', error);\n          }\n          \n          toast({\n            title: \"Achievement Unlocked! 🏆\",\n            description: achievement.description,\n            duration: 5000,\n          });\n        }\n      });\n      } catch (error) {\n        console.error('Failed to check achievements:', error);\n      }\n    } catch (error) {\n      console.error('Failed to save prayers:', error);\n    }\n  };\n\n  const togglePrayer = (prayer: PrayerType) => {\n    const currentTime = new Date().toISOString();\n    const wasCompleted = todayPrayers[prayer].completed;\n    const newPrayers = {\n      ...todayPrayers,\n      [prayer]: {\n        completed: !wasCompleted,\n        onTime: !wasCompleted, // Assume on-time if completed now\n        completedAt: !wasCompleted ? currentTime : undefined,\n      }\n    };\n    \n    setTodayPrayers(newPrayers);\n    \n    // Calculate immediate statistics impact\n    const currentStats = { currentStreak, qazaCount };\n    const realTimeStats = calculateRealTimeStatistics(newPrayers, currentStats);\n    \n    // Update statistics immediately for responsive UI\n    setCurrentStreak(realTimeStats.currentStreak);\n    setQazaCount(realTimeStats.qazaCount);\n    \n    // Save prayers and update comprehensive statistics\n    saveTodayPrayers(newPrayers);\n    \n    // Show appropriate toast\n    if (newPrayers[prayer].completed) {\n      toast({\n        title: \"Prayer Completed! ✅\",\n        description: `${prayer.charAt(0).toUpperCase() + prayer.slice(1)} prayer marked as completed`,\n        duration: 2000,\n      });\n    } else {\n      toast({\n        title: \"Prayer Unmarked ❌\",\n        description: `${prayer.charAt(0).toUpperCase() + prayer.slice(1)} prayer unmarked`,\n        duration: 2000,\n      });\n    }\n  };\n\n  // Function to refresh statistics from backend\n  const refreshStatistics = async () => {\n    try {\n      // Invalidate React Query cache to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats/yearly-qaza'] });\n      \n      // Invalidate analytics queries for all periods\n      ['week', 'month', 'year'].forEach(period => {\n        queryClient.invalidateQueries({ queryKey: ['/analytics/trend', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/data', period] });\n        queryClient.invalidateQueries({ queryKey: ['/analytics/summary', period] });\n      });\n      \n      // Refresh user statistics from API\n      const apiStats = await apiService.getUserStats();\n      if (apiStats) {\n        setCurrentStreak(apiStats.currentStreak || 0);\n        setQazaCount(apiStats.qazaPrayers || 0);\n        \n        // Update localStorage cache\n        localStorage.setItem('currentStreak', (apiStats.currentStreak || 0).toString());\n        localStorage.setItem('qazaCount', (apiStats.qazaPrayers || 0).toString());\n      }\n      \n      // Refresh week progress\n      const progress = await calculateWeekProgressFromAPI();\n      setWeekProgress(progress);\n    } catch (error) {\n      console.error('Failed to refresh statistics:', error);\n    }\n  };\n\n  return (\n    <PrayerContext.Provider\n      value={{\n        todayPrayers,\n        weekProgress,\n        currentStreak,\n        qazaCount,\n        togglePrayer,\n        isLoading,\n        refreshStatistics,\n      }}\n    >\n      {children}\n    </PrayerContext.Provider>\n  );\n}\n\nexport function usePrayer() {\n  const context = useContext(PrayerContext);\n  if (context === undefined) {\n    throw new Error('usePrayer must be used within a PrayerProvider');\n  }\n  return context;\n}\n","size_bytes":14736},"server/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport type { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: () => void;\n  logout: () => void;\n  refetchUser: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Always use JWT auth for local development\n// In production on Replit, use the server-side detection\nconst isCustomAuth = true;\n\n// Custom auth functions\nconst getAuthToken = () => localStorage.getItem('authToken');\nconst setAuthToken = (token: string) => localStorage.setItem('authToken', token);\nconst removeAuthToken = () => localStorage.removeItem('authToken');\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function useAuthQuery() {\n  const queryClient = useQueryClient();\n  const [customUser, setCustomUser] = useState<User | null>(null);\n  const [customLoading, setCustomLoading] = useState(true);\n\n  // For custom JWT auth, check token and fetch user\n  useEffect(() => {\n    if (isCustomAuth) {\n      const token = getAuthToken();\n      if (token) {\n        // Verify token by fetching user\n        fetch('/api/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        })\n        .then(res => res.json())\n        .then(setCustomUser)\n        .catch(() => {\n          removeAuthToken();\n          setCustomUser(null);\n        })\n        .finally(() => setCustomLoading(false));\n      } else {\n        setCustomUser(null);\n        setCustomLoading(false);\n      }\n    }\n  }, []);\n\n  const {\n    data: sessionUser,\n    isLoading: sessionLoading,\n    error,\n    refetch: refetchSessionUser\n  } = useQuery<User | null>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n    refetchOnWindowFocus: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    enabled: !isCustomAuth, // Only run for session auth\n  });\n\n  const user = isCustomAuth ? customUser : sessionUser;\n  const isLoading = isCustomAuth ? customLoading : sessionLoading;\n  const isAuthenticated = !!user;\n\n  const login = () => {\n    if (isCustomAuth) {\n      window.location.href = '/login';\n    } else {\n      window.location.href = '/api/login';\n    }\n  };\n\n  const logout = () => {\n    if (isCustomAuth) {\n      removeAuthToken();\n      setCustomUser(null);\n      window.location.href = '/';\n    } else {\n      queryClient.clear();\n      window.location.href = '/api/logout';\n    }\n  };\n\n  const refetchUser = () => {\n    if (isCustomAuth) {\n      const token = getAuthToken();\n      if (token) {\n        setCustomLoading(true);\n        fetch('/api/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        })\n        .then(res => res.json())\n        .then(setCustomUser)\n        .catch(() => {\n          removeAuthToken();\n          setCustomUser(null);\n        })\n        .finally(() => setCustomLoading(false));\n      }\n    } else {\n      refetchSessionUser();\n    }\n  };\n\n  return {\n    user: user || null,\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    refetchUser,\n  };\n}\n\nexport { AuthContext };\nexport type { AuthContextType };\n","size_bytes":3398},"server/client/src/lib/api-service.ts":{"content":"import { apiRequest } from './queryClient';\nimport { PrayerRecord, Achievement, UserStats } from '@shared/schema';\nimport { DailyPrayers } from '../contexts/prayer-context';\nimport { handleAuthError } from './authUtils';\n\nexport interface PrayerApiService {\n  // Prayer records\n  getPrayerRecord(date: string): Promise<PrayerRecord | null>;\n  savePrayerRecord(date: string, prayers: DailyPrayers): Promise<PrayerRecord>;\n  getPrayerRecords(startDate?: string, endDate?: string): Promise<PrayerRecord[]>;\n  batchUpdatePrayerRecords(updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]>;\n\n  // User statistics  \n  getUserStats(): Promise<UserStats>;\n  updateUserStats(updates: Partial<UserStats>): Promise<UserStats>;\n  getYearlyQazaStats(): Promise<{ totalPossible: number; completed: number; qazaRemaining: number; currentYear: number }>;\n\n  // Achievements\n  getAchievements(): Promise<Achievement[]>;\n  createAchievement(achievement: Omit<Achievement, 'id' | 'userId' | 'createdAt'>): Promise<Achievement>;\n}\n\n// Helper function to safely parse JSON from response\nfunction safeJsonParse(response: Response): Promise<any> {\n  // Check if response has content before parsing JSON\n  const contentLength = response.headers.get('content-length');\n  if (contentLength === '0' || response.status === 304 || response.status === 204) {\n    return Promise.resolve(null);\n  }\n  return response.json();\n}\n\nclass ApiService implements PrayerApiService {\n  async getPrayerRecord(date: string): Promise<PrayerRecord | null> {\n    try {\n      const response = await fetch(`/api/prayers/${date}`, {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (response.status === 404) {\n        return null;\n      }\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch prayer record: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      return await safeJsonParse(response);\n    } catch (error: any) {\n      console.error('Error fetching prayer record:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      return null;\n    }\n  }\n\n  async savePrayerRecord(date: string, prayers: DailyPrayers): Promise<PrayerRecord> {\n    const response = await apiRequest('POST', '/api/prayers', {\n      date,\n      prayers,\n    });\n    \n    return await safeJsonParse(response);\n  }\n\n  async getPrayerRecords(startDate?: string, endDate?: string): Promise<PrayerRecord[]> {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      \n      const url = `/api/prayers${params.toString() ? '?' + params.toString() : ''}`;\n      const response = await fetch(url, {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch prayer records: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      const result = await safeJsonParse(response);\n      return result || [];\n    } catch (error: any) {\n      console.error('Error fetching prayer records:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      return [];\n    }\n  }\n\n  async batchUpdatePrayerRecords(updates: Array<{ date: string; prayers: DailyPrayers }>): Promise<PrayerRecord[]> {\n    try {\n      const response = await apiRequest('POST', '/api/prayers/batch', { updates });\n      return await safeJsonParse(response);\n    } catch (error: any) {\n      console.error('Error in batch update prayer records:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      throw error; // Re-throw for caller to handle\n    }\n  }\n\n  async getUserStats(): Promise<UserStats> {\n    try {\n      const response = await fetch('/api/stats', {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch user stats: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      const result = await safeJsonParse(response);\n      return result || {\n        id: 'default',\n        userId: 'demo-user',\n        totalPrayers: 0,\n        onTimePrayers: 0,\n        qazaPrayers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        perfectWeeks: 0,\n        lastStreakUpdate: null,\n        updatedAt: new Date(),\n      };\n    } catch (error: any) {\n      console.error('Error fetching user stats:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      // Return default stats if API fails\n      return {\n        id: 'default',\n        userId: 'demo-user',\n        totalPrayers: 0,\n        onTimePrayers: 0,\n        qazaPrayers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        perfectWeeks: 0,\n        lastStreakUpdate: null,\n        updatedAt: new Date(),\n      };\n    }\n  }\n\n  async updateUserStats(updates: Partial<UserStats>): Promise<UserStats> {\n    const response = await apiRequest('PATCH', '/api/stats', updates);\n    return await safeJsonParse(response);\n  }\n\n  async getYearlyQazaStats(): Promise<{ totalPossible: number; completed: number; qazaRemaining: number; currentYear: number }> {\n    try {\n      const response = await fetch('/api/stats/yearly-qaza', {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch yearly Qaza stats: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      const result = await safeJsonParse(response);\n      return result || {\n        totalPossible: 0,\n        completed: 0,\n        qazaRemaining: 0,\n        currentYear: new Date().getFullYear()\n      };\n    } catch (error: any) {\n      console.error('Error fetching yearly Qaza stats:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      // Return default stats if API fails\n      return {\n        totalPossible: 0,\n        completed: 0,\n        qazaRemaining: 0,\n        currentYear: new Date().getFullYear()\n      };\n    }\n  }\n\n  async getAchievements(): Promise<Achievement[]> {\n    try {\n      const response = await fetch('/api/achievements', {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorMessage = `Failed to fetch achievements: ${response.statusText}`;\n        throw new Error(errorMessage);\n      }\n      \n      const result = await safeJsonParse(response);\n      return result || [];\n    } catch (error: any) {\n      console.error('Error fetching achievements:', error);\n      \n      // Handle auth errors\n      if (handleAuthError(error)) {\n        throw error; // Re-throw for proper error handling upstream\n      }\n      \n      return [];\n    }\n  }\n\n  async createAchievement(achievement: Omit<Achievement, 'id' | 'userId' | 'createdAt'>): Promise<Achievement> {\n    const response = await apiRequest('POST', '/api/achievements', achievement);\n    return await safeJsonParse(response);\n  }\n}\n\nexport const apiService = new ApiService();\n\n// Helper function to convert backend PrayerRecord to DailyPrayers format\nexport function convertPrayerRecordToDailyPrayers(record: PrayerRecord | null): DailyPrayers | null {\n  if (!record || !record.prayers) {\n    return null;\n  }\n\n  return {\n    fajr: record.prayers.fajr,\n    dhuhr: record.prayers.dhuhr,\n    asr: record.prayers.asr,\n    maghrib: record.prayers.maghrib,\n    isha: record.prayers.isha,\n  };\n}\n\n// Helper function to convert DailyPrayers to PrayerRecord prayers format\nexport function convertDailyPrayersToPrayerRecord(prayers: DailyPrayers): PrayerRecord['prayers'] {\n  return {\n    fajr: prayers.fajr,\n    dhuhr: prayers.dhuhr,\n    asr: prayers.asr,\n    maghrib: prayers.maghrib,\n    isha: prayers.isha,\n  };\n}","size_bytes":8540},"server/client/src/lib/authUtils.ts":{"content":"import { toast } from '@/hooks/use-toast';\n\nexport function handleAuthError(error: any) {\n  if (error?.message?.includes('401') || error?.message?.includes('Unauthorized')) {\n    toast({\n      title: \"Session Expired\",\n      description: \"Please log in again to continue using the app.\",\n      variant: \"destructive\",\n    });\n    \n    // Redirect to login after a short delay\n    setTimeout(() => {\n      window.location.href = '/api/login';\n    }, 2000);\n    \n    return true; // Indicates this was an auth error\n  }\n  \n  return false; // Not an auth error\n}\n\nexport function createAuthAwareQuery<T>(queryFn: () => Promise<T>) {\n  return async () => {\n    try {\n      return await queryFn();\n    } catch (error: any) {\n      if (handleAuthError(error)) {\n        throw error; // Re-throw to maintain query error state\n      }\n      throw error;\n    }\n  };\n}\n\nexport function createAuthAwareMutation<T, U>(mutationFn: (data: T) => Promise<U>) {\n  return async (data: T) => {\n    try {\n      return await mutationFn(data);\n    } catch (error: any) {\n      if (handleAuthError(error)) {\n        throw error; // Re-throw to maintain mutation error state\n      }\n      throw error;\n    }\n  };\n}\n\nexport function isAuthError(error: any): boolean {\n  return error?.message?.includes('401') || error?.message?.includes('Unauthorized');\n}","size_bytes":1330},"server/client/src/lib/prayer-utils.ts":{"content":"import { DailyPrayers } from '../contexts/prayer-context';\nimport { apiService, convertPrayerRecordToDailyPrayers } from './api-service';\n\nexport const prayerNames = {\n  fajr: 'Fajr',\n  dhuhr: 'Dhuhr',\n  asr: 'Asr',\n  maghrib: 'Maghrib',\n  isha: 'Isha',\n};\n\nexport const prayerTimes = {\n  fajr: '5:30 AM',\n  dhuhr: '12:45 PM',\n  asr: '4:15 PM',\n  maghrib: '7:20 PM',\n  isha: '8:45 PM',\n};\n\nexport const prayerIcons = {\n  fajr: '🌅',\n  dhuhr: '☀️',\n  asr: '🌤️',\n  maghrib: '🌅',\n  isha: '⭐',\n};\n\nexport function getTodayString(): string {\n  return new Date().toISOString().split('T')[0];\n}\n\n// Weekly utilities for the weekly checkbox feature\n\n/**\n * Get the start of week (Monday) for a given date\n */\nexport function getWeekStart(date: Date): Date {\n  const d = new Date(date);\n  const day = d.getDay();\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday\n  return new Date(d.setDate(diff));\n}\n\n/**\n * Get the end of week (Sunday) for a given date\n */\nexport function getWeekEnd(date: Date): Date {\n  const weekStart = getWeekStart(date);\n  const weekEnd = new Date(weekStart);\n  weekEnd.setDate(weekStart.getDate() + 6);\n  return weekEnd;\n}\n\n/**\n * Get all dates in a week (Monday to Sunday) as string array\n */\nexport function getWeekDatesArray(date: Date): string[] {\n  const weekStart = getWeekStart(date);\n  const dates: string[] = [];\n  \n  for (let i = 0; i < 7; i++) {\n    const currentDate = new Date(weekStart);\n    currentDate.setDate(weekStart.getDate() + i);\n    dates.push(currentDate.toISOString().split('T')[0]);\n  }\n  \n  return dates;\n}\n\n/**\n * Generate past weeks for selection (only past weeks, not future)\n * Returns an array of week objects with start/end dates and date arrays\n */\nexport function getPastWeeks(numberOfWeeks: number = 12): Array<{\n  startDate: string;\n  endDate: string;\n  dates: string[];\n  weekLabel: string;\n}> {\n  const today = new Date();\n  const weeks: Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    weekLabel: string;\n  }> = [];\n  \n  // Start from current week and go back\n  for (let i = 0; i < numberOfWeeks; i++) {\n    const weekDate = new Date(today);\n    weekDate.setDate(today.getDate() - (i * 7));\n    \n    const weekStart = getWeekStart(weekDate);\n    const weekEnd = getWeekEnd(weekDate);\n    \n    // Only include weeks that are in the past or current\n    if (weekEnd <= today) {\n      const dates = getWeekDatesArray(weekDate);\n      const weekLabel = formatWeekLabel(weekStart, weekEnd);\n      \n      weeks.push({\n        startDate: weekStart.toISOString().split('T')[0],\n        endDate: weekEnd.toISOString().split('T')[0],\n        dates,\n        weekLabel,\n      });\n    }\n  }\n  \n  return weeks; // Return in descending order (most recent first)\n}\n\n/**\n * Generate weeks from January 1st up to current week (excluding future weeks)\n * Returns an array of week objects with start/end dates and date arrays\n */\nexport function getWeeksFromJanuary(): Array<{\n  startDate: string;\n  endDate: string;\n  dates: string[];\n  weekLabel: string;\n}> {\n  const today = new Date();\n  const currentYear = today.getFullYear();\n  const januaryFirst = new Date(currentYear, 0, 1); // January 1st of current year\n  \n  const weeks: Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    weekLabel: string;\n  }> = [];\n  \n  // Start from the first week of January and go forward\n  let currentWeekStart = getWeekStart(januaryFirst);\n  \n  while (currentWeekStart <= today) {\n    const currentWeekEnd = getWeekEnd(currentWeekStart);\n    \n    // Only include weeks that are in the past or current (not future)\n    if (currentWeekEnd <= today) {\n      const dates = getWeekDatesArray(currentWeekStart);\n      const weekLabel = formatWeekLabel(currentWeekStart, currentWeekEnd);\n      \n      weeks.push({\n        startDate: currentWeekStart.toISOString().split('T')[0],\n        endDate: currentWeekEnd.toISOString().split('T')[0],\n        dates,\n        weekLabel,\n      });\n    }\n    \n    // Move to next week\n    currentWeekStart = new Date(currentWeekStart);\n    currentWeekStart.setDate(currentWeekStart.getDate() + 7);\n  }\n  \n  return weeks.reverse(); // Return in descending order (most recent first)\n}\n\n/**\n * Generate months from January up to current month (excluding current month)\n * Returns an array of month objects with start/end dates and date arrays\n */\nexport function getPastMonthsFromJanuary(): Array<{\n  startDate: string;\n  endDate: string;\n  dates: string[];\n  monthLabel: string;\n  monthName: string;\n  year: number;\n}> {\n  const today = new Date();\n  const currentYear = today.getFullYear();\n  const currentMonth = today.getMonth(); // 0-based (0 = January, 11 = December)\n  \n  const months: Array<{\n    startDate: string;\n    endDate: string;\n    dates: string[];\n    monthLabel: string;\n    monthName: string;\n    year: number;\n  }> = [];\n  \n  // Generate months from most recent back to January (descending order)\n  for (let monthIndex = currentMonth - 1; monthIndex >= 0; monthIndex--) {\n    const firstDay = new Date(currentYear, monthIndex, 1);\n    const lastDay = new Date(currentYear, monthIndex + 1, 0); // Last day of the month\n    \n    const monthDates: string[] = [];\n    for (let d = new Date(firstDay); d <= lastDay; d.setDate(d.getDate() + 1)) {\n      monthDates.push(d.toISOString().split('T')[0]);\n    }\n    \n    const monthName = firstDay.toLocaleDateString('en-US', { month: 'long' });\n    const monthLabel = `${monthName} ${currentYear}`;\n    \n    months.push({\n      startDate: monthDates[0],\n      endDate: monthDates[monthDates.length - 1],\n      dates: monthDates,\n      monthLabel,\n      monthName,\n      year: currentYear,\n    });\n  }\n  \n  return months;\n}\n\n/**\n * Format week label for display (e.g., \"Dec 9-15, 2024\")\n */\nexport function formatWeekLabel(startDate: Date, endDate: Date): string {\n  const startMonth = startDate.toLocaleDateString('en-US', { month: 'short' });\n  const endMonth = endDate.toLocaleDateString('en-US', { month: 'short' });\n  const startDay = startDate.getDate();\n  const endDay = endDate.getDate();\n  const year = endDate.getFullYear();\n  \n  if (startMonth === endMonth) {\n    return `${startMonth} ${startDay}-${endDay}, ${year}`;\n  } else {\n    return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${year}`;\n  }\n}\n\n/**\n * Calculate week completion percentage based on prayer records\n */\nexport async function calculateWeekCompletion(dates: string[]): Promise<{\n  completionPercentage: number;\n  completedPrayers: number;\n  totalPrayers: number;\n  status: 'empty' | 'partial' | 'complete';\n}> {\n  try {\n    const records = await apiService.getPrayerRecords(dates[0], dates[dates.length - 1]);\n    \n    let completedPrayers = 0;\n    let totalPrayers = dates.length * 5; // 5 prayers per day\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (prayer.completed) {\n            completedPrayers++;\n          }\n        });\n      }\n    });\n    \n    const completionPercentage = totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n    \n    let status: 'empty' | 'partial' | 'complete' = 'empty';\n    if (completionPercentage === 100) {\n      status = 'complete';\n    } else if (completionPercentage > 0) {\n      status = 'partial';\n    }\n    \n    return {\n      completionPercentage,\n      completedPrayers,\n      totalPrayers,\n      status,\n    };\n  } catch (error) {\n    console.error('Error calculating week completion:', error);\n    return {\n      completionPercentage: 0,\n      completedPrayers: 0,\n      totalPrayers: dates.length * 5,\n      status: 'empty',\n    };\n  }\n}\n\n/**\n * Calculate month completion percentage based on prayer records\n */\nexport async function calculateMonthCompletion(dates: string[]): Promise<{\n  completionPercentage: number;\n  completedPrayers: number;\n  totalPrayers: number;\n  status: 'empty' | 'partial' | 'complete';\n}> {\n  try {\n    const records = await apiService.getPrayerRecords(dates[0], dates[dates.length - 1]);\n    \n    let completedPrayers = 0;\n    let totalPrayers = dates.length * 5; // 5 prayers per day\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (prayer.completed) {\n            completedPrayers++;\n          }\n        });\n      }\n    });\n    \n    const completionPercentage = totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n    \n    let status: 'empty' | 'partial' | 'complete' = 'empty';\n    if (completionPercentage === 100) {\n      status = 'complete';\n    } else if (completionPercentage > 0) {\n      status = 'partial';\n    }\n    \n    return {\n      completionPercentage,\n      completedPrayers,\n      totalPrayers,\n      status,\n    };\n  } catch (error) {\n    console.error('Error calculating month completion:', error);\n    return {\n      completionPercentage: 0,\n      completedPrayers: 0,\n      totalPrayers: dates.length * 5,\n      status: 'empty',\n    };\n  }\n}\n\n/**\n * Check if a week is in the future (should not be selectable)\n */\nexport function isWeekInFuture(weekEndDate: string): boolean {\n  const today = new Date();\n  const weekEnd = new Date(weekEndDate);\n  return weekEnd > today;\n}\n\nexport function getWeekDates(): string[] {\n  const today = new Date();\n  const monday = new Date(today);\n  monday.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1));\n  \n  const weekDates: string[] = [];\n  for (let i = 0; i < 7; i++) {\n    const date = new Date(monday);\n    date.setDate(monday.getDate() + i);\n    weekDates.push(date.toISOString().split('T')[0]);\n  }\n  \n  return weekDates;\n}\n\nexport function getMonthDates(): string[] {\n  const today = new Date();\n  const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);\n  const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n  \n  const monthDates: string[] = [];\n  for (let d = firstDay; d <= lastDay; d.setDate(d.getDate() + 1)) {\n    monthDates.push(d.toISOString().split('T')[0]);\n  }\n  \n  return monthDates;\n}\n\nexport function getYearDates(): string[] {\n  const today = new Date();\n  const firstDay = new Date(today.getFullYear(), 0, 1);\n  const lastDay = new Date(today.getFullYear(), 11, 31);\n  \n  const yearDates: string[] = [];\n  for (let d = new Date(firstDay); d <= lastDay; d.setDate(d.getDate() + 1)) {\n    yearDates.push(d.toISOString().split('T')[0]);\n  }\n  \n  return yearDates;\n}\n\n// Get date range for a specific time period (only up to today)\nexport function getDateRangeForPeriod(period: 'week' | 'month' | 'year', referenceDate?: Date): { startDate: string; endDate: string; dates: string[] } {\n  const today = referenceDate || new Date();\n  const todayString = today.toISOString().split('T')[0];\n  \n  switch (period) {\n    case 'week': {\n      const monday = new Date(today);\n      monday.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1));\n      \n      const weekDates: string[] = [];\n      for (let i = 0; i < 7; i++) {\n        const date = new Date(monday);\n        date.setDate(monday.getDate() + i);\n        const dateString = date.toISOString().split('T')[0];\n        \n        // Only include dates up to today\n        if (dateString <= todayString) {\n          weekDates.push(dateString);\n        }\n      }\n      \n      return {\n        startDate: weekDates[0],\n        endDate: weekDates[weekDates.length - 1],\n        dates: weekDates\n      };\n    }\n    \n    case 'month': {\n      const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);\n      \n      const monthDates: string[] = [];\n      for (let d = new Date(firstDay); d <= today; d.setDate(d.getDate() + 1)) {\n        monthDates.push(d.toISOString().split('T')[0]);\n      }\n      \n      return {\n        startDate: monthDates[0],\n        endDate: monthDates[monthDates.length - 1],\n        dates: monthDates\n      };\n    }\n    \n    case 'year': {\n      const firstDay = new Date(today.getFullYear(), 0, 1);\n      \n      const yearDates: string[] = [];\n      for (let d = new Date(firstDay); d <= today; d.setDate(d.getDate() + 1)) {\n        yearDates.push(d.toISOString().split('T')[0]);\n      }\n      \n      return {\n        startDate: yearDates[0],\n        endDate: yearDates[yearDates.length - 1],\n        dates: yearDates\n      };\n    }\n    \n    default:\n      throw new Error(`Unsupported period: ${period}`);\n  }\n}\n\n// Get analytics data for a specific time period\nexport async function getAnalyticsDataForPeriod(period: 'week' | 'month' | 'year') {\n  try {\n    const { startDate, endDate, dates } = getDateRangeForPeriod(period);\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    const prayerStats = {\n      fajr: { completed: 0, total: 0 },\n      dhuhr: { completed: 0, total: 0 },\n      asr: { completed: 0, total: 0 },\n      maghrib: { completed: 0, total: 0 },\n      isha: { completed: 0, total: 0 },\n    };\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          Object.entries(prayers).forEach(([prayerName, prayer]) => {\n            const prayerKey = prayerName as keyof typeof prayerStats;\n            prayerStats[prayerKey].total++;\n            if (prayer.completed) {\n              prayerStats[prayerKey].completed++;\n            }\n          });\n        }\n      } else {\n        // Count missing days as incomplete\n        Object.keys(prayerStats).forEach(prayer => {\n          prayerStats[prayer as keyof typeof prayerStats].total++;\n        });\n      }\n    });\n    \n    return prayerStats;\n  } catch (error) {\n    console.error('Failed to get analytics data from API:', error);\n    // Fallback to local storage for the requested period\n    const { dates } = getDateRangeForPeriod(period);\n    const prayerStats = {\n      fajr: { completed: 0, total: 0 },\n      dhuhr: { completed: 0, total: 0 },\n      asr: { completed: 0, total: 0 },\n      maghrib: { completed: 0, total: 0 },\n      isha: { completed: 0, total: 0 },\n    };\n    \n    dates.forEach(date => {\n      const stored = localStorage.getItem(`prayers-${date}`);\n      if (stored) {\n        const prayers: DailyPrayers = JSON.parse(stored);\n        Object.entries(prayers).forEach(([prayerName, prayer]) => {\n          const prayerKey = prayerName as keyof typeof prayerStats;\n          prayerStats[prayerKey].total++;\n          if (prayer.completed) {\n            prayerStats[prayerKey].completed++;\n          }\n        });\n      } else {\n        Object.keys(prayerStats).forEach(prayer => {\n          prayerStats[prayer as keyof typeof prayerStats].total++;\n        });\n      }\n    });\n    \n    return prayerStats;\n  }\n}\n\n// Get trend chart data for a specific time period\nexport async function getTrendDataForPeriod(period: 'week' | 'month' | 'year') {\n  try {\n    const { startDate, endDate, dates } = getDateRangeForPeriod(period);\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    // Generate labels based on period\n    let labels: string[];\n    let dataPoints: number[];\n    \n    if (period === 'week') {\n      labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n      dataPoints = dates.map(date => {\n        const record = records.find(r => r.date === date);\n        if (record && record.prayers) {\n          const prayers = convertPrayerRecordToDailyPrayers(record);\n          return prayers ? getTodayCompletedCount(prayers) : 0;\n        }\n        return 0;\n      });\n    } else if (period === 'month') {\n      // Group by week for month view\n      const weekGroups: { [key: string]: number[] } = {};\n      dates.forEach((date, index) => {\n        const dateObj = new Date(date);\n        const weekOfMonth = Math.ceil((dateObj.getDate() + new Date(dateObj.getFullYear(), dateObj.getMonth(), 1).getDay()) / 7);\n        const weekKey = `Week ${weekOfMonth}`;\n        \n        if (!weekGroups[weekKey]) weekGroups[weekKey] = [];\n        \n        const record = records.find(r => r.date === date);\n        let completed = 0;\n        if (record && record.prayers) {\n          const prayers = convertPrayerRecordToDailyPrayers(record);\n          completed = prayers ? getTodayCompletedCount(prayers) : 0;\n        }\n        weekGroups[weekKey].push(completed);\n      });\n      \n      labels = Object.keys(weekGroups);\n      dataPoints = labels.map(week => {\n        const weekData = weekGroups[week];\n        return Math.round(weekData.reduce((sum, val) => sum + val, 0) / weekData.length);\n      });\n    } else {\n      // Group by month for year view\n      const monthGroups: { [key: string]: number[] } = {};\n      dates.forEach(date => {\n        const dateObj = new Date(date);\n        const monthKey = dateObj.toLocaleString('default', { month: 'short' });\n        \n        if (!monthGroups[monthKey]) monthGroups[monthKey] = [];\n        \n        const record = records.find(r => r.date === date);\n        let completed = 0;\n        if (record && record.prayers) {\n          const prayers = convertPrayerRecordToDailyPrayers(record);\n          completed = prayers ? getTodayCompletedCount(prayers) : 0;\n        }\n        monthGroups[monthKey].push(completed);\n      });\n      \n      labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      dataPoints = labels.map(month => {\n        const monthData = monthGroups[month] || [];\n        return monthData.length > 0 ? Math.round(monthData.reduce((sum, val) => sum + val, 0) / monthData.length) : 0;\n      });\n    }\n    \n    return {\n      labels,\n      dataPoints,\n      period\n    };\n  } catch (error) {\n    console.error('Failed to get trend data from API:', error);\n    // Fallback to localStorage\n    const { dates } = getDateRangeForPeriod(period);\n    const labels = period === 'week' \n      ? ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n      : period === 'month'\n      ? ['Week 1', 'Week 2', 'Week 3', 'Week 4']\n      : ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    const dataPoints = labels.map((_, index) => {\n      if (period === 'week' && index < dates.length) {\n        const stored = localStorage.getItem(`prayers-${dates[index]}`);\n        if (stored) {\n          const prayers: DailyPrayers = JSON.parse(stored);\n          return getTodayCompletedCount(prayers);\n        }\n      }\n      return 0;\n    });\n    \n    return { labels, dataPoints, period };\n  }\n}\n\n// Get summary statistics for a time period\nexport async function getPeriodSummary(period: 'week' | 'month' | 'year') {\n  try {\n    const { startDate, endDate, dates } = getDateRangeForPeriod(period);\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let totalPrayers = 0;\n    let completedPrayers = 0;\n    let onTimePrayers = 0;\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          totalPrayers++;\n          if (prayer.completed) {\n            completedPrayers++;\n            if (prayer.onTime) {\n              onTimePrayers++;\n            }\n          }\n        });\n      } else {\n        totalPrayers += 5; // 5 prayers per day\n      }\n    });\n    \n    const qazaPrayers = totalPrayers - completedPrayers;\n    const successRate = totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n    \n    return {\n      totalPrayers: completedPrayers,\n      totalPossible: totalPrayers,\n      successRate,\n      qazaPrayers,\n      onTimePrayers,\n      period\n    };\n  } catch (error) {\n    console.error('Failed to get period summary from API:', error);\n    return {\n      totalPrayers: 0,\n      totalPossible: 0,\n      successRate: 0,\n      qazaPrayers: 0,\n      onTimePrayers: 0,\n      period\n    };\n  }\n}\n\nexport async function calculateWeekProgressFromAPI(): Promise<number> {\n  try {\n    const weekDates = getWeekDates();\n    const startDate = weekDates[0];\n    const endDate = weekDates[weekDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let totalPrayers = 0;\n    let completedPrayers = 0;\n    \n    weekDates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          totalPrayers++;\n          if (prayer.completed) completedPrayers++;\n        });\n      } else {\n        totalPrayers += 5; // 5 prayers per day if no record\n      }\n    });\n    \n    return totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n  } catch (error) {\n    console.warn('Failed to calculate week progress from API, falling back to localStorage:', error);\n    return calculateWeekProgress();\n  }\n}\n\nexport function calculateWeekProgress(): number {\n  const weekDates = getWeekDates();\n  let totalPrayers = 0;\n  let completedPrayers = 0;\n  \n  weekDates.forEach(date => {\n    const stored = localStorage.getItem(`prayers-${date}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      Object.values(prayers).forEach(prayer => {\n        totalPrayers++;\n        if (prayer.completed) completedPrayers++;\n      });\n    } else {\n      totalPrayers += 5; // 5 prayers per day\n    }\n  });\n  \n  return totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n}\n\nexport function calculateMonthProgress(): number {\n  const monthDates = getMonthDates();\n  let totalPrayers = 0;\n  let completedPrayers = 0;\n  \n  monthDates.forEach(date => {\n    const stored = localStorage.getItem(`prayers-${date}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      Object.values(prayers).forEach(prayer => {\n        totalPrayers++;\n        if (prayer.completed) completedPrayers++;\n      });\n    } else {\n      totalPrayers += 5; // 5 prayers per day\n    }\n  });\n  \n  return totalPrayers > 0 ? Math.round((completedPrayers / totalPrayers) * 100) : 0;\n}\n\nexport function getTodayCompletedCount(prayers: DailyPrayers): number {\n  return Object.values(prayers).filter(prayer => prayer.completed).length;\n}\n\n// Enhanced achievement checking with multiple types\nexport async function checkAchievements(prayers: DailyPrayers, weekProgress: number, currentStreak: number, userStats?: any) {\n  const achievements: Array<{ \n    type: string;\n    title: string; \n    description: string;\n    metadata?: any;\n  }> = [];\n  \n  const todayCompleted = getTodayCompletedCount(prayers);\n  const today = getTodayString();\n  \n  // Perfect Day Achievement\n  if (todayCompleted === 5) {\n    achievements.push({\n      type: 'perfect_day',\n      title: \"Perfect Day\",\n      description: \"All 5 prayers completed today!\",\n      metadata: { date: today, onTimePrayers: Object.values(prayers).filter(p => p.onTime).length }\n    });\n  }\n  \n  // Perfect Week Achievement\n  if (weekProgress === 100) {\n    const weekDates = getWeekDates();\n    achievements.push({\n      type: 'perfect_week',\n      title: \"Perfect Week\",\n      description: \"All 35 prayers completed this week!\",\n      metadata: {\n        weekNumber: getWeekNumber(new Date()),\n        year: new Date().getFullYear(),\n        dateRange: { start: weekDates[0], end: weekDates[6] }\n      }\n    });\n  }\n  \n  // Streak Achievements\n  const streakAchievements = checkStreakAchievements(currentStreak);\n  achievements.push(...streakAchievements);\n  \n  // Prayer Count Milestones\n  if (userStats) {\n    const milestoneAchievements = checkPrayerMilestones(userStats.totalPrayers || 0);\n    achievements.push(...milestoneAchievements);\n    \n    // Consistency Achievements\n    const consistencyAchievements = await checkConsistencyAchievements(userStats);\n    achievements.push(...consistencyAchievements);\n  }\n  \n  // Perfect Month Achievement (check if we're at month end)\n  const monthProgress = await calculateMonthProgressFromAPI();\n  if (monthProgress === 100 && isEndOfMonth()) {\n    achievements.push({\n      type: 'perfect_month',\n      title: \"Perfect Month\",\n      description: \"All prayers completed this month!\",\n      metadata: {\n        month: new Date().getMonth() + 1,\n        year: new Date().getFullYear()\n      }\n    });\n  }\n  \n  // Early Bird Achievements (Fajr consistency)\n  const earlyBirdAchievements = await checkEarlyBirdAchievements();\n  achievements.push(...earlyBirdAchievements);\n  \n  // Night Owl Achievements (Isha consistency)\n  const nightOwlAchievements = await checkNightOwlAchievements();\n  achievements.push(...nightOwlAchievements);\n  \n  // Golden Hour Achievements (Maghrib consistency)\n  const goldenHourAchievements = await checkGoldenHourAchievements();\n  achievements.push(...goldenHourAchievements);\n  \n  // Weekend Warrior Achievements\n  const weekendWarriorAchievements = await checkWeekendWarriorAchievements();\n  achievements.push(...weekendWarriorAchievements);\n  \n  // Dedication Achievements (Weekend streaks)\n  const dedicationAchievements = await checkDedicationAchievements();\n  achievements.push(...dedicationAchievements);\n  \n  // Comeback Achievements\n  const comebackAchievements = await checkComebackAchievements();\n  achievements.push(...comebackAchievements);\n  \n  // Monthly Champion Achievements\n  const monthlyChampionAchievements = await checkMonthlyChampionAchievements();\n  achievements.push(...monthlyChampionAchievements);\n  \n  // Seasonal Achievements\n  const seasonalAchievements = await checkSeasonalAchievements();\n  achievements.push(...seasonalAchievements);\n  \n  return achievements;\n}\n\n// Helper function to get week number\nexport function getWeekNumber(date: Date): number {\n  const startDate = new Date(date.getFullYear(), 0, 1);\n  const days = Math.floor((date.getTime() - startDate.getTime()) / (24 * 60 * 60 * 1000));\n  return Math.ceil(days / 7);\n}\n\n// Check if it's the end of the month\nexport function isEndOfMonth(): boolean {\n  const today = new Date();\n  const tomorrow = new Date(today);\n  tomorrow.setDate(today.getDate() + 1);\n  return tomorrow.getMonth() !== today.getMonth();\n}\n\n// Check streak-based achievements\nexport function checkStreakAchievements(currentStreak: number): Array<{ type: string; title: string; description: string; metadata: any }> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  const streakMilestones = [7, 30, 50, 100, 200, 365];\n  \n  for (const milestone of streakMilestones) {\n    if (currentStreak === milestone) {\n      let title, description;\n      \n      switch (milestone) {\n        case 7:\n          title = \"Week Warrior\";\n          description = \"7-day prayer streak achieved!\";\n          break;\n        case 30:\n          title = \"Monthly Master\";\n          description = \"30-day prayer streak achieved!\";\n          break;\n        case 50:\n          title = \"Consistency Champion\";\n          description = \"50-day prayer streak achieved!\";\n          break;\n        case 100:\n          title = \"Century Devotee\";\n          description = \"100-day prayer streak achieved!\";\n          break;\n        case 200:\n          title = \"Dedication Legend\";\n          description = \"200-day prayer streak achieved!\";\n          break;\n        case 365:\n          title = \"Yearly Devotee\";\n          description = \"365-day prayer streak achieved!\";\n          break;\n        default:\n          title = `${milestone}-Day Streak`;\n          description = `${milestone}-day prayer streak achieved!`;\n      }\n      \n      achievements.push({\n        type: 'streak_milestone',\n        title,\n        description,\n        metadata: { streakDays: milestone, earnedDate: getTodayString() }\n      });\n      break; // Only award the current milestone\n    }\n  }\n  \n  return achievements;\n}\n\n// Check prayer count milestones\nexport function checkPrayerMilestones(totalPrayers: number): Array<{ type: string; title: string; description: string; metadata: any }> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  const prayerMilestones = [50, 100, 250, 500, 1000, 2500, 5000];\n  \n  for (const milestone of prayerMilestones) {\n    if (totalPrayers === milestone) {\n      let title, description;\n      \n      switch (milestone) {\n        case 50:\n          title = \"Prayer Beginner\";\n          description = \"50 prayers completed!\";\n          break;\n        case 100:\n          title = \"Prayer Enthusiast\";\n          description = \"100 prayers completed!\";\n          break;\n        case 250:\n          title = \"Prayer Devotee\";\n          description = \"250 prayers completed!\";\n          break;\n        case 500:\n          title = \"Prayer Champion\";\n          description = \"500 prayers completed!\";\n          break;\n        case 1000:\n          title = \"Prayer Master\";\n          description = \"1000 prayers completed!\";\n          break;\n        case 2500:\n          title = \"Prayer Legend\";\n          description = \"2500 prayers completed!\";\n          break;\n        case 5000:\n          title = \"Prayer Saint\";\n          description = \"5000 prayers completed!\";\n          break;\n        default:\n          title = `${milestone} Prayers`;\n          description = `${milestone} prayers completed!`;\n      }\n      \n      achievements.push({\n        type: 'prayer_milestone',\n        title,\n        description,\n        metadata: { totalPrayers: milestone, earnedDate: getTodayString() }\n      });\n      break;\n    }\n  }\n  \n  return achievements;\n}\n\n// Check consistency-based achievements\nexport async function checkConsistencyAchievements(userStats: any): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    // Calculate recent consistency (last 30 days)\n    const monthSummary = await getPeriodSummary('month');\n    const consistencyRate = monthSummary.successRate;\n    \n    // Early Bird Achievement - High Fajr completion rate\n    const weekSummary = await getPeriodSummary('week');\n    if (weekSummary.successRate >= 90) {\n      // Check if this is specifically for consistent week performance\n      achievements.push({\n        type: 'consistency',\n        title: \"Consistent Devotee\",\n        description: \"90%+ prayer completion this week!\",\n        metadata: {\n          consistencyRate: weekSummary.successRate,\n          period: 'week',\n          earnedDate: getTodayString()\n        }\n      });\n    }\n    \n    // Monthly Consistency\n    if (consistencyRate >= 80 && isEndOfMonth()) {\n      achievements.push({\n        type: 'consistency',\n        title: \"Monthly Consistency\",\n        description: \"80%+ prayer completion this month!\",\n        metadata: {\n          consistencyRate,\n          period: 'month',\n          month: new Date().getMonth() + 1,\n          year: new Date().getFullYear(),\n          earnedDate: getTodayString()\n        }\n      });\n    }\n  } catch (error) {\n    console.warn('Failed to check consistency achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Calculate month progress from API\nexport async function calculateMonthProgressFromAPI(): Promise<number> {\n  try {\n    const monthSummary = await getPeriodSummary('month');\n    return monthSummary.successRate;\n  } catch (error) {\n    console.warn('Failed to calculate month progress from API:', error);\n    return calculateMonthProgress();\n  }\n}\n\nexport async function getWeeklyDataFromAPI() {\n  try {\n    const weekDates = getWeekDates();\n    const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    const startDate = weekDates[0];\n    const endDate = weekDates[weekDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    return weekDates.map((date, index) => {\n      const record = records.find(r => r.date === date);\n      let completed = 0;\n      \n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          completed = getTodayCompletedCount(prayers);\n        }\n      }\n      \n      return {\n        day: weekDays[index],\n        date,\n        completed,\n        total: 5,\n        percentage: Math.round((completed / 5) * 100),\n      };\n    });\n  } catch (error) {\n    console.warn('Failed to get weekly data from API, falling back to localStorage:', error);\n    return getWeeklyData();\n  }\n}\n\nexport function getWeeklyData() {\n  const weekDates = getWeekDates();\n  const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  \n  return weekDates.map((date, index) => {\n    const stored = localStorage.getItem(`prayers-${date}`);\n    let completed = 0;\n    \n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      completed = getTodayCompletedCount(prayers);\n    }\n    \n    return {\n      day: weekDays[index],\n      date,\n      completed,\n      total: 5,\n      percentage: Math.round((completed / 5) * 100),\n    };\n  });\n}\n\nexport async function getPrayerAnalyticsFromAPI() {\n  try {\n    const monthDates = getMonthDates();\n    const startDate = monthDates[0];\n    const endDate = monthDates[monthDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    const prayerStats = {\n      fajr: { completed: 0, total: 0 },\n      dhuhr: { completed: 0, total: 0 },\n      asr: { completed: 0, total: 0 },\n      maghrib: { completed: 0, total: 0 },\n      isha: { completed: 0, total: 0 },\n    };\n    \n    monthDates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          Object.entries(prayers).forEach(([prayerName, prayer]) => {\n            const prayerKey = prayerName as keyof typeof prayerStats;\n            prayerStats[prayerKey].total++;\n            if (prayer.completed) {\n              prayerStats[prayerKey].completed++;\n            }\n          });\n        }\n      } else {\n        // Count missing days as incomplete\n        Object.keys(prayerStats).forEach(prayer => {\n          prayerStats[prayer as keyof typeof prayerStats].total++;\n        });\n      }\n    });\n    \n    return prayerStats;\n  } catch (error) {\n    console.warn('Failed to get prayer analytics from API, falling back to localStorage:', error);\n    return getPrayerAnalytics();\n  }\n}\n\nexport function getPrayerAnalytics() {\n  const monthDates = getMonthDates();\n  const prayerStats = {\n    fajr: { completed: 0, total: 0 },\n    dhuhr: { completed: 0, total: 0 },\n    asr: { completed: 0, total: 0 },\n    maghrib: { completed: 0, total: 0 },\n    isha: { completed: 0, total: 0 },\n  };\n  \n  monthDates.forEach(date => {\n    const stored = localStorage.getItem(`prayers-${date}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      Object.entries(prayers).forEach(([prayerName, prayer]) => {\n        const prayerKey = prayerName as keyof typeof prayerStats;\n        prayerStats[prayerKey].total++;\n        if (prayer.completed) {\n          prayerStats[prayerKey].completed++;\n        }\n      });\n    } else {\n      // Count missing days as incomplete\n      Object.keys(prayerStats).forEach(prayer => {\n        prayerStats[prayer as keyof typeof prayerStats].total++;\n      });\n    }\n  });\n  \n  return prayerStats;\n}\n\nexport function getCurrentStreak(): number {\n  let streak = 0;\n  const today = new Date();\n  \n  for (let i = 0; i < 365; i++) { // Check up to a year back\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    \n    const stored = localStorage.getItem(`prayers-${dateString}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      const completed = getTodayCompletedCount(prayers);\n      \n      if (completed === 5) {\n        streak++;\n      } else {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  \n  return streak;\n}\n\nexport function getQazaCount(): number {\n  // Calculate missed prayers from the past 30 days\n  let qazaCount = 0;\n  const today = new Date();\n  \n  for (let i = 0; i < 30; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    \n    const stored = localStorage.getItem(`prayers-${dateString}`);\n    if (stored) {\n      const prayers: DailyPrayers = JSON.parse(stored);\n      Object.values(prayers).forEach(prayer => {\n        if (!prayer.completed) {\n          qazaCount++;\n        }\n      });\n    } else {\n      qazaCount += 5; // All 5 prayers missed if no data\n    }\n  }\n  \n  return qazaCount;\n}\n\n// Enhanced API-based streak calculation\nexport async function calculateCurrentStreakFromAPI(): Promise<number> {\n  try {\n    const today = new Date();\n    let streak = 0;\n    let checkDate = new Date(today);\n    \n    // Go backwards day by day to find consecutive prayer completion\n    while (true) {\n      const dateString = checkDate.toISOString().split('T')[0];\n      const record = await apiService.getPrayerRecord(dateString);\n      \n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          // Check if all 5 prayers were completed for this day\n          const allCompleted = Object.values(prayers).every(prayer => prayer.completed);\n          if (allCompleted) {\n            streak++;\n            checkDate.setDate(checkDate.getDate() - 1);\n          } else {\n            break; // Streak broken\n          }\n        } else {\n          break;\n        }\n      } else {\n        // No record means no prayers completed\n        break;\n      }\n      \n      // Limit to reasonable check period (1 year)\n      if (streak > 365) break;\n    }\n    \n    return streak;\n  } catch (error) {\n    console.error('Failed to calculate streak from API:', error);\n    return getCurrentStreak(); // Fallback to localStorage\n  }\n}\n\n// Enhanced API-based qaza count calculation\nexport async function calculateQazaCountFromAPI(): Promise<number> {\n  try {\n    const { startDate, endDate, dates } = getDateRangeForPeriod('month');\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let qazaCount = 0;\n    \n    dates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (!prayer.completed) {\n            qazaCount++;\n          }\n        });\n      } else {\n        // No record means all 5 prayers missed\n        qazaCount += 5;\n      }\n    });\n    \n    return qazaCount;\n  } catch (error) {\n    console.error('Failed to calculate qaza count from API:', error);\n    return getQazaCount(); // Fallback to localStorage\n  }\n}\n\n// Calculate comprehensive user statistics\nexport async function calculateUserStatistics(userId?: string): Promise<{\n  totalPrayers: number;\n  onTimePrayers: number;\n  qazaPrayers: number;\n  currentStreak: number;\n  bestStreak: number;\n  perfectWeeks: number;\n}> {\n  try {\n    // Get data for the past year to calculate comprehensive stats\n    const { startDate, endDate } = getDateRangeForPeriod('year');\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let totalPrayers = 0;\n    let onTimePrayers = 0;\n    let qazaPrayers = 0;\n    let currentStreak = 0;\n    let bestStreak = 0;\n    let perfectWeeks = 0;\n    \n    // Calculate current streak\n    currentStreak = await calculateCurrentStreakFromAPI();\n    \n    // Calculate historical streaks to find best streak\n    let tempStreak = 0;\n    const sortedRecords = records.sort((a, b) => a.date.localeCompare(b.date));\n    \n    sortedRecords.forEach(record => {\n      if (record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          // Count prayers for this day\n          Object.values(prayers).forEach(prayer => {\n            totalPrayers++;\n            if (prayer.completed) {\n              if (prayer.onTime) {\n                onTimePrayers++;\n              }\n            } else {\n              qazaPrayers++;\n            }\n          });\n          \n          // Check if all prayers completed for streak calculation\n          const allCompleted = Object.values(prayers).every(prayer => prayer.completed);\n          if (allCompleted) {\n            tempStreak++;\n            bestStreak = Math.max(bestStreak, tempStreak);\n          } else {\n            tempStreak = 0;\n          }\n        }\n      } else {\n        // No prayers recorded - break streak and add to qaza\n        qazaPrayers += 5;\n        tempStreak = 0;\n      }\n    });\n    \n    // Calculate perfect weeks\n    const weekGroups = getWeekGroupsFromRecords(records);\n    perfectWeeks = weekGroups.filter(week => week.completionRate === 100).length;\n    \n    return {\n      totalPrayers: totalPrayers - qazaPrayers, // Only count completed prayers\n      onTimePrayers,\n      qazaPrayers,\n      currentStreak,\n      bestStreak: Math.max(bestStreak, currentStreak),\n      perfectWeeks,\n    };\n  } catch (error) {\n    console.error('Failed to calculate user statistics:', error);\n    return {\n      totalPrayers: 0,\n      onTimePrayers: 0,\n      qazaPrayers: 0,\n      currentStreak: 0,\n      bestStreak: 0,\n      perfectWeeks: 0,\n    };\n  }\n}\n\n// Helper function to group records by week\nfunction getWeekGroupsFromRecords(records: any[]): Array<{ completionRate: number }> {\n  const weeks: { [key: string]: { completed: number; total: number } } = {};\n  \n  records.forEach(record => {\n    const date = new Date(record.date);\n    const weekStart = new Date(date);\n    weekStart.setDate(date.getDate() - (date.getDay() === 0 ? 6 : date.getDay() - 1));\n    const weekKey = weekStart.toISOString().split('T')[0];\n    \n    if (!weeks[weekKey]) {\n      weeks[weekKey] = { completed: 0, total: 0 };\n    }\n    \n    if (record.prayers) {\n      const prayers = convertPrayerRecordToDailyPrayers(record);\n      if (prayers) {\n        Object.values(prayers).forEach(prayer => {\n          weeks[weekKey].total++;\n          if (prayer.completed) {\n            weeks[weekKey].completed++;\n          }\n        });\n      }\n    } else {\n      weeks[weekKey].total += 5;\n    }\n  });\n  \n  return Object.values(weeks).map(week => ({\n    completionRate: week.total > 0 ? Math.round((week.completed / week.total) * 100) : 0\n  }));\n}\n\n// Update user statistics in backend\nexport async function updateUserStatisticsInBackend(newPrayers: DailyPrayers): Promise<void> {\n  try {\n    // Calculate comprehensive statistics\n    const stats = await calculateUserStatistics();\n    \n    // Update the backend with new statistics\n    await apiService.updateUserStats({\n      totalPrayers: stats.totalPrayers,\n      onTimePrayers: stats.onTimePrayers,\n      qazaPrayers: stats.qazaPrayers,\n      currentStreak: stats.currentStreak,\n      bestStreak: stats.bestStreak,\n      perfectWeeks: stats.perfectWeeks,\n      lastStreakUpdate: getTodayString(),\n      updatedAt: new Date(),\n    });\n  } catch (error) {\n    console.error('Failed to update user statistics in backend:', error);\n  }\n}\n\n// Real-time statistics calculation for immediate UI updates\nexport function calculateRealTimeStatistics(newPrayers: DailyPrayers, currentStats: any): {\n  currentStreak: number;\n  qazaCount: number;\n  shouldUpdateBackend: boolean;\n} {\n  const todayCompleted = getTodayCompletedCount(newPrayers);\n  const todayPerfect = todayCompleted === 5;\n  \n  // Calculate immediate streak impact\n  let newCurrentStreak = currentStats.currentStreak || 0;\n  let qazaChange = 0;\n  \n  // Count missed prayers for today\n  const missedToday = 5 - todayCompleted;\n  \n  // If today is perfect, potentially extend streak\n  if (todayPerfect) {\n    // We'll verify this with API call later\n    newCurrentStreak = currentStats.currentStreak + 1;\n  } else if (missedToday > 0) {\n    // Reset streak if prayers were missed\n    newCurrentStreak = 0;\n    qazaChange = missedToday;\n  }\n  \n  return {\n    currentStreak: newCurrentStreak,\n    qazaCount: (currentStats.qazaCount || 0) + qazaChange,\n    shouldUpdateBackend: true, // Always update backend for accuracy\n  };\n}\n\n// Calculate how many Qaza prayers remain for the current year\nexport async function getYearlyQazaRemaining(): Promise<number> {\n  try {\n    const today = new Date();\n    const startOfYear = new Date(today.getFullYear(), 0, 1);\n    const currentDate = new Date();\n    \n    // Calculate total days from start of year to today (inclusive)\n    const daysSinceStartOfYear = Math.floor((currentDate.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    \n    // Total possible prayers for the year so far (5 prayers per day)\n    const totalPossible = daysSinceStartOfYear * 5;\n    \n    // Get year dates up to today\n    const yearDates = getYearDates().filter(date => date <= getTodayString());\n    const startDate = yearDates[0];\n    const endDate = yearDates[yearDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let completedPrayers = 0;\n    \n    yearDates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (prayer.completed) completedPrayers++;\n        });\n      }\n    });\n    \n    // Qaza prayers = Total possible - Completed prayers\n    return Math.max(0, totalPossible - completedPrayers);\n  } catch (error) {\n    console.error('Failed to get yearly Qaza remaining from API, falling back to localStorage:', error);\n    \n    // Fallback to localStorage\n    const today = new Date();\n    const startOfYear = new Date(today.getFullYear(), 0, 1);\n    const daysSinceStartOfYear = Math.floor((today.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    const totalPossible = daysSinceStartOfYear * 5;\n    \n    const yearDates = getYearDates().filter(date => date <= getTodayString());\n    let completedPrayers = 0;\n    \n    yearDates.forEach(date => {\n      const stored = localStorage.getItem(`prayers-${date}`);\n      if (stored) {\n        const prayers: DailyPrayers = JSON.parse(stored);\n        Object.values(prayers).forEach(prayer => {\n          if (prayer.completed) completedPrayers++;\n        });\n      }\n    });\n    \n    return Math.max(0, totalPossible - completedPrayers);\n  }\n}\n\n// Get comprehensive yearly statistics including total possible prayers, completed, and remaining\nexport async function getYearlyQazaStats(): Promise<{\n  totalPossible: number;\n  completed: number;\n  qazaRemaining: number;\n  currentYear: number;\n}> {\n  try {\n    const today = new Date();\n    const currentYear = today.getFullYear();\n    const startOfYear = new Date(currentYear, 0, 1);\n    \n    // Calculate total days from start of year to today (inclusive)\n    const daysSinceStartOfYear = Math.floor((today.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    \n    // Total possible prayers for the year so far (5 prayers per day)\n    const totalPossible = daysSinceStartOfYear * 5;\n    \n    // Get year dates up to today\n    const yearDates = getYearDates().filter(date => date <= getTodayString());\n    const startDate = yearDates[0];\n    const endDate = yearDates[yearDates.length - 1];\n    \n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let completed = 0;\n    \n    yearDates.forEach(date => {\n      const record = records.find(r => r.date === date);\n      if (record && record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          if (prayer.completed) completed++;\n        });\n      }\n    });\n    \n    const qazaRemaining = Math.max(0, totalPossible - completed);\n    \n    return {\n      totalPossible,\n      completed,\n      qazaRemaining,\n      currentYear\n    };\n  } catch (error) {\n    console.error('Failed to get yearly Qaza stats from API, falling back to localStorage:', error);\n    \n    // Fallback to localStorage\n    const today = new Date();\n    const currentYear = today.getFullYear();\n    const startOfYear = new Date(currentYear, 0, 1);\n    const daysSinceStartOfYear = Math.floor((today.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    const totalPossible = daysSinceStartOfYear * 5;\n    \n    const yearDates = getYearDates().filter(date => date <= getTodayString());\n    let completed = 0;\n    \n    yearDates.forEach(date => {\n      const stored = localStorage.getItem(`prayers-${date}`);\n      if (stored) {\n        const prayers: DailyPrayers = JSON.parse(stored);\n        Object.values(prayers).forEach(prayer => {\n          if (prayer.completed) completed++;\n        });\n      }\n    });\n    \n    const qazaRemaining = Math.max(0, totalPossible - completed);\n    \n    return {\n      totalPossible,\n      completed,\n      qazaRemaining,\n      currentYear\n    };\n  }\n}\n\n// Check Early Bird achievements (Fajr consistency)\nexport async function checkEarlyBirdAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30, 60, 100];\n    \n    for (const milestone of milestones) {\n      const consecutiveDays = await checkConsecutivePrayerCompletion('fajr', milestone);\n      \n      if (consecutiveDays >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Early Starter\";\n            description = \"3 consecutive days of Fajr prayers!\";\n            break;\n          case 7:\n            title = \"Dawn Devotee\";\n            description = \"1 week of consistent Fajr prayers!\";\n            break;\n          case 15:\n            title = \"Morning Master\";\n            description = \"15 days of Fajr dedication!\";\n            break;\n          case 30:\n            title = \"Fajr Champion\";\n            description = \"30 days of early morning devotion!\";\n            break;\n          case 60:\n            title = \"Early Bird Legend\";\n            description = \"60 days of Fajr consistency!\";\n            break;\n          case 100:\n            title = \"Dawn Guardian\";\n            description = \"100 days of Fajr mastery!\";\n            break;\n          default:\n            title = `Early Bird ${milestone}`;\n            description = `${milestone} consecutive Fajr prayers!`;\n        }\n        \n        achievements.push({\n          type: 'early_bird',\n          title,\n          description,\n          metadata: {\n            consecutiveDays: milestone,\n            prayerType: 'fajr',\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Early Bird achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Night Owl achievements (Isha consistency)\nexport async function checkNightOwlAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30, 60, 100];\n    \n    for (const milestone of milestones) {\n      const consecutiveDays = await checkConsecutivePrayerCompletion('isha', milestone);\n      \n      if (consecutiveDays >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Night Starter\";\n            description = \"3 consecutive nights of Isha prayers!\";\n            break;\n          case 7:\n            title = \"Evening Devotee\";\n            description = \"1 week of consistent Isha prayers!\";\n            break;\n          case 15:\n            title = \"Night Master\";\n            description = \"15 nights of Isha dedication!\";\n            break;\n          case 30:\n            title = \"Isha Champion\";\n            description = \"30 nights of evening devotion!\";\n            break;\n          case 60:\n            title = \"Night Owl Legend\";\n            description = \"60 nights of Isha consistency!\";\n            break;\n          case 100:\n            title = \"Night Guardian\";\n            description = \"100 nights of Isha mastery!\";\n            break;\n          default:\n            title = `Night Owl ${milestone}`;\n            description = `${milestone} consecutive Isha prayers!`;\n        }\n        \n        achievements.push({\n          type: 'night_owl',\n          title,\n          description,\n          metadata: {\n            consecutiveDays: milestone,\n            prayerType: 'isha',\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Night Owl achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Golden Hour achievements (Maghrib consistency)\nexport async function checkGoldenHourAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30, 60, 100];\n    \n    for (const milestone of milestones) {\n      const consecutiveDays = await checkConsecutivePrayerCompletion('maghrib', milestone);\n      \n      if (consecutiveDays >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Sunset Starter\";\n            description = \"3 consecutive days of Maghrib prayers!\";\n            break;\n          case 7:\n            title = \"Golden Devotee\";\n            description = \"1 week of consistent Maghrib prayers!\";\n            break;\n          case 15:\n            title = \"Sunset Master\";\n            description = \"15 days of Maghrib dedication!\";\n            break;\n          case 30:\n            title = \"Maghrib Champion\";\n            description = \"30 days of golden hour devotion!\";\n            break;\n          case 60:\n            title = \"Golden Hour Legend\";\n            description = \"60 days of Maghrib consistency!\";\n            break;\n          case 100:\n            title = \"Sunset Guardian\";\n            description = \"100 days of Maghrib mastery!\";\n            break;\n          default:\n            title = `Golden Hour ${milestone}`;\n            description = `${milestone} consecutive Maghrib prayers!`;\n        }\n        \n        achievements.push({\n          type: 'golden_hour',\n          title,\n          description,\n          metadata: {\n            consecutiveDays: milestone,\n            prayerType: 'maghrib',\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Golden Hour achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Weekend Warrior achievements\nexport async function checkWeekendWarriorAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [1, 2, 4, 8, 12, 24];\n    \n    for (const milestone of milestones) {\n      const perfectWeekends = await countPerfectWeekends();\n      \n      if (perfectWeekends >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 1:\n            title = \"Weekend Starter\";\n            description = \"First perfect weekend achieved!\";\n            break;\n          case 2:\n            title = \"Weekend Enthusiast\";\n            description = \"2 perfect weekends completed!\";\n            break;\n          case 4:\n            title = \"Weekend Champion\";\n            description = \"4 perfect weekends in a month!\";\n            break;\n          case 8:\n            title = \"Weekend Master\";\n            description = \"8 perfect weekends achieved!\";\n            break;\n          case 12:\n            title = \"Weekend Legend\";\n            description = \"12 perfect weekends completed!\";\n            break;\n          case 24:\n            title = \"Weekend Guardian\";\n            description = \"24 perfect weekends mastered!\";\n            break;\n          default:\n            title = `Weekend Warrior ${milestone}`;\n            description = `${milestone} perfect weekends achieved!`;\n        }\n        \n        achievements.push({\n          type: 'weekend_warrior',\n          title,\n          description,\n          metadata: {\n            perfectWeekends: milestone,\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Weekend Warrior achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Dedication achievements (Weekend streaks)\nexport async function checkDedicationAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30];\n    \n    for (const milestone of milestones) {\n      const consecutiveWeekends = await checkConsecutiveWeekendStreaks();\n      \n      if (consecutiveWeekends >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Dedicated Beginner\";\n            description = \"3 consecutive perfect weekends!\";\n            break;\n          case 7:\n            title = \"Weekend Devotee\";\n            description = \"7 consecutive perfect weekends!\";\n            break;\n          case 15:\n            title = \"Dedication Master\";\n            description = \"15 consecutive perfect weekends!\";\n            break;\n          case 30:\n            title = \"Ultimate Dedication\";\n            description = \"30 consecutive perfect weekends!\";\n            break;\n          default:\n            title = `Dedication ${milestone}`;\n            description = `${milestone} consecutive perfect weekends!`;\n        }\n        \n        achievements.push({\n          type: 'dedication',\n          title,\n          description,\n          metadata: {\n            consecutiveWeekends: milestone,\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Dedication achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Comeback achievements\nexport async function checkComebackAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [3, 7, 15, 30];\n    \n    for (const milestone of milestones) {\n      const isComeback = await checkIfComebackStreak(milestone);\n      \n      if (isComeback) {\n        let title, description;\n        \n        switch (milestone) {\n          case 3:\n            title = \"Fresh Start\";\n            description = \"3 days back on track after missing prayers!\";\n            break;\n          case 7:\n            title = \"Comeback Kid\";\n            description = \"1 week of prayers after a setback!\";\n            break;\n          case 15:\n            title = \"Resilient Soul\";\n            description = \"15 days of recovery and dedication!\";\n            break;\n          case 30:\n            title = \"Phoenix Rising\";\n            description = \"30 days of comeback dedication!\";\n            break;\n          default:\n            title = `Comeback ${milestone}`;\n            description = `${milestone} days of recovery after missed prayers!`;\n        }\n        \n        achievements.push({\n          type: 'comeback',\n          title,\n          description,\n          metadata: {\n            comebackDays: milestone,\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Comeback achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Monthly Champion achievements\nexport async function checkMonthlyChampionAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const milestones = [1, 2, 3, 6, 12];\n    \n    for (const milestone of milestones) {\n      const perfectMonths = await countPerfectMonths();\n      \n      if (perfectMonths >= milestone) {\n        let title, description;\n        \n        switch (milestone) {\n          case 1:\n            title = \"Monthly Achiever\";\n            description = \"First perfect month completed!\";\n            break;\n          case 2:\n            title = \"Bi-Monthly Champion\";\n            description = \"2 perfect months achieved!\";\n            break;\n          case 3:\n            title = \"Quarterly Master\";\n            description = \"3 perfect months completed!\";\n            break;\n          case 6:\n            title = \"Half-Year Champion\";\n            description = \"6 perfect months achieved!\";\n            break;\n          case 12:\n            title = \"Yearly Champion\";\n            description = \"12 perfect months - A full year!\";\n            break;\n          default:\n            title = `Monthly Champion ${milestone}`;\n            description = `${milestone} perfect months achieved!`;\n        }\n        \n        achievements.push({\n          type: 'monthly_champion',\n          title,\n          description,\n          metadata: {\n            perfectMonths: milestone,\n            earnedDate: getTodayString()\n          }\n        });\n        break; // Only award the current milestone\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Monthly Champion achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Check Seasonal achievements\nexport async function checkSeasonalAchievements(): Promise<Array<{ type: string; title: string; description: string; metadata: any }>> {\n  const achievements: Array<{ type: string; title: string; description: string; metadata: any }> = [];\n  \n  try {\n    const currentMonth = new Date().getMonth() + 1; // 1-12\n    const currentYear = new Date().getFullYear();\n    \n    // Check for Ramadan (approximate - month 9 in Islamic calendar, but using month check for simplicity)\n    if (currentMonth === 4 && isEndOfMonth()) { // April as example Ramadan month\n      const monthProgress = await calculateMonthProgressFromAPI();\n      if (monthProgress === 100) {\n        achievements.push({\n          type: 'seasonal',\n          title: \"Ramadan Champion\",\n          description: \"Perfect prayers throughout the holy month!\",\n          metadata: {\n            specialMonth: 'Ramadan',\n            month: currentMonth,\n            year: currentYear,\n            earnedDate: getTodayString()\n          }\n        });\n      }\n    }\n    \n    // Check for perfect prayers during Dhul Hijjah (month 12)\n    if (currentMonth === 7 && isEndOfMonth()) { // July as example Dhul Hijjah month\n      const monthProgress = await calculateMonthProgressFromAPI();\n      if (monthProgress === 100) {\n        achievements.push({\n          type: 'seasonal',\n          title: \"Hajj Month Devotee\",\n          description: \"Perfect prayers during Dhul Hijjah!\",\n          metadata: {\n            specialMonth: 'Dhul Hijjah',\n            month: currentMonth,\n            year: currentYear,\n            earnedDate: getTodayString()\n          }\n        });\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to check Seasonal achievements:', error);\n  }\n  \n  return achievements;\n}\n\n// Helper function to check consecutive prayer completion for a specific prayer\nexport async function checkConsecutivePrayerCompletion(prayerType: 'fajr' | 'dhuhr' | 'asr' | 'maghrib' | 'isha', targetDays: number): Promise<number> {\n  try {\n    let consecutiveDays = 0;\n    const today = new Date();\n    \n    for (let i = 0; i < targetDays + 10; i++) { // Check a few extra days to be sure\n      const checkDate = new Date(today);\n      checkDate.setDate(today.getDate() - i);\n      const dateString = checkDate.toISOString().split('T')[0];\n      \n      const record = await apiService.getPrayerRecord(dateString);\n      \n      if (record && record.prayers && record.prayers[prayerType] && record.prayers[prayerType].completed) {\n        consecutiveDays++;\n      } else {\n        break; // Streak broken\n      }\n    }\n    \n    return consecutiveDays;\n  } catch (error) {\n    console.error(`Failed to check consecutive ${prayerType} completion:`, error);\n    return 0;\n  }\n}\n\n// Helper function to count perfect weekends\nexport async function countPerfectWeekends(): Promise<number> {\n  try {\n    const { startDate, endDate } = getDateRangeForPeriod('year');\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    let perfectWeekends = 0;\n    const weekends: { [key: string]: { saturday: boolean; sunday: boolean } } = {};\n    \n    records.forEach(record => {\n      const date = new Date(record.date);\n      const dayOfWeek = date.getDay();\n      \n      if (dayOfWeek === 6 || dayOfWeek === 0) { // Saturday or Sunday\n        const weekKey = getWeekStart(date).toISOString().split('T')[0];\n        \n        if (!weekends[weekKey]) {\n          weekends[weekKey] = { saturday: false, sunday: false };\n        }\n        \n        if (record.prayers) {\n          const prayers = convertPrayerRecordToDailyPrayers(record);\n          if (prayers) {\n            const allCompleted = Object.values(prayers).every(prayer => prayer.completed);\n            if (dayOfWeek === 6) weekends[weekKey].saturday = allCompleted;\n            if (dayOfWeek === 0) weekends[weekKey].sunday = allCompleted;\n          }\n        }\n      }\n    });\n    \n    // Count weekends where both Saturday and Sunday were perfect\n    Object.values(weekends).forEach(weekend => {\n      if (weekend.saturday && weekend.sunday) {\n        perfectWeekends++;\n      }\n    });\n    \n    return perfectWeekends;\n  } catch (error) {\n    console.error('Failed to count perfect weekends:', error);\n    return 0;\n  }\n}\n\n// Helper function to check consecutive weekend streaks\nexport async function checkConsecutiveWeekendStreaks(): Promise<number> {\n  try {\n    let consecutiveWeekends = 0;\n    const today = new Date();\n    let currentWeekStart = getWeekStart(today);\n    \n    // Go back weekend by weekend\n    for (let i = 0; i < 52; i++) { // Check up to a year of weekends\n      const saturday = new Date(currentWeekStart);\n      saturday.setDate(currentWeekStart.getDate() + 5);\n      const sunday = new Date(currentWeekStart);\n      sunday.setDate(currentWeekStart.getDate() + 6);\n      \n      const saturdayRecord = await apiService.getPrayerRecord(saturday.toISOString().split('T')[0]);\n      const sundayRecord = await apiService.getPrayerRecord(sunday.toISOString().split('T')[0]);\n      \n      let weekendPerfect = true;\n      \n      // Check Saturday\n      if (saturdayRecord && saturdayRecord.prayers) {\n        const saturdayPrayers = convertPrayerRecordToDailyPrayers(saturdayRecord);\n        if (!saturdayPrayers || !Object.values(saturdayPrayers).every(prayer => prayer.completed)) {\n          weekendPerfect = false;\n        }\n      } else {\n        weekendPerfect = false;\n      }\n      \n      // Check Sunday\n      if (sundayRecord && sundayRecord.prayers) {\n        const sundayPrayers = convertPrayerRecordToDailyPrayers(sundayRecord);\n        if (!sundayPrayers || !Object.values(sundayPrayers).every(prayer => prayer.completed)) {\n          weekendPerfect = false;\n        }\n      } else {\n        weekendPerfect = false;\n      }\n      \n      if (weekendPerfect) {\n        consecutiveWeekends++;\n        currentWeekStart.setDate(currentWeekStart.getDate() - 7);\n      } else {\n        break;\n      }\n    }\n    \n    return consecutiveWeekends;\n  } catch (error) {\n    console.error('Failed to check consecutive weekend streaks:', error);\n    return 0;\n  }\n}\n\n// Helper function to check if current streak is a comeback after missed prayers\nexport async function checkIfComebackStreak(targetDays: number): Promise<boolean> {\n  try {\n    const today = new Date();\n    let currentStreak = 0;\n    let foundMissedPrayers = false;\n    \n    // Check current streak\n    for (let i = 0; i < targetDays + 5; i++) {\n      const checkDate = new Date(today);\n      checkDate.setDate(today.getDate() - i);\n      const dateString = checkDate.toISOString().split('T')[0];\n      \n      const record = await apiService.getPrayerRecord(dateString);\n      \n      if (record && record.prayers) {\n        const prayers = convertPrayerRecordToDailyPrayers(record);\n        if (prayers) {\n          const allCompleted = Object.values(prayers).every(prayer => prayer.completed);\n          if (allCompleted) {\n            currentStreak++;\n          } else {\n            if (currentStreak >= targetDays) {\n              foundMissedPrayers = true;\n              break;\n            }\n            return false;\n          }\n        }\n      } else {\n        if (currentStreak >= targetDays) {\n          foundMissedPrayers = true;\n          break;\n        }\n        return false;\n      }\n    }\n    \n    return currentStreak >= targetDays && foundMissedPrayers;\n  } catch (error) {\n    console.error('Failed to check comeback streak:', error);\n    return false;\n  }\n}\n\n// Helper function to count perfect months\nexport async function countPerfectMonths(): Promise<number> {\n  try {\n    const { startDate, endDate } = getDateRangeForPeriod('year');\n    const records = await apiService.getPrayerRecords(startDate, endDate);\n    \n    const months: { [key: string]: { completed: number; total: number } } = {};\n    \n    // Group records by month\n    records.forEach(record => {\n      const date = new Date(record.date);\n      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      \n      if (!months[monthKey]) {\n        months[monthKey] = { completed: 0, total: 0 };\n      }\n      \n      if (record.prayers) {\n        Object.values(record.prayers).forEach(prayer => {\n          months[monthKey].total++;\n          if (prayer.completed) {\n            months[monthKey].completed++;\n          }\n        });\n      } else {\n        months[monthKey].total += 5;\n      }\n    });\n    \n    // Count months with 100% completion\n    let perfectMonths = 0;\n    Object.values(months).forEach(month => {\n      if (month.total > 0 && month.completed === month.total) {\n        perfectMonths++;\n      }\n    });\n    \n    return perfectMonths;\n  } catch (error) {\n    console.error('Failed to count perfect months:', error);\n    return 0;\n  }\n}\n","size_bytes":71298},"server/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"server/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"server/client/src/pages/achievements.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Flame, Clock, Mountain, Calendar, Target, Trophy, Star } from 'lucide-react';\nimport { AchievementCard, MilestoneProgress } from '../components/achievement-card';\nimport { usePrayer } from '../contexts/prayer-context';\nimport { Achievement, UserStats } from '@shared/schema';\nimport { apiService } from '@/lib/api-service';\nimport { getPeriodSummary } from '@/lib/prayer-utils';\n\nexport default function Achievements() {\n  const { currentStreak, isLoading: contextLoading } = usePrayer();\n  const [achievements, setAchievements] = useState<Achievement[]>([]);\n  const [userStats, setUserStats] = useState<UserStats | null>(null);\n  const [milestones, setMilestones] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [monthSummary, setMonthSummary] = useState<any>(null);\n  const [weekSummary, setWeekSummary] = useState<any>(null);\n\n  useEffect(() => {\n    loadAchievementsData();\n  }, []);\n\n  const loadAchievementsData = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Load achievements and user stats from API\n      const [achievementsData, statsData] = await Promise.all([\n        apiService.getAchievements(),\n        apiService.getUserStats()\n      ]);\n      \n      setAchievements(achievementsData);\n      setUserStats(statsData);\n      \n      // Load analytics data for milestones\n      const [monthData, weekData] = await Promise.all([\n        getPeriodSummary('month').catch(() => ({ successRate: 0, totalPrayers: 0, onTimePrayers: 0 })),\n        getPeriodSummary('week').catch(() => ({ successRate: 0, totalPrayers: 0, onTimePrayers: 0 }))\n      ]);\n      \n      setMonthSummary(monthData);\n      setWeekSummary(weekData);\n      \n      // Calculate milestones based on real data\n      const calculatedMilestones = calculateMilestones(statsData, monthData, weekData);\n      setMilestones(calculatedMilestones);\n      \n    } catch (error) {\n      console.error('Failed to load achievements data:', error);\n      // Fallback to localStorage for achievements if API fails\n      const storedAchievements = localStorage.getItem('achievements');\n      if (storedAchievements) {\n        setAchievements(JSON.parse(storedAchievements));\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const calculateMilestones = (stats: UserStats, monthData: any, weekData: any) => {\n    const currentMonth = new Date().getMonth();\n    const daysInMonth = new Date(new Date().getFullYear(), currentMonth + 1, 0).getDate();\n    const maxMonthlyPrayers = daysInMonth * 5;\n    \n    return [\n      {\n        title: \"7-Day Streak\",\n        description: \"Complete prayers for 7 consecutive days\",\n        current: Math.min(currentStreak, 7),\n        target: 7,\n        icon: Flame,\n        color: \"bg-orange-500\",\n      },\n      {\n        title: \"30-Day Streak\",\n        description: \"Complete prayers for 30 consecutive days\",\n        current: Math.min(currentStreak, 30),\n        target: 30,\n        icon: Calendar,\n        color: \"bg-primary\",\n      },\n      {\n        title: \"100-Day Streak\",\n        description: \"Complete prayers for 100 consecutive days\",\n        current: Math.min(currentStreak, 100),\n        target: 100,\n        icon: Trophy,\n        color: \"bg-yellow-500\",\n      },\n      {\n        title: \"Prayer Master\",\n        description: \"Complete 1000 prayers total\",\n        current: Math.min(stats.totalPrayers || 0, 1000),\n        target: 1000,\n        icon: Target,\n        color: \"bg-green-500\",\n      },\n      {\n        title: \"Weekly Consistency\",\n        description: \"80%+ prayer completion this week\",\n        current: weekData.successRate || 0,\n        target: 80,\n        icon: Star,\n        color: \"bg-blue-500\",\n      },\n      {\n        title: \"Monthly Devotee\",\n        description: \"Complete 80% of prayers this month\",\n        current: monthData.successRate || 0,\n        target: 80,\n        icon: Mountain,\n        color: \"bg-purple-500\",\n      },\n    ];\n  };\n\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"page-achievements\">\n      <h2 className=\"text-2xl font-bold text-center\" data-testid=\"text-achievements-title\">\n        Achievements\n      </h2>\n      \n      {/* Current Streak Card */}\n      <div className=\"glass-card rounded-2xl p-6 text-center animate-float\">\n        <div className=\"w-20 h-20 bg-gradient-to-br from-secondary to-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Flame className=\"w-8 h-8 text-white\" />\n        </div>\n        <h3 className=\"text-xl font-bold text-foreground mb-2\" data-testid=\"text-current-streak-title\">\n          Current Streak\n        </h3>\n        <p className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-current-streak-value\">\n          {currentStreak} Days\n        </p>\n        <p className=\"text-muted-foreground\">\n          Keep going! Your best streak is{' '}\n          <span className=\"font-semibold\" data-testid=\"text-best-streak\">\n            {Math.max(userStats?.bestStreak || 0, currentStreak)} days\n          </span>\n        </p>\n        {userStats && (\n          <div className=\"mt-4 grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <p className=\"text-muted-foreground\">Total Prayers</p>\n              <p className=\"font-semibold text-primary\">{userStats.totalPrayers || 0}</p>\n            </div>\n            <div>\n              <p className=\"text-muted-foreground\">On-Time Prayers</p>\n              <p className=\"font-semibold text-green-600\">{userStats.onTimePrayers || 0}</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Achievement Cards Grid */}\n      {achievements.length > 0 ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {achievements.map((achievement, index) => (\n            <AchievementCard \n              key={achievement.id} \n              achievement={achievement} \n              index={index}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"glass-card rounded-2xl p-8 text-center\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Calendar className=\"w-8 h-8 text-muted-foreground\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-no-achievements\">\n            No Achievements Yet\n          </h3>\n          <p className=\"text-muted-foreground\">\n            Complete your first perfect week to unlock your first achievement!\n          </p>\n        </div>\n      )}\n\n      {/* Milestone Progress */}\n      <div className=\"glass-card rounded-2xl p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-milestones-title\">\n          Milestones\n        </h3>\n        {isLoading || contextLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-muted rounded-full\"></div>\n                    <div>\n                      <div className=\"h-4 bg-muted rounded w-32 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-48\"></div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"h-4 bg-muted rounded w-16 mb-2\"></div>\n                    <div className=\"w-20 h-2 bg-muted rounded-full\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {milestones.map((milestone) => (\n              <MilestoneProgress\n                key={milestone.title}\n                title={milestone.title}\n                description={milestone.description}\n                current={milestone.current}\n                target={milestone.target}\n                icon={milestone.icon}\n                color={milestone.color}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8174},"server/client/src/pages/analytics.tsx":{"content":"import { AnalyticsCharts } from '../components/analytics-charts';\n\nexport default function Analytics() {\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-analytics\">\n      <h2 className=\"text-2xl font-bold text-center\" data-testid=\"text-analytics-title\">\n        Analytics\n      </h2>\n      <AnalyticsCharts />\n    </div>\n  );\n}\n","size_bytes":340},"server/client/src/pages/dashboard.tsx":{"content":"import { PrayerTracker } from '../components/prayer-tracker';\nimport { WeeklyProgress, WeeklyOverview } from '../components/weekly-progress';\n\nexport default function Dashboard() {\n  return (\n    <div className=\"space-y-8\" data-testid=\"page-dashboard\">\n      <section>\n        <h2 className=\"text-2xl font-bold mb-6 text-center\" data-testid=\"text-page-title\">\n          Today's Prayers\n        </h2>\n        <PrayerTracker />\n      </section>\n\n      <WeeklyProgress />\n      <WeeklyOverview />\n    </div>\n  );\n}\n","size_bytes":512},"server/client/src/pages/landing.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ThemeToggle } from '@/components/theme-toggle';\nimport { Calendar, Trophy, BarChart3, Clock, Zap, Star } from 'lucide-react';\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = '/api/login';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-purple-900 dark:to-indigo-900\">\n      {/* Header */}\n      <header className=\"glass-nav fixed top-0 left-0 right-0 z-50 px-4 py-3 m-4 rounded-2xl\" data-testid=\"header-landing\">\n        <div className=\"flex items-center justify-between max-w-6xl mx-auto\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-lg\">🕌</span>\n            </div>\n            <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-title\">\n              Namaz Tracker\n            </h1>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <ThemeToggle />\n            <Button \n              onClick={handleLogin}\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-login-header\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"pt-24 pb-8 px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16 space-y-6\">\n            <div className=\"space-y-4\">\n              <Badge variant=\"secondary\" className=\"text-sm px-4 py-2\" data-testid=\"badge-spiritual\">\n                ✨ Strengthen Your Spiritual Journey\n              </Badge>\n              <h1 className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\" data-testid=\"text-hero-title\">\n                Track Your Daily Prayers\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed\" data-testid=\"text-hero-description\">\n                Never miss a prayer again. Build consistent habits, track your spiritual progress, and earn achievements along your journey.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Button \n                size=\"lg\" \n                onClick={handleLogin}\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-3 text-lg rounded-full shadow-lg\"\n                data-testid=\"button-login-hero\"\n              >\n                Start Tracking Today\n              </Button>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-free-signup\">\n                Free to use • Secure with Replit Auth\n              </p>\n            </div>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16\">\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-tracking\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center mb-4\">\n                  <Calendar className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Daily Prayer Tracking</CardTitle>\n                <CardDescription>\n                  Log your 5 daily prayers and track completion times\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-analytics\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mb-4\">\n                  <BarChart3 className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Progress Analytics</CardTitle>\n                <CardDescription>\n                  Visualize your prayer consistency with beautiful charts\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-achievements\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mb-4\">\n                  <Trophy className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Achievements</CardTitle>\n                <CardDescription>\n                  Earn badges and celebrate your spiritual milestones\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-streaks\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center mb-4\">\n                  <Zap className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Prayer Streaks</CardTitle>\n                <CardDescription>\n                  Build momentum with daily prayer streaks and habits\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-timing\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center mb-4\">\n                  <Clock className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">On-Time Tracking</CardTitle>\n                <CardDescription>\n                  Monitor if you're praying within the prescribed times\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"glass-card border-0 shadow-xl\" data-testid=\"card-feature-insights\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-teal-500 to-green-500 rounded-full flex items-center justify-center mb-4\">\n                  <Star className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Weekly Insights</CardTitle>\n                <CardDescription>\n                  Get detailed insights into your weekly prayer patterns\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n\n          {/* CTA Section */}\n          <div className=\"text-center space-y-6\">\n            <div className=\"glass-card p-8 rounded-3xl border-0 shadow-2xl max-w-2xl mx-auto\" data-testid=\"card-cta\">\n              <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"text-cta-title\">\n                Ready to Begin Your Journey?\n              </h2>\n              <p className=\"text-muted-foreground mb-6 text-lg\" data-testid=\"text-cta-description\">\n                Join thousands of Muslims who are strengthening their prayer habits with Namaz Tracker.\n              </p>\n              <Button \n                size=\"lg\" \n                onClick={handleLogin}\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-12 py-4 text-lg rounded-full shadow-lg\"\n                data-testid=\"button-login-cta\"\n              >\n                Get Started Now\n              </Button>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":8238},"server/client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ThemeToggle } from '@/components/theme-toggle';\nimport { Calendar } from 'lucide-react';\n\nconst loginSchema = z.object({\n  username: z.string().min(1, 'Username is required'),\n  password: z.string().min(1, 'Password is required'),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, 'Username must be at least 3 characters'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Login() {\n  const [location, navigate] = useLocation();\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n  });\n\n  const onLogin = async (data: LoginForm) => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n\n      const { token, user } = await response.json();\n\n      // Store token in localStorage\n      localStorage.setItem('authToken', token);\n\n      // Redirect to dashboard or original location\n      const redirectTo = new URLSearchParams(location.split('?')[1]).get('redirect') || '/dashboard';\n      navigate(redirectTo);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Login failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onRegister = async (data: RegisterForm) => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...data,\n          passwordHash: data.password, // Pass plain password, let server hash it\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n\n      const { token, user } = await response.json();\n\n      // Store token in localStorage\n      localStorage.setItem('authToken', token);\n\n      // Redirect to dashboard\n      navigate('/dashboard');\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Registration failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-purple-900 dark:to-indigo-900 flex items-center justify-center p-4\">\n      <div className=\"absolute top-4 right-4\">\n        <ThemeToggle />\n      </div>\n\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Calendar className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Namaz Tracker</h1>\n          <p className=\"text-muted-foreground\">Track your daily prayers</p>\n        </div>\n\n        <Card className=\"glass-card\">\n          <CardHeader>\n            <CardTitle>Welcome</CardTitle>\n            <CardDescription>\n              Sign in to your account or create a new one\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {error && (\n              <Alert className=\"mb-4\" variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\">\n                <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                  <div>\n                    <Input\n                      {...loginForm.register('username')}\n                      placeholder=\"Username\"\n                      disabled={isLoading}\n                    />\n                    {loginForm.formState.errors.username && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {loginForm.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Input\n                      {...loginForm.register('password')}\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      disabled={isLoading}\n                    />\n                    {loginForm.formState.errors.password && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? 'Signing in...' : 'Sign In'}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\">\n                <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                  <div>\n                    <Input\n                      {...registerForm.register('username')}\n                      placeholder=\"Username\"\n                      disabled={isLoading}\n                    />\n                    {registerForm.formState.errors.username && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Input\n                      {...registerForm.register('email')}\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      disabled={isLoading}\n                    />\n                    {registerForm.formState.errors.email && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Input\n                      {...registerForm.register('password')}\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      disabled={isLoading}\n                    />\n                    {registerForm.formState.errors.password && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Input\n                      {...registerForm.register('firstName')}\n                      placeholder=\"First Name (optional)\"\n                      disabled={isLoading}\n                    />\n                    <Input\n                      {...registerForm.register('lastName')}\n                      placeholder=\"Last Name (optional)\"\n                      disabled={isLoading}\n                    />\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? 'Creating account...' : 'Create Account'}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"mt-6 text-center\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => navigate('/')}\n              >\n                Back to Home\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9038},"server/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"server/client/src/pages/qaza.tsx":{"content":"import { QazaPrayerManager } from '../components/qaza-prayer-manager';\n\nexport default function Qaza() {\n  return (\n    <div className=\"space-y-8\" data-testid=\"page-qaza\">\n      <section>\n        <h2 className=\"text-2xl font-bold mb-6 text-center\" data-testid=\"text-page-title\">\n          Qaza Prayer Management\n        </h2>\n        <p className=\"text-center text-muted-foreground mb-8\" data-testid=\"text-page-description\">\n          Review and update your past prayer records to keep your spiritual journey accurate.\n        </p>\n        <QazaPrayerManager />\n      </section>\n    </div>\n  );\n}","size_bytes":596},"server/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"server/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"server/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"server/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"server/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"server/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"server/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"server/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"server/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"server/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"server/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"server/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"server/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"server/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"server/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"server/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"server/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"server/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"server/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"server/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"server/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 right-0 z-[100] flex max-h-screen flex-col p-4 md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 rounded-lg p-6 pr-8 transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full\",\n  {\n    variants: {\n      variant: {\n        default: \"glass-toast text-foreground\",\n        destructive:\n          \"destructive group glass-toast-destructive text-white\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4675},"server/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"server/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"SETUP_ISSUES.md":{"content":"# Replit Setup Issues and Solutions\n\nThis document outlines the issues encountered while setting up the NamazTracker application in the Replit environment and how they were resolved.\n\n## Issues Encountered\n\n### 1. Missing Cross-Env Package\n**Issue:** The application failed to start with the error:\n```\nsh: 1: cross-env: not found\n```\n\n**Root Cause:** The `node_modules` directory was not present because dependencies weren't installed after the GitHub import.\n\n**Solution:** Ran `npm install` to install all dependencies listed in `package.json`, including the `cross-env` package needed for cross-platform environment variable management.\n\n---\n\n### 2. Vite Configuration for Replit Proxy\n**Issue:** The application needed to work within Replit's iframe proxy environment where the frontend is not directly accessible at `localhost:5000`.\n\n**Root Cause:** By default, Vite's development server has host restrictions that would block requests coming from Replit's proxy domain.\n\n**Solution:** The Vite configuration in `server/vite.ts` was already properly set up with:\n```typescript\nconst serverOptions = {\n  middlewareMode: true,\n  hmr: { server },\n  allowedHosts: true, // This allows all hosts including Replit's proxy\n};\n```\n\nThis configuration was already in place, so no changes were needed.\n\n---\n\n### 3. Server Binding to Correct Host and Port\n**Issue:** The server needed to bind to the correct host and port for Replit's environment.\n\n**Root Cause:** Replit requires servers to bind to `0.0.0.0:5000` to be accessible through their proxy system. Port 5000 is the only port not firewalled.\n\n**Solution:** The server was already correctly configured in `server/index.ts`:\n```typescript\nconst port = parseInt(process.env.PORT || '5000', 10);\nserver.listen(port, \"0.0.0.0\", () => {\n  log(`IslamIC Prayer Tracker running at http://0.0.0.0:${port}`);\n});\n```\n\n---\n\n### 4. Workflow Configuration\n**Issue:** The workflow needed to be properly configured with the correct output type and port.\n\n**Root Cause:** Frontend applications in Replit require the `webview` output type and must wait for port 5000 to be ready.\n\n**Solution:** Configured the workflow with:\n- Name: \"Start application\"\n- Command: `npm run dev`\n- Output Type: `webview`\n- Wait for Port: `5000`\n\n---\n\n### 5. Database Connection Without Demo User\n**Issue:** The application connected to the PostgreSQL database successfully, but the API returned 500 errors when trying to fetch user stats:\n```\nGET /api/stats 500 in 62ms :: {\"message\":\"insert or update on table \\\"user_stat...\n```\n\n**Root Cause:** The database tables existed but the demo user (`id: 'demo-user'`) wasn't present in the database. When the API tried to create user stats for a non-existent user, it violated the foreign key constraint.\n\n**Solution:** \n1. Verified database connection and checked that all tables existed:\n   ```sql\n   SELECT tablename FROM pg_tables WHERE schemaname = 'public';\n   -- Result: users, achievements, prayer_records, user_stats\n   ```\n\n2. Checked for demo user and found none existed:\n   ```sql\n   SELECT id, username, email FROM users WHERE id = 'demo-user';\n   -- Result: 0 rows\n   ```\n\n3. Created the demo user and initial stats:\n   ```sql\n   INSERT INTO users (id, username, email, password_hash, first_name, last_name, is_active, created_at, updated_at)\n   VALUES ('demo-user', 'demo', 'demo@example.com', '', 'Demo', 'User', true, NOW(), NOW())\n   ON CONFLICT (id) DO NOTHING;\n\n   INSERT INTO user_stats (user_id, total_prayers, on_time_prayers, qaza_prayers, current_streak, best_streak, perfect_weeks, last_streak_update, updated_at)\n   VALUES ('demo-user', 0, 0, 0, 0, 0, 0, NULL, NOW())\n   ON CONFLICT (user_id) DO NOTHING;\n   ```\n\n4. After inserting the demo user, the API started working correctly with status 200 responses.\n\n---\n\n## LSP Diagnostic Warning (Non-Critical)\n\n**Warning:** TypeScript LSP shows an error in `server/vite.ts`:\n```\nModule '\"vite\"' has no exported member 'createServer'.\n```\n\n**Impact:** This is a TypeScript definition issue that doesn't affect runtime. The application runs successfully because `createServer` is available at runtime from the Vite package.\n\n**Status:** Non-critical - no action needed. The code works correctly despite the LSP warning.\n\n---\n\n## Verification Steps\n\nAfter resolving all issues, the following verification was performed:\n\n1. ✅ Server starts successfully on port 5000\n2. ✅ Database connection established to heliumdb\n3. ✅ All API endpoints return successful responses\n4. ✅ Frontend loads without console errors\n5. ✅ All pages accessible and functional:\n   - Dashboard - Shows today's prayers with prayer times\n   - Qaza - Historical prayer management\n   - Achievements - Streak tracking and badges\n   - Analytics - Prayer completion trends\n\n---\n\n## Final Configuration Summary\n\n**Environment Variables:**\n- `DATABASE_URL`: `postgresql://postgres:password@helium/heliumdb?sslmode=disable`\n- `NODE_ENV`: Set to `development` via cross-env in npm scripts\n\n**Workflow:**\n- Command: `npm run dev`\n- Port: 5000\n- Output Type: webview\n- Status: Running\n\n**Deployment:**\n- Target: autoscale (for stateless web applications)\n- Build: `npm run build` (Vite + esbuild)\n- Run: `npm run start` (production server)\n\n**Database:**\n- Type: PostgreSQL (heliumdb on Replit)\n- Tables: users, prayer_records, achievements, user_stats\n- Demo User: Created with ID 'demo-user'\n\n---\n\n## Lessons Learned\n\n1. **Always run npm install after GitHub imports** - Dependencies aren't included in repositories.\n\n2. **Replit requires specific server configuration** - Must bind to `0.0.0.0:5000` and allow all hosts in Vite config.\n\n3. **Database setup requires initial data** - Even with correct schema, foreign key constraints require parent records to exist first.\n\n4. **Workflow configuration is critical** - Frontend applications must use `webview` output type and wait for port 5000.\n\n5. **LSP warnings don't always indicate runtime issues** - TypeScript type definitions can lag behind actual package exports.\n","size_bytes":6028}},"version":1}